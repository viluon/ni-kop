{"pandoc-api-version":[1,22,1],"meta":{"author":{"t":"MetaInlines","c":[{"t":"Str","c":"Ondřej"},{"t":"Space"},{"t":"Str","c":"Kvapil"}]},"title":{"t":"MetaInlines","c":[{"t":"Str","c":"NI-KOP"},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"úkol"},{"t":"Space"},{"t":"Str","c":"3"}]}},"blocks":[{"t":"Header","c":[1,["kombinatorická-optimalizace-problém-batohu",[],[]],[{"t":"Str","c":"Kombinatorická"},{"t":"Space"},{"t":"Str","c":"optimalizace:"},{"t":"Space"},{"t":"Str","c":"problém"},{"t":"Space"},{"t":"Str","c":"batohu"}]]},{"t":"Header","c":[2,["zadání",[],[]],[{"t":"Str","c":"Zadání"}]]},{"t":"Para","c":[{"t":"Str","c":"U"},{"t":"Space"},{"t":"Str","c":"následujících"},{"t":"Space"},{"t":"Str","c":"metod"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"konstruktivní"},{"t":"Space"},{"t":"Str","c":"verze"},{"t":"Space"},{"t":"Str","c":"problému"},{"t":"Space"},{"t":"Str","c":"batohu"}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"hrubá"},{"t":"Space"},{"t":"Str","c":"síla"},{"t":"Space"},{"t":"Str","c":"(pokud"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"implementace"},{"t":"Space"},{"t":"Str","c":"není"},{"t":"Space"},{"t":"Str","c":"evidentní"},{"t":"Space"},{"t":"Str","c":"úplná"},{"t":"Space"},{"t":"Str","c":"necitlivost"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"SoftBreak"},{"t":"Str","c":"vlastnosti"},{"t":"Space"},{"t":"Str","c":"instancí)"}]}],[{"t":"Plain","c":[{"t":"Str","c":"metoda"},{"t":"Space"},{"t":"Str","c":"větví"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"hranic,"},{"t":"Space"},{"t":"Str","c":"případně"},{"t":"Space"},{"t":"Str","c":"ve"},{"t":"Space"},{"t":"Str","c":"více"},{"t":"Space"},{"t":"Str","c":"variantách"}]}],[{"t":"Plain","c":[{"t":"Str","c":"dynamické"},{"t":"Space"},{"t":"Str","c":"programování"},{"t":"Space"},{"t":"Str","c":"(dekompozice"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"ceny"},{"t":"Space"},{"t":"Str","c":"a/nebo"},{"t":"Space"},{"t":"Str","c":"hmotnosti)."},{"t":"Space"},{"t":"Str","c":"FPTAS"},{"t":"SoftBreak"},{"t":"Str","c":"algoritmus"},{"t":"Space"},{"t":"Str","c":"není"},{"t":"Space"},{"t":"Str","c":"nutné"},{"t":"Space"},{"t":"Str","c":"testovat,"},{"t":"Space"},{"t":"Str","c":"pouze"},{"t":"Space"},{"t":"Str","c":"pokud"},{"t":"Space"},{"t":"Str","c":"by"},{"t":"Space"},{"t":"Str","c":"bylo"},{"t":"Space"},{"t":"Str","c":"podezření"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"jiné"},{"t":"Space"},{"t":"Str","c":"chování,"},{"t":"SoftBreak"},{"t":"Str","c":"než"},{"t":"Space"},{"t":"Str","c":"DP"}]}],[{"t":"Plain","c":[{"t":"Str","c":"heuristika"},{"t":"Space"},{"t":"Str","c":"-"},{"t":"Space"},{"t":"Str","c":"poměr"},{"t":"Space"},{"t":"Str","c":"cena/váha"}]}]]},{"t":"Para","c":[{"t":"Str","c":"navrhněte"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"proveďte"},{"t":"Space"},{"t":"Str","c":"experimentální"},{"t":"Space"},{"t":"Str","c":"vyhodnocení"},{"t":"Space"},{"t":"Str","c":"závislosti"},{"t":"Space"},{"t":"Str","c":"kvality"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"SoftBreak"},{"t":"Str","c":"výpočetní"},{"t":"Space"},{"t":"Str","c":"náročnosti"},{"t":"Space"},{"t":"Str","c":"(Vaší"},{"t":"Space"},{"t":"Str","c":"implementace)"},{"t":"Space"},{"t":"Str","c":"algoritmů"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"následující"},{"t":"Space"},{"t":"Str","c":"parametry"},{"t":"SoftBreak"},{"t":"Str","c":"instancí:"}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"poměru"},{"t":"Space"},{"t":"Str","c":"kapacity"},{"t":"Space"},{"t":"Str","c":"batohu"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"sumární"},{"t":"Space"},{"t":"Str","c":"váze"}]}],[{"t":"Plain","c":[{"t":"Str","c":"korelaci"},{"t":"Space"},{"t":"Str","c":"cena/váha"}]}],[{"t":"Plain","c":[{"t":"Str","c":"rozložení"},{"t":"Space"},{"t":"Str","c":"vah"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"granularitě"},{"t":"Space"},{"t":"Str","c":"(pozor"},{"t":"Space"},{"t":"Str","c":"-"},{"t":"Space"},{"t":"Str","c":"zde"},{"t":"Space"},{"t":"Str","c":"si"},{"t":"Space"},{"t":"Str","c":"uvědomte"},{"t":"Space"},{"t":"Str","c":"smysl"},{"t":"Space"},{"t":"Str","c":"exponentu"},{"t":"SoftBreak"},{"t":"Str","c":"granularity)"}]}]]},{"t":"Para","c":[{"t":"Str","c":"generovaných"},{"t":"Space"},{"t":"Str","c":"generátorem"},{"t":"Space"},{"t":"Str","c":"náhodných"},{"t":"Space"},{"t":"Str","c":"instancí."},{"t":"Space"},{"t":"Str","c":"Máte-li"},{"t":"Space"},{"t":"Str","c":"podezření"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"další"},{"t":"SoftBreak"},{"t":"Str","c":"závislosti,"},{"t":"Space"},{"t":"Str","c":"modifikujte"},{"t":"Space"},{"t":"Str","c":"zdrojový"},{"t":"Space"},{"t":"Str","c":"tvar"},{"t":"Space"},{"t":"Str","c":"generátoru."},{"t":"Space"},{"t":"Str","c":"V"},{"t":"Space"},{"t":"Str","c":"případě,"},{"t":"Space"},{"t":"Str","c":"že"},{"t":"Space"},{"t":"Str","c":"některá"},{"t":"SoftBreak"},{"t":"Str","c":"závislost"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"spolehlivě"},{"t":"Space"},{"t":"Str","c":"odvoditelná"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"instance,"},{"t":"Space"},{"t":"Str","c":"můžete"},{"t":"Space"},{"t":"Str","c":"toto"},{"t":"Space"},{"t":"Str","c":"odvození"},{"t":"Space"},{"t":"Str","c":"uvést."},{"t":"Space"},{"t":"Str","c":"Je"},{"t":"SoftBreak"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"časté"},{"t":"Space"},{"t":"Str","c":"u"},{"t":"Space"},{"t":"Str","c":"hrubé"},{"t":"Space"},{"t":"Str","c":"síly."},{"t":"Space"},{"t":"Str","c":"Pozor,"},{"t":"Space"},{"t":"Str","c":"o"},{"t":"Space"},{"t":"Str","c":"překvapení"},{"t":"Space"},{"t":"Str","c":"nebývá"},{"t":"Space"},{"t":"Str","c":"nouze,"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"lépe"},{"t":"Space"},{"t":"Str","c":"závislost"},{"t":"SoftBreak"},{"t":"Str","c":"ověřit."},{"t":"Space"},{"t":"Str","c":"Ověřte"},{"t":"Space"},{"t":"Str","c":"robustnost"},{"t":"Space"},{"t":"Str","c":"algoritmů."}]},{"t":"Header","c":[3,["pokyny",[],[]],[{"t":"Str","c":"Pokyny"}]]},{"t":"Para","c":[{"t":"Str","c":"Pro"},{"t":"Space"},{"t":"Str","c":"úsporu"},{"t":"Space"},{"t":"Str","c":"času"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"námahy"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"experimentální"},{"t":"Space"},{"t":"Str","c":"vyhodnocení"},{"t":"Space"},{"t":"Str","c":"často"},{"t":"Space"},{"t":"Str","c":"dělí"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"pilotní"}]},{"t":"Space"},{"t":"Str","c":"a"},{"t":"SoftBreak"},{"t":"Emph","c":[{"t":"Str","c":"detailní"}]},{"t":"Space"},{"t":"Str","c":"experimenty."}]},{"t":"Para","c":[{"t":"Str","c":"Pilotní"},{"t":"Space"},{"t":"Str","c":"experiment"},{"t":"Space"},{"t":"Str","c":"nám"},{"t":"Space"},{"t":"Str","c":"řekne"},{"t":"Space"},{"t":"Str","c":"například"},{"t":"Space"},{"t":"Str","c":"jestli"},{"t":"Space"},{"t":"Str","c":"sledovaná"},{"t":"Space"},{"t":"Str","c":"závislost"},{"t":"Space"},{"t":"Str","c":"vůbec"},{"t":"SoftBreak"},{"t":"Str","c":"existuje,"},{"t":"Space"},{"t":"Str","c":"jaké"},{"t":"Space"},{"t":"Str","c":"jsou"},{"t":"Space"},{"t":"Str","c":"rozsahy"},{"t":"Space"},{"t":"Str","c":"veličin,"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"kterými"},{"t":"Space"},{"t":"Str","c":"pracujeme"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"podobně."},{"t":"Space"},{"t":"Str","c":"Jejich"},{"t":"SoftBreak"},{"t":"Str","c":"výsledky"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"většinou"},{"t":"Space"},{"t":"Str","c":"nepublikují,"},{"t":"Space"},{"t":"Str","c":"slouží"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"zacílení"},{"t":"Space"},{"t":"Str","c":"detailních"},{"t":"Space"},{"t":"Str","c":"experimentů."},{"t":"SoftBreak"},{"t":"Str","c":"Provádějí"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"typicky"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"malým"},{"t":"Space"},{"t":"Str","c":"počtem"},{"t":"Space"},{"t":"Str","c":"instancí."}]},{"t":"Para","c":[{"t":"Str","c":"Detailní"},{"t":"Space"},{"t":"Str","c":"experiment"},{"t":"Space"},{"t":"Str","c":"musí"},{"t":"Space"},{"t":"Str","c":"poskytovat"},{"t":"Space"},{"t":"Str","c":"spolehlivá"},{"t":"Space"},{"t":"Str","c":"(nejlépe"},{"t":"Space"},{"t":"Str","c":"statisticky"},{"t":"Space"},{"t":"Str","c":"významná)"},{"t":"SoftBreak"},{"t":"Str","c":"data,"},{"t":"Space"},{"t":"Str","c":"čemuž"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"podřízen"},{"t":"Space"},{"t":"Str","c":"výběr"},{"t":"Space"},{"t":"Str","c":"instancí."}]},{"t":"Para","c":[{"t":"Str","c":"Každý"},{"t":"Space"},{"t":"Str","c":"experiment"},{"t":"Space"},{"t":"Str","c":"má"},{"t":"Space"},{"t":"Str","c":"za"},{"t":"Space"},{"t":"Str","c":"úkol"},{"t":"Space"},{"t":"Str","c":"odpovědět"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"nějakou"},{"t":"Space"},{"t":"Str","c":"otázku."},{"t":"Space"},{"t":"Str","c":"Musí"},{"t":"Space"},{"t":"Str","c":"být"},{"t":"Space"},{"t":"Str","c":"navržen"},{"t":"Space"},{"t":"Str","c":"tak,"},{"t":"SoftBreak"},{"t":"Str","c":"aby"},{"t":"Space"},{"t":"Str","c":"dal"},{"t":"Space"},{"t":"Str","c":"žádanou"},{"t":"Space"},{"t":"Str","c":"odpověď,"},{"t":"Space"},{"t":"Str","c":"například"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"testování"},{"t":"Space"},{"t":"Str","c":"robustnosti"},{"t":"Space"},{"t":"Str","c":"použijeme"},{"t":"Space"},{"t":"Str","c":"jednu"},{"t":"Space"},{"t":"Str","c":"nebo"},{"t":"SoftBreak"},{"t":"Str","c":"několik"},{"t":"Space"},{"t":"Str","c":"instancí,"},{"t":"Space"},{"t":"Str","c":"které"},{"t":"Space"},{"t":"Str","c":"permutujeme."},{"t":"Space"},{"t":"Str","c":"Experiment"},{"t":"Space"},{"t":"Str","c":"nemá"},{"t":"Space"},{"t":"Str","c":"dávat"},{"t":"Space"},{"t":"Str","c":"falešné"},{"t":"Space"},{"t":"Str","c":"odpovědi,"},{"t":"SoftBreak"},{"t":"Str","c":"například"},{"t":"Space"},{"t":"Str","c":"by"},{"t":"Space"},{"t":"Str","c":"neměl"},{"t":"Space"},{"t":"Str","c":"odpovídat"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"otázku"},{"t":"Space"},{"t":"Str","c":"omezenou"},{"t":"Space"},{"t":"Str","c":"(např."},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"určitý"},{"t":"Space"},{"t":"Str","c":"typ"},{"t":"Space"},{"t":"Str","c":"instancí"},{"t":"SoftBreak"},{"t":"Str","c":"nebo"},{"t":"Space"},{"t":"Str","c":"dokonce"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"jednu"},{"t":"Space"},{"t":"Str","c":"velikost)."},{"t":"Space"},{"t":"Str","c":"Data"},{"t":"Space"},{"t":"Str","c":"tedy"},{"t":"Space"},{"t":"Str","c":"musí"},{"t":"Space"},{"t":"Str","c":"být"},{"t":"Space"},{"t":"Str","c":"reprezentativní,"},{"t":"Space"},{"t":"Str","c":"což"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"SoftBreak"},{"t":"Str","c":"vážný"},{"t":"Space"},{"t":"Str","c":"problém."},{"t":"Space"},{"t":"Str","c":"Dokonce,"},{"t":"Space"},{"t":"Str","c":"pokoušíme-li"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"data"},{"t":"Space"},{"t":"Str","c":"generovat"},{"t":"Space"},{"t":"Str","c":"náhodně,"},{"t":"Space"},{"t":"Str","c":"můžeme"},{"t":"Space"},{"t":"Str","c":"nevědomky"},{"t":"SoftBreak"},{"t":"Str","c":"generovat"},{"t":"Space"},{"t":"Str","c":"instance"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"určitými"},{"t":"Space"},{"t":"Str","c":"pevnými"},{"t":"Space"},{"t":"Str","c":"charakteristikami."},{"t":"Space"},{"t":"Str","c":"Proto"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"generátor"},{"t":"SoftBreak"},{"t":"Str","c":"instancí"},{"t":"Space"},{"t":"Str","c":"rozsáhle"},{"t":"Space"},{"t":"Str","c":"parametrizován."}]},{"t":"Para","c":[{"t":"Str","c":"Experimentální"},{"t":"Space"},{"t":"Str","c":"vyhodnocení"},{"t":"Space"},{"t":"Str","c":"pracuje"},{"t":"Space"},{"t":"Str","c":"vždy"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"konkrétní"},{"t":"Space"},{"t":"Str","c":"implementací."},{"t":"Space"},{"t":"Str","c":"Někdy"},{"t":"Space"},{"t":"Str","c":"bývá"},{"t":"SoftBreak"},{"t":"Str","c":"potřebné"},{"t":"Space"},{"t":"Str","c":"usoudit"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"vlastnosti"},{"t":"Space"},{"t":"Str","c":"algoritmu;"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"obtížné,"},{"t":"Space"},{"t":"Str","c":"ale"},{"t":"Space"},{"t":"Str","c":"možné."},{"t":"Space"},{"t":"Str","c":"Při"},{"t":"Space"},{"t":"Str","c":"diskusi"},{"t":"SoftBreak"},{"t":"Str","c":"výsledků"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"třeba"},{"t":"Space"},{"t":"Str","c":"oba"},{"t":"Space"},{"t":"Str","c":"typy"},{"t":"Space"},{"t":"Str","c":"výsledků"},{"t":"Space"},{"t":"Str","c":"odlišovat."}]},{"t":"Para","c":[{"t":"Str","c":"Jsou"},{"t":"Space"},{"t":"Str","c":"zde"},{"t":"Space"},{"t":"Str","c":"jistá"},{"t":"Space"},{"t":"Str","c":"podezření"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"závislosti:"}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"výpočetní"},{"t":"Space"},{"t":"Str","c":"náročnost"},{"t":"Space"},{"t":"Str","c":"dynamického"},{"t":"Space"},{"t":"Str","c":"programování"},{"t":"Space"},{"t":"Str","c":"může"},{"t":"Space"},{"t":"Str","c":"být"},{"t":"Space"},{"t":"Str","c":"citlivá"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"maximální"},{"t":"SoftBreak"},{"t":"Str","c":"váhu"},{"t":"Space"},{"t":"Str","c":"nebo"},{"t":"Space"},{"t":"Str","c":"cenu,"}]}],[{"t":"Plain","c":[{"t":"Str","c":"výkon"},{"t":"Space"},{"t":"Str","c":"metod,"},{"t":"Space"},{"t":"Str","c":"které"},{"t":"Space"},{"t":"Str","c":"vycházejí"},{"t":"Space"},{"t":"Str","c":"ze"},{"t":"Space"},{"t":"Str","c":"stavu"},{"t":"Space"},{"t":"Quoted","c":[{"t":"DoubleQuote"},[{"t":"Str","c":"prázdný"},{"t":"Space"},{"t":"Str","c":"batoh"}]]},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"může"},{"t":"Space"},{"t":"Str","c":"lišit"},{"t":"Space"},{"t":"Str","c":"od"},{"t":"Space"},{"t":"Str","c":"metod,"},{"t":"SoftBreak"},{"t":"Str","c":"vycházejících"},{"t":"Space"},{"t":"Str","c":"ze"},{"t":"Space"},{"t":"Str","c":"stavu"},{"t":"Space"},{"t":"Quoted","c":[{"t":"DoubleQuote"},[{"t":"Str","c":"plný"},{"t":"Space"},{"t":"Str","c":"batoh"}]]},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"poměru"},{"t":"Space"},{"t":"Str","c":"celková"},{"t":"Space"},{"t":"Str","c":"váha"},{"t":"Space"},{"t":"Str","c":"/"},{"t":"Space"},{"t":"Str","c":"kapacita"},{"t":"SoftBreak"},{"t":"Str","c":"batohu,"}]}],[{"t":"Plain","c":[{"t":"Str","c":"není"},{"t":"Space"},{"t":"Str","c":"jasné,"},{"t":"Space"},{"t":"Str","c":"jakou"},{"t":"Space"},{"t":"Str","c":"roli"},{"t":"Space"},{"t":"Str","c":"hraje"},{"t":"Space"},{"t":"Str","c":"granularita"},{"t":"Space"},{"t":"Str","c":"instance"},{"t":"Space"},{"t":"Str","c":"(převaha"},{"t":"Space"},{"t":"Str","c":"malých"},{"t":"Space"},{"t":"Str","c":"nebo"},{"t":"Space"},{"t":"Str","c":"převaha"},{"t":"SoftBreak"},{"t":"Str","c":"velkých"},{"t":"Space"},{"t":"Str","c":"věcí)."}]}],[{"t":"Plain","c":[{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"konkrétní"},{"t":"Space"},{"t":"Str","c":"implementace"},{"t":"Space"},{"t":"Str","c":"heuristiky"},{"t":"Space"},{"t":"Str","c":"(zejména"},{"t":"Space"},{"t":"Str","c":"metoda"},{"t":"Space"},{"t":"Str","c":"větví"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"hranic)"},{"t":"Space"},{"t":"Str","c":"robustní?"}]}]]},{"t":"Para","c":[{"t":"Str","c":"O"},{"t":"Space"},{"t":"Str","c":"níže"},{"t":"Space"},{"t":"Str","c":"diskutovaných"},{"t":"Space"},{"t":"Str","c":"závislostech"},{"t":"Space"},{"t":"Str","c":"přece"},{"t":"Space"},{"t":"Str","c":"jen"},{"t":"Space"},{"t":"Str","c":"něco"},{"t":"Space"},{"t":"Str","c":"víme."},{"t":"Space"},{"t":"Str","c":"Například,"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"použité"},{"t":"SoftBreak"},{"t":"Str","c":"dekompozice"},{"t":"Space"},{"t":"Str","c":"můžeme"},{"t":"Space"},{"t":"Str","c":"usoudit,"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"co"},{"t":"Space"},{"t":"Str","c":"není"},{"t":"Space"},{"t":"Str","c":"dynamické"},{"t":"Space"},{"t":"Str","c":"programování"},{"t":"Space"},{"t":"Str","c":"citlivé."},{"t":"Space"},{"t":"Str","c":"Takové"},{"t":"SoftBreak"},{"t":"Str","c":"vlastnosti"},{"t":"Space"},{"t":"Str","c":"ale"},{"t":"Space"},{"t":"Str","c":"raději"},{"t":"Space"},{"t":"Str","c":"ověřte"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"úrovni"},{"t":"Space"},{"t":"Str","c":"pilotního"},{"t":"Space"},{"t":"Str","c":"experimentu."},{"t":"Space"},{"t":"Str","c":"(Inženýrské"},{"t":"SoftBreak"},{"t":"Str","c":"pořekadlo:"},{"t":"Space"},{"t":"Str","c":"myslet"},{"t":"Space"},{"t":"Str","c":"znamená"},{"t":"Space"},{"t":"Str","c":"málo"},{"t":"Space"},{"t":"Str","c":"vědět.)"}]},{"t":"Para","c":[{"t":"Str","c":"Pro"},{"t":"Space"},{"t":"Str","c":"citlivostní"},{"t":"Space"},{"t":"Str","c":"vyhodnocení"},{"t":"Space"},{"t":"Str","c":"(pro"},{"t":"Space"},{"t":"Str","c":"jiné"},{"t":"Space"},{"t":"Str","c":"obecně"},{"t":"Space"},{"t":"Str","c":"nikoliv)"},{"t":"Space"},{"t":"Str","c":"pravděpodobně"},{"t":"Space"},{"t":"Str","c":"stačí"},{"t":"SoftBreak"},{"t":"Str","c":"zafixovat"},{"t":"Space"},{"t":"Str","c":"všechny"},{"t":"Space"},{"t":"Str","c":"parametry"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"konstantní"},{"t":"Space"},{"t":"Str","c":"hodnotu"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"vždy"},{"t":"Space"},{"t":"Str","c":"plynule"},{"t":"Space"},{"t":"Str","c":"měnit"},{"t":"Space"},{"t":"Str","c":"jeden"},{"t":"SoftBreak"},{"t":"Str","c":"parametr."},{"t":"Space"},{"t":"Str","c":"Neumíme"},{"t":"Space"},{"t":"Str","c":"vyloučit,"},{"t":"Space"},{"t":"Str","c":"že"},{"t":"Space"},{"t":"Str","c":"parametry"},{"t":"Space"},{"t":"Str","c":"spolu"},{"t":"Space"},{"t":"Str","c":"interagují,"},{"t":"Space"},{"t":"Str","c":"ale"},{"t":"Space"},{"t":"Str","c":"myslíme"},{"t":"Space"},{"t":"Str","c":"si,"},{"t":"Space"},{"t":"Str","c":"že"},{"t":"Space"},{"t":"Str","c":"ne"},{"t":"SoftBreak"},{"t":"Str","c":"(viz"},{"t":"Space"},{"t":"Str","c":"pořekadlo"},{"t":"Space"},{"t":"Str","c":"výše)."},{"t":"Space"},{"t":"Str","c":"Je"},{"t":"Space"},{"t":"Str","c":"nutné"},{"t":"Space"},{"t":"Str","c":"naměřit"},{"t":"Space"},{"t":"Str","c":"výsledky"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"aspoň"},{"t":"Space"},{"t":"Str","c":"čtyři"},{"t":"Space"},{"t":"Str","c":"(opravdu"},{"t":"SoftBreak"},{"t":"Str","c":"minimálně)"},{"t":"Space"},{"t":"Str","c":"vhodně"},{"t":"Space"},{"t":"Str","c":"zvolené"},{"t":"Space"},{"t":"Str","c":"hodnoty"},{"t":"Space"},{"t":"Str","c":"parametru,"},{"t":"Space"},{"t":"Str","c":"jinak"},{"t":"Space"},{"t":"Str","c":"některé"},{"t":"Space"},{"t":"Str","c":"závislosti"},{"t":"Space"},{"t":"Str","c":"nebude"},{"t":"SoftBreak"},{"t":"Str","c":"možné"},{"t":"Space"},{"t":"Str","c":"vypozorovat."}]},{"t":"Para","c":[{"t":"Str","c":"Zpráva"},{"t":"Space"},{"t":"Str","c":"by"},{"t":"Space"},{"t":"Str","c":"měla"},{"t":"Space"},{"t":"Str","c":"obsahovat"},{"t":"Space"},{"t":"Str","c":"aspoň"},{"t":"Space"},{"t":"Str","c":"stručný"},{"t":"Space"},{"t":"Str","c":"popis"},{"t":"Space"},{"t":"Str","c":"jednotlivých"},{"t":"Space"},{"t":"Str","c":"algoritmů."},{"t":"Space"},{"t":"Str","c":"Jinak"},{"t":"SoftBreak"},{"t":"Str","c":"nemusí"},{"t":"Space"},{"t":"Str","c":"být"},{"t":"Space"},{"t":"Str","c":"jasné,"},{"t":"Space"},{"t":"Str","c":"jaký"},{"t":"Space"},{"t":"Str","c":"typ"},{"t":"Space"},{"t":"Str","c":"B&B,"},{"t":"Space"},{"t":"Str","c":"DP,"},{"t":"Space"},{"t":"Str","c":"…"},{"t":"Space"},{"t":"Str","c":"byl"},{"t":"Space"},{"t":"Str","c":"použit."}]},{"t":"Header","c":[2,["řešení",[],[]],[{"t":"Str","c":"Řešení"}]]},{"t":"Para","c":[{"t":"Str","c":"Úkoly"},{"t":"Space"},{"t":"Str","c":"předmětu"},{"t":"Space"},{"t":"Str","c":"NI-KOP"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"rozhodl"},{"t":"Space"},{"t":"Str","c":"implementovat"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"jazyce"},{"t":"Space"},{"t":"Str","c":"Rust"},{"t":"Space"},{"t":"Str","c":"za"},{"t":"Space"},{"t":"Str","c":"pomoci"},{"t":"SoftBreak"},{"t":"Str","c":"nástrojů"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"literate"},{"t":"Space"},{"t":"Str","c":"programming"}]},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"přístup"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"psaní"},{"t":"Space"},{"t":"Str","c":"zdrojového"},{"t":"Space"},{"t":"Str","c":"kódu,"},{"t":"Space"},{"t":"Str","c":"který"},{"t":"SoftBreak"},{"t":"Str","c":"upřednostňuje"},{"t":"Space"},{"t":"Str","c":"lidsky"},{"t":"Space"},{"t":"Str","c":"čitelný"},{"t":"Space"},{"t":"Str","c":"popis"},{"t":"Space"},{"t":"Str","c":"před"},{"t":"Space"},{"t":"Str","c":"seznamem"},{"t":"Space"},{"t":"Str","c":"příkazů"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"počítač."},{"t":"Space"},{"t":"Str","c":"Tento"},{"t":"SoftBreak"},{"t":"Str","c":"dokument"},{"t":"Space"},{"t":"Str","c":"obsahuje"},{"t":"Space"},{"t":"Str","c":"veškerý"},{"t":"Space"},{"t":"Str","c":"zdrojový"},{"t":"Space"},{"t":"Str","c":"kód"},{"t":"Space"},{"t":"Str","c":"nutný"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"reprodukci"},{"t":"Space"},{"t":"Str","c":"mojí"},{"t":"Space"},{"t":"Str","c":"práce."},{"t":"Space"},{"t":"Str","c":"Výsledek"},{"t":"SoftBreak"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"dostupný"},{"t":"Space"},{"t":"Str","c":"online"},{"t":"Space"},{"t":"Str","c":"jako"},{"t":"Space"},{"t":"Str","c":"statická"},{"t":"Space"},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"webová"},{"t":"Space"},{"t":"Str","c":"stránka"}],["http://viluon.me/ni-kop/",""]]},{"t":"Space"},{"t":"Str","c":"a"},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"ke"},{"t":"Space"},{"t":"Str","c":"stažení"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"PDF"}],["http://viluon.me/ni-kop/report.pdf",""]]},{"t":"Str","c":"."}]},{"t":"Header","c":[2,["instrukce-k-sestavení-programu",[],[]],[{"t":"Str","c":"Instrukce"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"sestavení"},{"t":"Space"},{"t":"Str","c":"programu"}]]},{"t":"Para","c":[{"t":"Str","c":"Program"},{"t":"Space"},{"t":"Str","c":"využívá"},{"t":"Space"},{"t":"Str","c":"standardních"},{"t":"Space"},{"t":"Str","c":"nástrojů"},{"t":"Space"},{"t":"Str","c":"jazyka"},{"t":"Space"},{"t":"Str","c":"Rust."},{"t":"Space"},{"t":"Str","c":"O"},{"t":"Space"},{"t":"Str","c":"sestavení"},{"t":"Space"},{"t":"Str","c":"stačí"},{"t":"Space"},{"t":"Str","c":"požádat"},{"t":"SoftBreak"},{"t":"Code","c":[["",[],[]],"cargo"]},{"t":"Str","c":"."}]},{"t":"Div","c":[["",["doctest"],[["status","SUCCESS"]]],[{"t":"Div","c":[["",["doctestInput"],[]],[{"t":"CodeBlock","c":[["build-instructions",["zsh","eval","bootstrap-fold"],[]],"cd solver\ncargo build --release --color always"]}]]},{"t":"Div","c":[["",["doctestResult"],[]],[{"t":"Div","c":[["",["programOutput"],[]],[{"t":"RawBlock","c":["html","<pre class=\"ansi2html-content\"><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">    Updating</span> crates.io index\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\"> Downloading</span> crates ...\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> aho-corasick v0.7.18\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> quickcheck v1.0.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> proc-macro2 v1.0.29\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> tap v1.0.1\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> radium v0.6.2\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> libc v0.2.103\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> wyz v0.4.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> syn v1.0.80\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> quickcheck_macros v1.0.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> funty v1.2.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> env_logger v0.8.4\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> anyhow v1.0.44\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> permutation v0.2.5\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> bitvec v0.22.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> log v0.4.14\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> cfg-if v1.0.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> memchr v2.4.1\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> libc v0.2.103\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> proc-macro2 v1.0.29\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> unicode-xid v0.2.2\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> log v0.4.14\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> regex-syntax v0.6.25\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> syn v1.0.80\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> radium v0.6.2\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> tap v1.0.1\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> anyhow v1.0.44\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> funty v1.2.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> permutation v0.2.5\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> wyz v0.4.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> aho-corasick v0.7.18\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> getrandom v0.2.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> bitvec v0.22.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> quote v1.0.10\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> rand_core v0.6.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> regex v1.5.4\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> rand v0.8.4\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> env_logger v0.8.4\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> quickcheck_macros v1.0.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> quickcheck v1.0.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> solver v0.1.0 (/__w/ni-kop/ni-kop/3-empirical-evaluation/solver)\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">    Finished</span> release [optimized + debuginfo] target(s) in 3m 02s\r\n</pre>"]}]]}]]}]]},{"t":"Para","c":[{"t":"Str","c":"Následně"},{"t":"Space"},{"t":"Str","c":"připravíme"},{"t":"Space"},{"t":"Str","c":"ještě"},{"t":"Space"},{"t":"Str","c":"generátor"},{"t":"Space"},{"t":"Str","c":"instancí."}]},{"t":"Div","c":[["",["doctest"],[["status","SUCCESS"]]],[{"t":"Div","c":[["",["doctestInput"],[]],[{"t":"CodeBlock","c":[["build-generator",["zsh","eval","bootstrap-fold"],[]],"cd gen\nmake all"]}]]},{"t":"Div","c":[["",["doctestResult"],[]],[{"t":"Div","c":[["",["programOutput"],[]],[{"t":"RawBlock","c":["html","<pre class=\"ansi2html-content\">make[1]: Entering directory '/__w/ni-kop/ni-kop/3-empirical-evaluation/gen'\r\ngcc  -O  -Wall -Wpedantic    -c -o kg2.o kg2.c\r\ngcc  -O  -Wall -Wpedantic    -c -o kg_inst.o kg_inst.c\r\ngcc  -O  -Wall -Wpedantic    -c -o kg_rngctrl.o kg_rngctrl.c\r\ngcc  -O  -Wall -Wpedantic    -c -o xoshiro256plus.o xoshiro256plus.c\r\ngcc  -O  -Wall -Wpedantic   kg2.o kg_inst.o kg_rngctrl.o xoshiro256plus.o  -lm -o kg2\r\ngcc  -O  -Wall -Wpedantic    -c -o kg_perm.o kg_perm.c\r\ngcc  -O  -Wall -Wpedantic   kg_perm.o kg_rngctrl.o kg_inst.o xoshiro256plus.o  -lm -o kg_perm\r\nmake[1]: Leaving directory '/__w/ni-kop/ni-kop/3-empirical-evaluation/gen'\r\n</pre>"]}]]}]]}]]},{"t":"Header","c":[2,["benchmarking",[],[]],[{"t":"Str","c":"Benchmarking"}]]},{"t":"Para","c":[{"t":"Str","c":"V"},{"t":"Space"},{"t":"Str","c":"této"},{"t":"Space"},{"t":"Str","c":"úloze"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"měřením"},{"t":"Space"},{"t":"Str","c":"výkonu"},{"t":"Space"},{"t":"Str","c":"nespoléhal"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"existující"},{"t":"Space"},{"t":"Str","c":"Rust"},{"t":"Space"},{"t":"Str","c":"knihovny"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"SoftBreak"},{"t":"Str","c":"namísto"},{"t":"Space"},{"t":"Str","c":"toho"},{"t":"Space"},{"t":"Str","c":"provedl"},{"t":"Space"},{"t":"Str","c":"měření"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"Pythonu."}]},{"t":"Div","c":[["",["doctest"],[["status","SUCCESS"]]],[{"t":"Div","c":[["",["doctestInput"],[]],[{"t":"CodeBlock","c":[["machine-info",["zsh","eval","bootstrap-fold"],[]],"uname -a\n./cpufetch --logo-short --color ibm"]}]]},{"t":"Div","c":[["",["doctestResult"],[]],[{"t":"Div","c":[["",["programOutput"],[]],[{"t":"RawBlock","c":["html","<pre class=\"ansi2html-content\">Linux 1d9fff139959 5.11.0-1022-azure #23~20.04.1-Ubuntu SMP Fri Nov 19 10:20:52 UTC 2021 x86_64 GNU/Linux\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">                   .#################.          </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Name:</span>       <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Intel Xeon E5-2673 v</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">              .####                   ####.     </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Hypervisor:</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Microsoft Hyper-V</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">          .##                             ###   </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">uArch:</span>      <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Broadwell</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">       ##                          :##     ###  </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Technology:</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">14nm</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">    #                ##            :##      ##  </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Max Freq:</span>   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Unknown</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">  ##   ##  ######.   ####  ######  :##      ##  </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Cores:</span>      <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">2 cores</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\"> ##    ##  ##:  ##:  ##   ##   ### :##     ###  </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">AVX:</span>        <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">AVX,AVX2</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">##     ##  ##:  ##:  ##  :######## :##    ##    </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">FMA:</span>        <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">FMA3</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">##     ##  ##:  ##:  ##   ##.   .  :## ####     </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">L1i Size:</span>   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">32KB (64KB Total)</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">##      #  ##:  ##:  ####  #####:   ##          </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">L1d Size:</span>   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">32KB (64KB Total)</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\"> ##                                             </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">L2 Size:</span>    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">256KB (512KB Total)</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">  ###.                         ..o####.         </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">L3 Size:</span>    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">50MB</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">   ######oo...         ..oo#######              </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Peak Perf.:</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Unknown</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">          o###############o                     </span>\r\n\r\n</pre>"]}]]}]]}]]},{"t":"Header","c":[3,["srovnání-algoritmů",[],[]],[{"t":"Str","c":"Srovnání"},{"t":"Space"},{"t":"Str","c":"algoritmů"}]]},{"t":"Para","c":[{"t":"Str","c":"Následující"},{"t":"Space"},{"t":"Str","c":"seznam"},{"t":"Space"},{"t":"Str","c":"poskytuje"},{"t":"Space"},{"t":"Str","c":"přehled"},{"t":"Space"},{"t":"Str","c":"implementovaných"},{"t":"Space"},{"t":"Str","c":"algoritmů."},{"t":"Space"},{"t":"Str","c":"Jednoduchý"},{"t":"SoftBreak"},{"t":"Str","c":"hladový"},{"t":"Space"},{"t":"Str","c":"přístup"},{"t":"Space"},{"t":"Str","c":"ani"},{"t":"Space"},{"t":"Str","c":"žádná"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"variant"},{"t":"Space"},{"t":"Str","c":"FPTAS"},{"t":"Space"},{"t":"Str","c":"nebyly"},{"t":"Space"},{"t":"Str","c":"součástí"},{"t":"Space"},{"t":"Str","c":"experimentů."}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"bb"]}],["#branch--bound",""]]},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"metoda"},{"t":"Space"},{"t":"Str","c":"větví"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"hranic"}]}],[{"t":"Plain","c":[{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"dpc"]}],["#dynamické-programování",""]]},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"dynamické"},{"t":"Space"},{"t":"Str","c":"programování"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"rozkladem"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"ceny"}]}],[{"t":"Plain","c":[{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"dpw"]}],["#dynamické-programování",""]]},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"dynamické"},{"t":"Space"},{"t":"Str","c":"programování"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"rozkladem"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"váhy"}]}],[{"t":"Plain","c":[{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"fptas1"]}],["#fptas",""]]},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"FPTAS"},{"t":"Space"},{"t":"Str","c":"(postavený"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"dpc"]},{"t":"Str","c":")"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Math","c":[{"t":"InlineMath"},"\\varepsilon = 0.1"]}]}],[{"t":"Plain","c":[{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"fptas2"]}],["#fptas",""]]},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"FPTAS"},{"t":"Space"},{"t":"Str","c":"(postavený"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"dpc"]},{"t":"Str","c":")"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Math","c":[{"t":"InlineMath"},"\\varepsilon = 0.01"]}]}],[{"t":"Plain","c":[{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"greedy"]}],["#hladový-přístup",""]]},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"hladový"},{"t":"Space"},{"t":"Str","c":"algoritmus"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"heuristiky"},{"t":"Space"},{"t":"Str","c":"poměru"},{"t":"Space"},{"t":"Str","c":"cena/váha"}]}],[{"t":"Plain","c":[{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"redux"]}],["#hladový-přístup----redux",""]]},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"greedy"]},{"t":"Space"},{"t":"Str","c":"+"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"pouze"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"nejdražším"},{"t":"Space"},{"t":"Str","c":"předmětem"}]}]]},{"t":"Para","c":[{"t":"Str","c":"Zpracování"},{"t":"Space"},{"t":"Str","c":"měřených"},{"t":"Space"},{"t":"Str","c":"dat"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"srovnávací"},{"t":"Space"},{"t":"Str","c":"grafy"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"provedl"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"Pythonu."}]},{"t":"CodeBlock","c":[["python-imports",["python","bootstrap-fold"],[]],"import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport scipy.stats as st\nimport json\nimport os\nimport time\nfrom pandas.core.tools.numeric import to_numeric\nfrom subprocess import run, PIPE\nfrom itertools import product, chain\nimport textwrap as tr"]},{"t":"Div","c":[["",["doctest"],[["status","SUCCESS"]]],[{"t":"Div","c":[["",["doctestInput"],[]],[{"t":"CodeBlock","c":[["",["python","eval"],[]],"<<python-imports>>\n\n\nshow_progress = os.environ.get(\"JUPYTER\") == None\nalgs = [\"bf\", \"bb\", \"dpc\", \"dpw\", \"redux\"]\ndata = []\n\n# adapted from https://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console\ndef progress_bar(iteration, total, length = 60):\n    if not show_progress:\n        return\n    percent = (\"{0:.1f}\").format(100 * (iteration / float(total)))\n    filledLength = int(length * iteration // total)\n    bar = '=' * filledLength + ' ' * (length - filledLength)\n    print(f'\\r[{bar}] {percent}%', end = \"\\r\")\n    if iteration == total:\n        print()\n\ndef generate(**kwargs):\n    <<generate-instance>>\n\ndef solve(alg, instance):\n    <<invoke-solver>>\n\n<<dataset-utilities>>\n\n\nn_samples = 2 # FIXME\n\n<<datasets>>\n\n<<measurement-loop>>\n\n<<performance-chart>>"]}]]},{"t":"Div","c":[["",["doctestResult"],[]],[{"t":"Div","c":[["",["programOutput"],[]],[{"t":"RawBlock","c":["html","<pre class=\"ansi2html-content\">weight range \tparams bf 42 1 1 1 27 500 5000 (1, 'bal') 0.8 uni\nweight range \tparams bf 42 1 1 1 27 1000 5000 (1, 'bal') 0.8 uni\nweight range \tparams bf 42 1 1 1 27 5000 5000 (1, 'bal') 0.8 uni\nweight range \tparams bf 42 1 1 1 27 10000 5000 (1, 'bal') 0.8 uni\nweight range \tparams bf 42 1 1 1 27 50000 5000 (1, 'bal') 0.8 uni\nweight range \tparams bf 42 1 1 1 27 100000 5000 (1, 'bal') 0.8 uni\nweight range \tparams bf 42 1 1 1 27 500000 5000 (1, 'bal') 0.8 uni\nweight range \tparams bf 42 1 1 1 27 1000000 5000 (1, 'bal') 0.8 uni\nweight range \tparams dpw 42 1 1 1 27 500 5000 (1, 'bal') 0.8 uni\nweight range \tparams dpw 42 1 1 1 27 1000 5000 (1, 'bal') 0.8 uni\nweight range \tparams dpw 42 1 1 1 27 5000 5000 (1, 'bal') 0.8 uni\nweight range \tparams dpw 42 1 1 1 27 10000 5000 (1, 'bal') 0.8 uni\nweight range \tparams dpw 42 1 1 1 27 50000 5000 (1, 'bal') 0.8 uni\nweight range \tparams dpw 42 1 1 1 27 100000 5000 (1, 'bal') 0.8 uni\nweight range \tparams dpw 42 1 1 1 27 500000 5000 (1, 'bal') 0.8 uni\nweight range \tparams dpw 42 1 1 1 27 1000000 5000 (1, 'bal') 0.8 uni\ncost range \tparams bf 42 1 1 1 27 5000 500 (1, 'bal') 0.8 uni\ncost range \tparams bf 42 1 1 1 27 5000 1000 (1, 'bal') 0.8 uni\ncost range \tparams bf 42 1 1 1 27 5000 5000 (1, 'bal') 0.8 uni\ncost range \tparams bf 42 1 1 1 27 5000 10000 (1, 'bal') 0.8 uni\ncost range \tparams bf 42 1 1 1 27 5000 50000 (1, 'bal') 0.8 uni\ncost range \tparams bf 42 1 1 1 27 5000 100000 (1, 'bal') 0.8 uni\ncost range \tparams bf 42 1 1 1 27 5000 500000 (1, 'bal') 0.8 uni\ncost range \tparams dpc 42 1 1 1 27 5000 500 (1, 'bal') 0.8 uni\ncost range \tparams dpc 42 1 1 1 27 5000 1000 (1, 'bal') 0.8 uni\ncost range \tparams dpc 42 1 1 1 27 5000 5000 (1, 'bal') 0.8 uni\ncost range \tparams dpc 42 1 1 1 27 5000 10000 (1, 'bal') 0.8 uni\ncost range \tparams dpc 42 1 1 1 27 5000 50000 (1, 'bal') 0.8 uni\ncost range \tparams dpc 42 1 1 1 27 5000 100000 (1, 'bal') 0.8 uni\ncost range \tparams dpc 42 1 1 1 27 5000 500000 (1, 'bal') 0.8 uni\nn_items range \tparams bf 42 1 1 1 4 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams bf 42 1 1 1 10 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams bf 42 1 1 1 15 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams bf 42 1 1 1 20 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams bf 42 1 1 1 25 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams bf 42 1 1 1 28 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams bb 42 1 1 1 4 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams bb 42 1 1 1 10 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams bb 42 1 1 1 15 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams bb 42 1 1 1 20 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams bb 42 1 1 1 25 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams bb 42 1 1 1 28 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams dpc 42 1 1 1 4 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams dpc 42 1 1 1 10 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams dpc 42 1 1 1 15 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams dpc 42 1 1 1 20 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams dpc 42 1 1 1 25 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams dpc 42 1 1 1 28 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams dpw 42 1 1 1 4 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams dpw 42 1 1 1 10 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams dpw 42 1 1 1 15 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams dpw 42 1 1 1 20 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams dpw 42 1 1 1 25 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams dpw 42 1 1 1 28 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams redux 42 1 1 1 4 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams redux 42 1 1 1 10 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams redux 42 1 1 1 15 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams redux 42 1 1 1 20 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams redux 42 1 1 1 25 5000 5000 (1, 'bal') 0.8 uni\nn_items range \tparams redux 42 1 1 1 28 5000 5000 (1, 'bal') 0.8 uni\ngranularity exploration \tparams bb 42 2 1 1 27 5000 5000 (1, 'light') 0.8 uni\ngranularity exploration \tparams bb 42 2 1 1 27 5000 5000 (2, 'light') 0.8 uni\ngranularity exploration \tparams bb 42 2 1 1 27 5000 5000 (3, 'light') 0.8 uni\ngranularity exploration \tparams bb 42 2 1 1 27 5000 5000 (1, 'heavy') 0.8 uni\ngranularity exploration \tparams bb 42 2 1 1 27 5000 5000 (2, 'heavy') 0.8 uni\ngranularity exploration \tparams bb 42 2 1 1 27 5000 5000 (3, 'heavy') 0.8 uni\ngranularity exploration \tparams dpc 42 2 1 1 27 5000 5000 (1, 'light') 0.8 uni\ngranularity exploration \tparams dpc 42 2 1 1 27 5000 5000 (2, 'light') 0.8 uni\ngranularity exploration \tparams dpc 42 2 1 1 27 5000 5000 (3, 'light') 0.8 uni\ngranularity exploration \tparams dpc 42 2 1 1 27 5000 5000 (1, 'heavy') 0.8 uni\ngranularity exploration \tparams dpc 42 2 1 1 27 5000 5000 (2, 'heavy') 0.8 uni\ngranularity exploration \tparams dpc 42 2 1 1 27 5000 5000 (3, 'heavy') 0.8 uni\ngranularity exploration \tparams dpw 42 2 1 1 27 5000 5000 (1, 'light') 0.8 uni\ngranularity exploration \tparams dpw 42 2 1 1 27 5000 5000 (2, 'light') 0.8 uni\ngranularity exploration \tparams dpw 42 2 1 1 27 5000 5000 (3, 'light') 0.8 uni\ngranularity exploration \tparams dpw 42 2 1 1 27 5000 5000 (1, 'heavy') 0.8 uni\ngranularity exploration \tparams dpw 42 2 1 1 27 5000 5000 (2, 'heavy') 0.8 uni\ngranularity exploration \tparams dpw 42 2 1 1 27 5000 5000 (3, 'heavy') 0.8 uni\ngranularity exploration \tparams redux 42 2 1 1 27 5000 5000 (1, 'light') 0.8 uni\ngranularity exploration \tparams redux 42 2 1 1 27 5000 5000 (2, 'light') 0.8 uni\ngranularity exploration \tparams redux 42 2 1 1 27 5000 5000 (3, 'light') 0.8 uni\ngranularity exploration \tparams redux 42 2 1 1 27 5000 5000 (1, 'heavy') 0.8 uni\ngranularity exploration \tparams redux 42 2 1 1 27 5000 5000 (2, 'heavy') 0.8 uni\ngranularity exploration \tparams redux 42 2 1 1 27 5000 5000 (3, 'heavy') 0.8 uni\ncapacity weight sum ratio exploration \tparams bb 42 2 1 1 27 5000 5000 (1, 'bal') 0.1 uni\ncapacity weight sum ratio exploration \tparams bb 42 2 1 1 27 5000 5000 (1, 'bal') 0.2 uni\ncapacity weight sum ratio exploration \tparams bb 42 2 1 1 27 5000 5000 (1, 'bal') 0.3 uni\ncapacity weight sum ratio exploration \tparams bb 42 2 1 1 27 5000 5000 (1, 'bal') 0.4 uni\ncapacity weight sum ratio exploration \tparams bb 42 2 1 1 27 5000 5000 (1, 'bal') 0.5 uni\ncapacity weight sum ratio exploration \tparams bb 42 2 1 1 27 5000 5000 (1, 'bal') 0.6 uni\ncapacity weight sum ratio exploration \tparams bb 42 2 1 1 27 5000 5000 (1, 'bal') 0.7 uni\ncapacity weight sum ratio exploration \tparams bb 42 2 1 1 27 5000 5000 (1, 'bal') 0.8 uni\ncapacity weight sum ratio exploration \tparams bb 42 2 1 1 27 5000 5000 (1, 'bal') 0.9 uni\ncapacity weight sum ratio exploration \tparams dpc 42 2 1 1 27 5000 5000 (1, 'bal') 0.1 uni\ncapacity weight sum ratio exploration \tparams dpc 42 2 1 1 27 5000 5000 (1, 'bal') 0.2 uni\ncapacity weight sum ratio exploration \tparams dpc 42 2 1 1 27 5000 5000 (1, 'bal') 0.3 uni\ncapacity weight sum ratio exploration \tparams dpc 42 2 1 1 27 5000 5000 (1, 'bal') 0.4 uni\ncapacity weight sum ratio exploration \tparams dpc 42 2 1 1 27 5000 5000 (1, 'bal') 0.5 uni\ncapacity weight sum ratio exploration \tparams dpc 42 2 1 1 27 5000 5000 (1, 'bal') 0.6 uni\ncapacity weight sum ratio exploration \tparams dpc 42 2 1 1 27 5000 5000 (1, 'bal') 0.7 uni\ncapacity weight sum ratio exploration \tparams dpc 42 2 1 1 27 5000 5000 (1, 'bal') 0.8 uni\ncapacity weight sum ratio exploration \tparams dpc 42 2 1 1 27 5000 5000 (1, 'bal') 0.9 uni\ncapacity weight sum ratio exploration \tparams dpw 42 2 1 1 27 5000 5000 (1, 'bal') 0.1 uni\ncapacity weight sum ratio exploration \tparams dpw 42 2 1 1 27 5000 5000 (1, 'bal') 0.2 uni\ncapacity weight sum ratio exploration \tparams dpw 42 2 1 1 27 5000 5000 (1, 'bal') 0.3 uni\ncapacity weight sum ratio exploration \tparams dpw 42 2 1 1 27 5000 5000 (1, 'bal') 0.4 uni\ncapacity weight sum ratio exploration \tparams dpw 42 2 1 1 27 5000 5000 (1, 'bal') 0.5 uni\ncapacity weight sum ratio exploration \tparams dpw 42 2 1 1 27 5000 5000 (1, 'bal') 0.6 uni\ncapacity weight sum ratio exploration \tparams dpw 42 2 1 1 27 5000 5000 (1, 'bal') 0.7 uni\ncapacity weight sum ratio exploration \tparams dpw 42 2 1 1 27 5000 5000 (1, 'bal') 0.8 uni\ncapacity weight sum ratio exploration \tparams dpw 42 2 1 1 27 5000 5000 (1, 'bal') 0.9 uni\ncapacity weight sum ratio exploration \tparams redux 42 2 1 1 27 5000 5000 (1, 'bal') 0.1 uni\ncapacity weight sum ratio exploration \tparams redux 42 2 1 1 27 5000 5000 (1, 'bal') 0.2 uni\ncapacity weight sum ratio exploration \tparams redux 42 2 1 1 27 5000 5000 (1, 'bal') 0.3 uni\ncapacity weight sum ratio exploration \tparams redux 42 2 1 1 27 5000 5000 (1, 'bal') 0.4 uni\ncapacity weight sum ratio exploration \tparams redux 42 2 1 1 27 5000 5000 (1, 'bal') 0.5 uni\ncapacity weight sum ratio exploration \tparams redux 42 2 1 1 27 5000 5000 (1, 'bal') 0.6 uni\ncapacity weight sum ratio exploration \tparams redux 42 2 1 1 27 5000 5000 (1, 'bal') 0.7 uni\ncapacity weight sum ratio exploration \tparams redux 42 2 1 1 27 5000 5000 (1, 'bal') 0.8 uni\ncapacity weight sum ratio exploration \tparams redux 42 2 1 1 27 5000 5000 (1, 'bal') 0.9 uni\nbranch and bound robustness \tparams bf 420 1 20 10 18 5000 5000 (1, 'bal') 0.8 uni\nbranch and bound robustness \tparams bb 420 1 20 10 18 5000 5000 (1, 'bal') 0.8 uni\nbranch and bound robustness \tparams dpw 420 1 20 10 18 5000 5000 (1, 'bal') 0.8 uni\nbranch and bound robustness \tparams redux 420 1 20 10 18 5000 5000 (1, 'bal') 0.8 uni\n\nrendering plots\n\tPrůměrná doba běhu vzhledem k velikosti instance\n\tPrůměrná doba běhu vzhledem k maximální váze\n\tPrůměrná doba běhu vzhledem k maximální ceně\n\tDoba běhu vzhledem ke granularitě (preference light)\n\tDoba běhu vzhledem ke granularitě (preference heavy)\n\tDoba běhu vzhledem k poměru kapacity a součtu vah\n\tDoba běhu přes několik permutací jedné instance\n\tCena řešení přes několik permutací jedné instance\n&lt;Figure size 1008x576 with 1 Axes&gt;&lt;Figure size 1008x576 with 1 Axes&gt;&lt;Figure size 1008x576 with 1 Axes&gt;&lt;Figure size 1008x576 with 1 Axes&gt;&lt;Figure size 1008x576 with 1 Axes&gt;&lt;Figure size 1008x576 with 1 Axes&gt;&lt;Figure size 1008x576 with 1 Axes&gt;&lt;Figure size 1008x576 with 1 Axes&gt;</pre>"]}]]}]]}]]},{"t":"CodeBlock","c":[["dataset-utilities",["python","bootstrap-fold"],[]],"# enumerate the parameter values of a dataset for instance generation and\n# algorithm benchmarking.\ndef dataset(id, **kwargs):\n    params = dict({\n        # defaults\n        \"id\": [id],\n        \"alg\": algs,\n        \"seed\": [42],\n        \"n_runs\": [1],\n        \"n_permutations\": [1],\n        \"n_repetitions\": [1],\n        \"n_items\": [27],\n        \"max_weight\": [5000],\n        \"max_cost\": [5000],\n        \"granularity_and_light_heavy_balance\": [(1, \"bal\")],\n        \"capacity_weight_sum_ratio\": [0.8],\n        \"cost_weight_correlation\": [\"uni\"],\n    }, **kwargs)\n\n    key_order = [k for k in params]\n    cartesian = list(product(\n        *[params[key] for key in key_order]\n    ))\n\n    return {\n        key: [row[key_order.index(key)] for row in cartesian] for key in params\n    }\n\ndef merge_datasets(*dss):\n    return {\n        k: list(chain(*(ds[k] for ds in dss)))\n        for k in dss[0]\n    }"]},{"t":"CodeBlock","c":[["datasets",["python","bootstrap-fold"],[]],"# benchmark configurations\n# we don't want a full cartesian product (too slow to fully explore), so we'll\n# use a union of subsets, each tailored to the particular algorithm\nconfigs = merge_datasets(dataset(\n    \"weight range\",\n    alg = [\"bf\", \"dpw\"],\n    max_weight = [500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000],\n), dataset(\n    \"cost range\",\n    alg = [\"bf\", \"dpc\"],\n    max_cost = [500, 1000, 5000, 10000, 50000, 100000, 500000],\n), dataset(\n    \"n_items range\",\n    n_items = [4, 10, 15, 20, 25, 28],\n), dataset(\n    \"granularity exploration\",\n    alg = [\"bb\", \"dpc\", \"dpw\", \"redux\"],\n    n_runs = [n_samples],\n    granularity_and_light_heavy_balance = [\n        (1, \"light\"), (2, \"light\"), (3, \"light\"), (1, \"heavy\"), (2, \"heavy\"), (3, \"heavy\")\n    ],\n), dataset(\n    \"capacity weight sum ratio exploration\",\n    alg = [\"bb\", \"dpc\", \"dpw\", \"redux\"],\n    n_runs = [n_samples],\n    capacity_weight_sum_ratio = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],\n), dataset(\n    \"branch and bound robustness\",\n    seed = [420],\n    n_items = [18], # FIXME\n    alg = [\"bf\", \"bb\", \"dpw\", \"redux\"],\n    n_permutations = [20],\n    n_repetitions = [10],\n))"]},{"t":"CodeBlock","c":[["generate-instance",["python","bootstrap-fold"],[]],"res = []\nkwargs[\"granularity\"] = kwargs[\"granularity_and_light_heavy_balance\"][0]\nkwargs[\"light_heavy_balance\"] = kwargs[\"granularity_and_light_heavy_balance\"][1]\ndel kwargs[\"granularity_and_light_heavy_balance\"]\nfor seed in range(kwargs[\"seed\"], kwargs[\"seed\"] + kwargs[\"n_runs\"]):\n    params = dict({\n        \"seed\": seed,\n        \"n_instances\": 1,\n    }, **kwargs)\n    # run the instance generator\n    instance = dict({\"contents\": os.popen(\n        \"gen/kg2 \\\n        -r {seed} \\\n        -n {n_items} \\\n        -N {n_instances} \\\n        -W {max_weight} \\\n        -C {max_cost} \\\n        -k {granularity} \\\n        -w {light_heavy_balance} \\\n        -c {cost_weight_correlation} \\\n        -m {capacity_weight_sum_ratio} \\\n        \".format(**params)\n    ).read()}, **params)\n\n    for p in range(0, instance[\"n_permutations\"]):\n        kg_perm = run(\n            \"gen/kg_perm \\\n            -d 0 \\\n            -N 1 \\\n            -r {} \\\n            \".format(p).split(),\n            stdout = PIPE,\n            stderr = PIPE,\n            input = instance[\"contents\"],\n            encoding = \"ascii\",\n        )\n\n        res.append(dict({\n            \"contents\": kg_perm.stdout,\n            \"perm_id\": p,\n        }, **instance))\n\nreturn res"]},{"t":"CodeBlock","c":[["invoke-solver",["python","bootstrap-fold"],[]],"solver = run(\n    [\"target/release/main\", alg],\n    stdout = PIPE,\n    stderr = PIPE,\n    input = instance[\"contents\"],\n    encoding = \"ascii\",\n    cwd = \"solver/\"\n)\nif solver.returncode != 0:\n    print(solver)\n    raise Exception(\"solver failed\")\n\n# return only the cost of the solution\nreturn int(solver.stdout.split()[0])"]},{"t":"CodeBlock","c":[["measurement-loop",["python","bootstrap-fold"],[]],"iteration = 0\ntotal = sum([r * p * rep for (r, p, rep) in zip(configs[\"n_runs\"], configs[\"n_permutations\"], configs[\"n_repetitions\"])])\nfor config in [dict(zip(configs, v)) for v in zip(*configs.values())]:\n    param_iter = iter(config.values())\n    next(param_iter) # skip id\n    if show_progress:\n        print(end = \"\\033[2K\") # clear the current line to get rid of the progress bar\n    print(config[\"id\"], \"\\tparams\", *param_iter)\n    progress_bar(iteration, total)\n\n    for inst in generate(**config):\n        for rep in range(0, config[\"n_repetitions\"]):\n            # measure the time taken by the call to the solver\n            start = time.time()\n            cost = solve(config[\"alg\"], inst)\n            end = time.time()\n            data.append(dict(inst,\n                cost = cost,\n                alg = config[\"alg\"],\n                t = end - start,\n                repetition = rep,\n                contents = None\n            ))\n            iteration = iteration + 1\n            progress_bar(iteration, total)\n\nprint()"]},{"t":"CodeBlock","c":[["performance-chart",["python","bootstrap-fold"],[]],"# plot the measurements\n\nfigsize = (14, 8)\n\n<<chart-labels>>\n\ndef plot(x_axis, y_axis, id, title, data = data, filename = None):\n    if filename is None:\n        filename = id.replace(\" \", \"_\")\n    print(\"\\t{}\".format(title))\n    fig, ax = plt.subplots(figsize = figsize)\n    ds = [d for d in data if d[\"id\"] == id]\n    # create a frame from the list\n    df = pd.DataFrame(ds)\n\n    # do a boxplot grouped by the algorithm name\n    <<plot-boxplot>>\n\n    # render the datapoints as dots with horizontal jitter\n    <<plot-stripplot>>\n\n    plt.title(title)\n    plt.xlabel(plot_labels[x_axis])\n    plt.ylabel(plot_labels[y_axis])\n\n    <<plot-caption>>\n\n    handles, labels = ax.get_legend_handles_labels()\n    labels = [alg_labels[l] for l in labels]\n\n    plt.legend(handles[0 : int(len(handles) / 2)], labels[0 : int(len(labels) / 2)])\n    plt.savefig(\"docs/assets/{}.svg\".format(filename))\n\nprint(\"rendering plots\")\n<<plots>>"]},{"t":"CodeBlock","c":[["plot-boxplot",["python","bootstrap-fold"],[]],"sns.boxplot(\n    x = x_axis,\n    y = y_axis,\n    data = df,\n    hue = \"alg\",\n    ax = ax,\n    linewidth = 0.8,\n)"]},{"t":"CodeBlock","c":[["plot-stripplot",["python","bootstrap-fold"],[]],"sns.stripplot(\n    x = x_axis,\n    y = y_axis,\n    data = df,\n    hue = \"alg\",\n    ax = ax,\n    jitter = True,\n    size = 4,\n    dodge = True,\n    linewidth = 0.2,\n    alpha = 0.4,\n    edgecolor = \"white\",\n)"]},{"t":"CodeBlock","c":[["plot-caption",["python","bootstrap-fold"],[]],"constant_columns = [\n    col for col in df.columns[df.nunique() <= 1]\n        if (col not in [\"id\", \"n_instances\", \"contents\"])\n]\n\ncaption = \"\\n\".join(tr.wrap(\"Konfigurace: {}\".format({\n    k: df[k][0] for k in constant_columns\n}), width = 170))\n\nfig.text(\n    0.09,\n    0.05,\n    caption,\n    fontsize = \"small\",\n    fontfamily = \"monospace\",\n    verticalalignment = \"top\",\n)"]},{"t":"CodeBlock","c":[["plots",["python","bootstrap-fold"],[]],"plot(\"n_items\",     \"t\", \"n_items range\",           \"Průměrná doba běhu vzhledem k velikosti instance\")\nplot(\"max_weight\",  \"t\", \"weight range\",            \"Průměrná doba běhu vzhledem k maximální váze\")\nplot(\"max_cost\",    \"t\", \"cost range\",              \"Průměrná doba běhu vzhledem k maximální ceně\")\n\n\nfor balance in [\"light\", \"heavy\"]:\n    plot(\n        \"granularity\",\n        \"t\",\n        \"granularity exploration\",\n        \"Doba běhu vzhledem ke granularitě (preference {})\".format(balance),\n        data = [d for d in data if d[\"light_heavy_balance\"] == balance],\n        filename = \"granularity_exploration_{}\".format(balance),\n    )\n\nplot(\n    \"capacity_weight_sum_ratio\",\n    \"t\",\n    \"capacity weight sum ratio exploration\",\n    \"Doba běhu vzhledem k poměru kapacity a součtu vah\",\n)\n\nplot(\n    \"perm_id\",\n    \"t\",\n    \"branch and bound robustness\",\n    \"Doba běhu přes několik permutací jedné instance\",\n)\n\nplot(\n    \"perm_id\",\n    \"cost\",\n    \"branch and bound robustness\",\n    \"Cena řešení přes několik permutací jedné instance\",\n    filename = \"branch_and_bound_robustness_cost\"\n)"]},{"t":"CodeBlock","c":[["chart-labels",["python","bootstrap-fold"],[]],"plot_labels = dict(\n    seed = \"Seed\",\n    t = \"Doba běhu [s]\",\n    cost = \"Cena řešení\",\n    perm_id = \"ID permutace\",\n    n_items = \"Velikost instance\",\n    max_cost = \"Maximální cena\",\n    max_weight = \"Maximální váha\",\n    n_instances = \"Počet instancí v zadání\",\n    granularity = \"Granularita\",\n    light_heavy_balance = \"Rozložení váhy předmětů\",\n    capacity_weight_sum_ratio = \"Poměr kapacity a součtu vah\",\n)\n\nalg_labels = dict(\n    bf = \"Brute force\",\n    bb = \"Branch & bound\",\n    dpc = \"Dynamic programming (cost)\",\n    dpw = \"Dynamic programming (weight)\",\n    redux = \"Greedy redux\",\n)"]},{"t":"Para","c":[{"t":"Str","c":"Výkon"},{"t":"Space"},{"t":"Str","c":"každého"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"instancích"},{"t":"Space"},{"t":"Str","c":"měřen"},{"t":"Space"},{"t":"Str","c":"jednotlivě,"},{"t":"Space"},{"t":"Str","c":"tj."},{"t":"Space"},{"t":"Str","c":"generátor"},{"t":"SoftBreak"},{"t":"Str","c":"instancí"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"vždy"},{"t":"Space"},{"t":"Str","c":"instruován"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"výpisu"},{"t":"Space"},{"t":"Str","c":"jediné"},{"t":"Space"},{"t":"Str","c":"instance,"},{"t":"Space"},{"t":"Str","c":"která"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"následně"},{"t":"SoftBreak"},{"t":"Str","c":"permutována"},{"t":"Space"},{"t":"Str","c":"jak"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"potřeba"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"nakonec"},{"t":"Space"},{"t":"Str","c":"předána"},{"t":"Space"},{"t":"Str","c":"příslušnému"},{"t":"Space"},{"t":"Str","c":"řešiči."}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"branch"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"bound"},{"t":"Space"},{"t":"Str","c":"robustness"}],["assets/branch_and_bound_robustness.svg","fig:"]]}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"branch"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"bound"},{"t":"Space"},{"t":"Str","c":"robustness"},{"t":"Space"},{"t":"Str","c":"-"},{"t":"Space"},{"t":"Str","c":"cost"}],["assets/branch_and_bound_robustness_cost.svg","fig:"]]}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"capacity"},{"t":"Space"},{"t":"Str","c":"weight"},{"t":"Space"},{"t":"Str","c":"sum"},{"t":"Space"},{"t":"Str","c":"ratio"},{"t":"Space"},{"t":"Str","c":"exploration"}],["assets/capacity_weight_sum_ratio_exploration.svg","fig:"]]}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"cost"},{"t":"Space"},{"t":"Str","c":"range"}],["assets/cost_range.svg","fig:"]]}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"granularity"},{"t":"Space"},{"t":"Str","c":"exploration"},{"t":"Space"},{"t":"Str","c":"heavy"}],["assets/granularity_exploration_heavy.svg","fig:"]]}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"granularity"},{"t":"Space"},{"t":"Str","c":"exploration"},{"t":"Space"},{"t":"Str","c":"light"}],["assets/granularity_exploration_light.svg","fig:"]]}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"n_items"},{"t":"Space"},{"t":"Str","c":"range"}],["assets/n_items_range.svg","fig:"]]}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"weight"},{"t":"Space"},{"t":"Str","c":"range"}],["assets/weight_range.svg","fig:"]]}]},{"t":"Header","c":[3,["analýza",[],[]],[{"t":"Str","c":"Analýza"}]]},{"t":"Para","c":[{"t":"Str","c":"Detailní"},{"t":"Space"},{"t":"Str","c":"analýza"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"FPTAS"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"rozdělená"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"sady"},{"t":"Space"},{"t":"Str","c":"instancí"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"parametru"},{"t":"SoftBreak"},{"t":"Math","c":[{"t":"InlineMath"},"\\varepsilon"]},{"t":"Str","c":"."}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"sada"},{"t":"Space"},{"t":"Str","c":"NK"}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Math","c":[{"t":"InlineMath"},"\\varepsilon = 0.1"]},{"t":"Space"},{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"NK-fptas1"]}],["criterion/NK-fptas1/report/index.html",""]]}]}],[{"t":"Plain","c":[{"t":"Math","c":[{"t":"InlineMath"},"\\varepsilon = 0.01"]},{"t":"Space"},{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"NK-fptas2"]}],["criterion/NK-fptas2/report/index.html",""]]}]}]]}],[{"t":"Plain","c":[{"t":"Str","c":"sada"},{"t":"Space"},{"t":"Str","c":"ZKC"}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Math","c":[{"t":"InlineMath"},"\\varepsilon = 0.1"]},{"t":"Space"},{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"ZKC-fptas1"]}],["criterion/ZKC-fptas1/report/index.html",""]]}]}],[{"t":"Plain","c":[{"t":"Math","c":[{"t":"InlineMath"},"\\varepsilon = 0.01"]},{"t":"Space"},{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"ZKC-fptas2"]}],["criterion/ZKC-fptas2/report/index.html",""]]}]}]]}],[{"t":"Plain","c":[{"t":"Str","c":"sada"},{"t":"Space"},{"t":"Str","c":"ZKW"}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Math","c":[{"t":"InlineMath"},"\\varepsilon = 0.1"]},{"t":"Space"},{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"ZKW-fptas1"]}],["criterion/ZKW-fptas1/report/index.html",""]]}]}],[{"t":"Plain","c":[{"t":"Math","c":[{"t":"InlineMath"},"\\varepsilon = 0.01"]},{"t":"Space"},{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"ZKW-fptas2"]}],["criterion/ZKW-fptas2/report/index.html",""]]}]}]]}]]},{"t":"Para","c":[{"t":"Str","c":"Z"},{"t":"Space"},{"t":"Str","c":"grafů"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"vidět,"},{"t":"Space"},{"t":"Str","c":"že"},{"t":"Space"},{"t":"Str","c":"(alespoň"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"těchto"},{"t":"Space"},{"t":"Str","c":"datových"},{"t":"Space"},{"t":"Str","c":"sadách)"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"dekompozice"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"SoftBreak"},{"t":"Str","c":"váhy"},{"t":"Space"},{"t":"Str","c":"vyplatí"},{"t":"Space"},{"t":"Str","c":"mnohem"},{"t":"Space"},{"t":"Str","c":"více,"},{"t":"Space"},{"t":"Str","c":"než"},{"t":"Space"},{"t":"Str","c":"dekompozice"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"ceny."},{"t":"Space"},{"t":"Str","c":"FPTAS"},{"t":"Space"},{"t":"Str","c":"sice"},{"t":"Space"},{"t":"Str","c":"něco"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"SoftBreak"},{"t":"Str","c":"výpočetní"},{"t":"Space"},{"t":"Str","c":"náročnosti"},{"t":"Space"},{"t":"Str","c":"ušetří"},{"t":"Space"},{"t":"Str","c":"(na"},{"t":"Space"},{"t":"Str","c":"úkor"},{"t":"Space"},{"t":"Str","c":"kvality"},{"t":"Space"},{"t":"Str","c":"řešení),"},{"t":"Space"},{"t":"Str","c":"dynamické"},{"t":"Space"},{"t":"Str","c":"programování"},{"t":"SoftBreak"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"váhy"},{"t":"Space"},{"t":"Str","c":"ale"},{"t":"Space"},{"t":"Str","c":"stále"},{"t":"Space"},{"t":"Str","c":"vede."}]},{"t":"Header","c":[4,["odpovídají-obě-závislosti-kvality-a-času-předpokladům",[],[]],[{"t":"Str","c":"Odpovídají"},{"t":"Space"},{"t":"Str","c":"obě"},{"t":"Space"},{"t":"Str","c":"závislosti"},{"t":"Space"},{"t":"Str","c":"(kvality"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"času)"},{"t":"Space"},{"t":"Str","c":"předpokladům?"}]]},{"t":"Para","c":[{"t":"Str","c":"Ne."},{"t":"Space"},{"t":"Str","c":"Čekal"},{"t":"Space"},{"t":"Str","c":"jsem,"},{"t":"Space"},{"t":"Str","c":"že"},{"t":"Space"},{"t":"Str","c":"FPTAS"},{"t":"Space"},{"t":"Str","c":"bude"},{"t":"Space"},{"t":"Str","c":"často"},{"t":"Space"},{"t":"Str","c":"mnohem"},{"t":"Space"},{"t":"Str","c":"blíže"},{"t":"Space"},{"t":"Str","c":"požadované"},{"t":"Space"},{"t":"Str","c":"hranici"},{"t":"SoftBreak"},{"t":"Math","c":[{"t":"InlineMath"},"\\varepsilon"]},{"t":"Str","c":"."},{"t":"Space"},{"t":"Str","c":"Varianta"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"fptas1"]},{"t":"Space"},{"t":"Str","c":"ale"},{"t":"Space"},{"t":"Str","c":"většinou"},{"t":"Space"},{"t":"Str","c":"překoná"},{"t":"Space"},{"t":"Str","c":"i"},{"t":"Space"},{"t":"Str","c":"hranici"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"fptas2"]},{"t":"Str","c":","},{"t":"SoftBreak"},{"t":"Str","c":"přitom"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"mnohem"},{"t":"Space"},{"t":"Str","c":"rychlejší."}]},{"t":"Para","c":[{"t":"Str","c":"V"},{"t":"Space"},{"t":"Str","c":"sadě"},{"t":"Space"},{"t":"Str","c":"ZKW"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"zároveň"},{"t":"Space"},{"t":"Str","c":"poměrně"},{"t":"Space"},{"t":"Str","c":"málo"},{"t":"Space"},{"t":"Str","c":"instancí,"},{"t":"Space"},{"t":"Str","c":"ve"},{"t":"Space"},{"t":"Str","c":"kterých"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"navíc"},{"t":"Space"},{"t":"Str","c":"objevují"},{"t":"SoftBreak"},{"t":"Str","c":"nečekané"},{"t":"Space"},{"t":"Str","c":"trendy."},{"t":"Space"},{"t":"Str","c":"Ty"},{"t":"Space"},{"t":"Str","c":"vedou"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"tomu,"},{"t":"Space"},{"t":"Str","c":"že"},{"t":"Space"},{"t":"Str","c":"dynamické"},{"t":"Space"},{"t":"Str","c":"programování"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"rozkladem"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"SoftBreak"},{"t":"Str","c":"ceny"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"této"},{"t":"Space"},{"t":"Str","c":"sadě"},{"t":"Space"},{"t":"Str","c":"projevuje"},{"t":"Space"},{"t":"Str","c":"nemonotonní"},{"t":"Space"},{"t":"Str","c":"vztah"},{"t":"Space"},{"t":"Str","c":"mezi"},{"t":"Space"},{"t":"Str","c":"velikostí"},{"t":"Space"},{"t":"Str","c":"instance"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"dobou"},{"t":"SoftBreak"},{"t":"Str","c":"běhu."}]},{"t":"Header","c":[4,["je-některá-heuristická-metoda-systematicky-lepší-v-některém-kritériu",[],[]],[{"t":"Str","c":"Je"},{"t":"Space"},{"t":"Str","c":"některá"},{"t":"Space"},{"t":"Str","c":"heuristická"},{"t":"Space"},{"t":"Str","c":"metoda"},{"t":"Space"},{"t":"Str","c":"systematicky"},{"t":"Space"},{"t":"Str","c":"lepší"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"některém"},{"t":"Space"},{"t":"Str","c":"kritériu?"}]]},{"t":"Para","c":[{"t":"Str","c":"Heuristiky"},{"t":"Space"},{"t":"Str","c":"běží"},{"t":"Space"},{"t":"Str","c":"podstatně"},{"t":"Space"},{"t":"Str","c":"rychleji"},{"t":"Space"},{"t":"Str","c":"než"},{"t":"Space"},{"t":"Str","c":"ostatní"},{"t":"Space"},{"t":"Str","c":"algoritmy."},{"t":"Space"},{"t":"Str","c":"Redux"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"navíc"},{"t":"Space"},{"t":"Str","c":"i"},{"t":"SoftBreak"},{"t":"Str","c":"užitečná,"},{"t":"Space"},{"t":"Str","c":"protože"},{"t":"Space"},{"t":"Str","c":"její"},{"t":"Space"},{"t":"Str","c":"maximální"},{"t":"Space"},{"t":"Str","c":"chyba"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"shora"},{"t":"Space"},{"t":"Str","c":"omezená."},{"t":"Space"},{"t":"Str","c":"Naproti"},{"t":"Space"},{"t":"Str","c":"tomu"},{"t":"Space"},{"t":"Str","c":"hloupý"},{"t":"SoftBreak"},{"t":"Str","c":"hladový"},{"t":"Space"},{"t":"Str","c":"přístup"},{"t":"Space"},{"t":"Str","c":"často"},{"t":"Space"},{"t":"Str","c":"skončí"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"vysokou"},{"t":"Space"},{"t":"Str","c":"chybou."}]},{"t":"Header","c":[4,["jak-se-liší-obtížnost-jednotlivých-sad-z-hlediska-jednotlivých-metod",[],[]],[{"t":"Str","c":"Jak"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"liší"},{"t":"Space"},{"t":"Str","c":"obtížnost"},{"t":"Space"},{"t":"Str","c":"jednotlivých"},{"t":"Space"},{"t":"Str","c":"sad"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"hlediska"},{"t":"Space"},{"t":"Str","c":"jednotlivých"},{"t":"Space"},{"t":"Str","c":"metod?"}]]},{"t":"Para","c":[{"t":"Str","c":"Sady"},{"t":"Space"},{"t":"Str","c":"NK"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"ZKC"},{"t":"Space"},{"t":"Str","c":"jsou"},{"t":"Space"},{"t":"Str","c":"si"},{"t":"Space"},{"t":"Str","c":"zřejmě"},{"t":"Space"},{"t":"Str","c":"dost"},{"t":"Space"},{"t":"Str","c":"podobné."},{"t":"Space"},{"t":"Str","c":"Metoda"},{"t":"Space"},{"t":"Str","c":"větví"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"hranic"},{"t":"Space"},{"t":"Str","c":"má"},{"t":"Space"},{"t":"Str","c":"trochu"},{"t":"SoftBreak"},{"t":"Str","c":"problémy"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"sadě"},{"t":"Space"},{"t":"Str","c":"ZKC,"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Math","c":[{"t":"InlineMath"},"n = 25"]},{"t":"Space"},{"t":"Str","c":"už"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"trvalo"},{"t":"Space"},{"t":"Str","c":"10"},{"t":"Space"},{"t":"Str","c":"sekund"},{"t":"Space"},{"t":"Str","c":"(proto"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"jej"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"SoftBreak"},{"t":"Str","c":"měření"},{"t":"Space"},{"t":"Str","c":"vyřadil)."},{"t":"Space"},{"t":"Str","c":"Sada"},{"t":"Space"},{"t":"Str","c":"ZKW"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"zdá"},{"t":"Space"},{"t":"Str","c":"být"},{"t":"Space"},{"t":"Str","c":"podstatně"},{"t":"Space"},{"t":"Str","c":"jednodušší"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"dynamické"},{"t":"SoftBreak"},{"t":"Str","c":"programování"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"FPTAS"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"něm"},{"t":"Space"},{"t":"Str","c":"založený."}]},{"t":"Header","c":[4,["jaká-je-závislost-maximální-chyby-varepsilon-a-času-fptas-algoritmu-na-zvolené-přesnosti-odpovídá-předpokladům",[],[]],[{"t":"Str","c":"Jaká"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"závislost"},{"t":"Space"},{"t":"Str","c":"maximální"},{"t":"Space"},{"t":"Str","c":"chyby"},{"t":"Space"},{"t":"Str","c":"("},{"t":"Math","c":[{"t":"InlineMath"},"\\varepsilon"]},{"t":"Str","c":")"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"času"},{"t":"Space"},{"t":"Str","c":"FPTAS"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"zvolené"},{"t":"Space"},{"t":"Str","c":"přesnosti?"},{"t":"Space"},{"t":"Str","c":"Odpovídá"},{"t":"Space"},{"t":"Str","c":"předpokladům?"}]]},{"t":"Para","c":[{"t":"Str","c":"Nikoliv."},{"t":"Space"},{"t":"Code","c":[["",[],[]],"fptas1"]},{"t":"Space"},{"t":"Str","c":"(pro"},{"t":"Space"},{"t":"Math","c":[{"t":"InlineMath"},"\\varepsilon = 0.1"]},{"t":"Str","c":")"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"překvapivě"},{"t":"Space"},{"t":"Str","c":"časově"},{"t":"Space"},{"t":"Str","c":"efektivní"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"SoftBreak"},{"t":"Str","c":"zároveň"},{"t":"Space"},{"t":"Str","c":"dosahuje"},{"t":"Space"},{"t":"Str","c":"velmi"},{"t":"Space"},{"t":"Str","c":"pěkných"},{"t":"Space"},{"t":"Str","c":"výsledků."},{"t":"Space"},{"t":"Str","c":"Kromě"},{"t":"Space"},{"t":"Str","c":"sady"},{"t":"Space"},{"t":"Str","c":"ZKW,"},{"t":"Space"},{"t":"Str","c":"kde"},{"t":"Space"},{"t":"Str","c":"má"},{"t":"Space"},{"t":"Str","c":"trochu"},{"t":"Space"},{"t":"Str","c":"problémy,"},{"t":"SoftBreak"},{"t":"Str","c":"často"},{"t":"Space"},{"t":"Str","c":"přesáhne"},{"t":"Space"},{"t":"Str","c":"mez"},{"t":"Space"},{"t":"Str","c":"stanovenou"},{"t":"Space"},{"t":"Str","c":"jeho"},{"t":"Space"},{"t":"Str","c":"výrazně"},{"t":"Space"},{"t":"Str","c":"pomalejšímu"},{"t":"Space"},{"t":"Str","c":"bratru"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"fptas2"]},{"t":"Str","c":"."},{"t":"Space"},{"t":"Str","c":"Na"},{"t":"SoftBreak"},{"t":"Str","c":"těchto"},{"t":"Space"},{"t":"Str","c":"datech"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"zdá"},{"t":"Space"},{"t":"Str","c":"být"},{"t":"Space"},{"t":"Str","c":"dobrým"},{"t":"Space"},{"t":"Str","c":"kompromisem"},{"t":"Space"},{"t":"Str","c":"mezi"},{"t":"Space"},{"t":"Str","c":"výpočetní"},{"t":"Space"},{"t":"Str","c":"složitostí"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"SoftBreak"},{"t":"Str","c":"přesností"},{"t":"Space"},{"t":"Str","c":"výsledku,"},{"t":"Space"},{"t":"Str","c":"ačkoliv"},{"t":"Space"},{"t":"Str","c":"kvality"},{"t":"Space"},{"t":"Str","c":"dynamického"},{"t":"Space"},{"t":"Str","c":"programování"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"váhy"},{"t":"SoftBreak"},{"t":"Str","c":"samozřejmě"},{"t":"Space"},{"t":"Str","c":"nedosahuje."}]},{"t":"Header","c":[2,["implementace",[],[]],[{"t":"Str","c":"Implementace"}]]},{"t":"Para","c":[{"t":"Str","c":"Program"},{"t":"Space"},{"t":"Str","c":"začíná"},{"t":"Space"},{"t":"Str","c":"definicí"},{"t":"Space"},{"t":"Str","c":"datové"},{"t":"Space"},{"t":"Str","c":"struktury"},{"t":"Space"},{"t":"Str","c":"reprezentující"},{"t":"Space"},{"t":"Str","c":"instanci"},{"t":"Space"},{"t":"Str","c":"problému"},{"t":"SoftBreak"},{"t":"Str","c":"batohu."}]},{"t":"CodeBlock","c":[["problem-instance-definition",["rust"],[]],"#[derive(Debug, PartialEq, Eq, Clone)]\npub struct Instance {\n    pub id: i32, m: u32, pub items: Vec<(u32, u32)>\n}"]},{"t":"Para","c":[{"t":"Str","c":"Následující"},{"t":"Space"},{"t":"Str","c":"úryvek"},{"t":"Space"},{"t":"Str","c":"poskytuje"},{"t":"Space"},{"t":"Str","c":"ptačí"},{"t":"Space"},{"t":"Str","c":"pohled"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"strukturu"},{"t":"Space"},{"t":"Str","c":"souboru."},{"t":"Space"},{"t":"Str","c":"Použité"},{"t":"Space"},{"t":"Str","c":"knihovny"},{"t":"SoftBreak"},{"t":"Str","c":"jsou"},{"t":"Space"},{"t":"Str","c":"importovány"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"začátku,"},{"t":"Space"},{"t":"Str","c":"následuje"},{"t":"Space"},{"t":"Str","c":"již"},{"t":"Space"},{"t":"Str","c":"zmíněná"},{"t":"Space"},{"t":"Str","c":"definice"},{"t":"Space"},{"t":"Str","c":"instance"},{"t":"Space"},{"t":"Str","c":"problému,"},{"t":"SoftBreak"},{"t":"Str","c":"dále"},{"t":"Space"},{"t":"Str","c":"funkce"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"main()"]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"parser,"},{"t":"Space"},{"t":"Str","c":"definice"},{"t":"Space"},{"t":"Str","c":"struktury"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"její"},{"t":"Space"},{"t":"Str","c":"podpůrné"},{"t":"Space"},{"t":"Str","c":"funkce,"},{"t":"SoftBreak"},{"t":"Str","c":"samotné"},{"t":"Space"},{"t":"Str","c":"algoritmy"},{"t":"Space"},{"t":"Str","c":"řešiče"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"neposlední"},{"t":"Space"},{"t":"Str","c":"řadě"},{"t":"Space"},{"t":"Str","c":"sada"},{"t":"Space"},{"t":"Str","c":"automatických"},{"t":"Space"},{"t":"Str","c":"testů."}]},{"t":"CodeBlock","c":[["",["rust"],[["file","solver/src/lib.rs"]]],"<<imports>>\n\n<<algorithm-map>>\n\npub fn solve_stream<T>(\n    alg: for <'b> fn(&'b Instance) -> Solution<'b>,\n    solutions: HashMap<(u32, i32), OptimalSolution>,\n    stream: &mut T\n) -> Result<Vec<(u32, Option<f64>)>> where T: BufRead {\n    let mut results = vec![];\n    loop {\n        match parse_line(stream)?.as_ref().map(|inst| (inst, alg(inst))) {\n            Some((inst, sln)) => {\n                let optimal = &solutions.get(&(inst.items.len() as u32, inst.id));\n                let error = optimal.map(|opt| 1.0 - sln.cost as f64 / opt.cost as f64);\n                results.push((sln.cost, error))\n            },\n            None => return Ok(results)\n        }\n    }\n}\n\nuse std::result::Result as IOResult;\npub fn list_input_files(set: &str, r: Range<u32>) -> Result<Vec<IOResult<DirEntry, std::io::Error>>> {\n    let f = |res: &IOResult<DirEntry, std::io::Error> | res.as_ref().ok().filter(|f| {\n        let file_name = f.file_name();\n        let file_name = file_name.to_str().unwrap();\n        // keep only regular files\n        f.file_type().unwrap().is_file() &&\n        // ... whose names start with the set name,\n        file_name.starts_with(set) &&\n        // ... continue with an integer between 0 and 15,\n        file_name[set.len()..]\n        .split('_').next().unwrap().parse::<u32>().ok()\n        .filter(|n| r.contains(n)).is_some() &&\n        // ... and end with `_inst.dat` (for \"instance\").\n        file_name.ends_with(\"_inst.dat\")\n    }).is_some();\n    Ok(read_dir(\"./ds/\")?.filter(f).collect())\n}\n\n<<problem-instance-definition>>\n\n<<solution-definition>>\n\n<<parser>>\n\nimpl Instance {\n    <<solver-dpw>>\n\n    <<solver-dpc>>\n\n    <<solver-fptas>>\n\n    <<solver-greedy>>\n\n    <<solver-greedy-redux>>\n\n    <<solver-bb>>\n\n    <<solver-bf>>\n}\n\n<<tests>>"]},{"t":"Para","c":[{"t":"Str","c":"Řešení"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"podobě"},{"t":"Space"},{"t":"Str","c":"datové"},{"t":"Space"},{"t":"Str","c":"struktury"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"Solution"]},{"t":"Space"},{"t":"Str","c":"má"},{"t":"Space"},{"t":"Str","c":"kromě"},{"t":"Space"},{"t":"Str","c":"reference"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"instanci"},{"t":"SoftBreak"},{"t":"Str","c":"problému"},{"t":"Space"},{"t":"Str","c":"především"},{"t":"Space"},{"t":"Str","c":"bit"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"udávající"},{"t":"Space"},{"t":"Str","c":"množinu"},{"t":"Space"},{"t":"Str","c":"předmětů"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"pomyslném"},{"t":"Space"},{"t":"Str","c":"batohu."},{"t":"SoftBreak"},{"t":"Str","c":"Zároveň"},{"t":"Space"},{"t":"Str","c":"nese"},{"t":"Space"},{"t":"Str","c":"informaci"},{"t":"Space"},{"t":"Str","c":"o"},{"t":"Space"},{"t":"Str","c":"počtu"},{"t":"Space"},{"t":"Str","c":"navštívených"},{"t":"Space"},{"t":"Str","c":"konfigurací"},{"t":"Space"},{"t":"Str","c":"při"},{"t":"Space"},{"t":"Str","c":"jeho"},{"t":"Space"},{"t":"Str","c":"výpočtu."}]},{"t":"CodeBlock","c":[["solution-definition",["rust"],[]],"pub type Config = BitArr!(for 64);\n\n#[derive(PartialEq, Eq, Clone, Copy, Debug)]\npub struct Solution<'a> { weight: u32, pub cost: u32, cfg: Config, pub inst: &'a Instance }\n\n#[derive(Debug, PartialEq, Eq, Clone)]\npub struct OptimalSolution { id: i32, pub cost: u32, cfg: Config }\n\n<<solution-helpers>>"]},{"t":"Para","c":[{"t":"Str","c":"Protože"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"strukturami"},{"t":"Space"},{"t":"Str","c":"typu"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"Solution"]},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"algoritmech"},{"t":"Space"},{"t":"Str","c":"pracuje"},{"t":"Space"},{"t":"Str","c":"hojně,"},{"t":"SoftBreak"},{"t":"Str","c":"implementoval"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"ně"},{"t":"Space"},{"t":"Str","c":"koncept"},{"t":"Space"},{"t":"Str","c":"řazení"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"pomocné"},{"t":"Space"},{"t":"Str","c":"metody"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"počítání"},{"t":"SoftBreak"},{"t":"Str","c":"navštívených"},{"t":"Space"},{"t":"Str","c":"konfigurací"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"přidávání"},{"t":"Space"},{"t":"Str","c":"předmětů"},{"t":"Space"},{"t":"Str","c":"do"},{"t":"Space"},{"t":"Str","c":"batohu."}]},{"t":"CodeBlock","c":[["solution-helpers",["rust","bootstrap-fold"],[]],"impl <'a> PartialOrd for Solution<'a> {\n    fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {\n        use cmp::Ordering;\n        let Solution {weight, cost, ..} = self;\n        Some(match cost.cmp(&other.cost) {\n            Ordering::Equal => weight.cmp(&other.weight).reverse(),\n            other => other,\n        })\n    }\n}\n\nimpl <'a> Ord for Solution<'a> {\n    fn cmp(&self, other: &Self) -> cmp::Ordering {\n        self.partial_cmp(other).unwrap()\n    }\n}\n\nimpl <'a> Solution<'a> {\n    fn with(mut self, i: usize) -> Solution<'a> {\n        let (w, c) = self.inst.items[i];\n        if !self.cfg[i] {\n            self.cfg.set(i, true);\n            self.weight += w;\n            self.cost += c;\n        }\n        self\n    }\n\n    fn default(inst: &'a Instance) -> Solution<'a> {\n        Solution { weight: 0, cost: 0, cfg: Config::default(), inst }\n    }\n\n    fn overweight(inst: &'a Instance) -> Solution<'a> {\n        Solution { weight: u32::MAX, cost: 0, cfg: Config::default(), inst }\n    }\n}"]},{"t":"Header","c":[3,["algoritmy",[],[]],[{"t":"Str","c":"Algoritmy"}]]},{"t":"Para","c":[{"t":"Str","c":"Aby"},{"t":"Space"},{"t":"Str","c":"bylo"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"jednotlivým"},{"t":"Space"},{"t":"Str","c":"implementacím"},{"t":"Space"},{"t":"Str","c":"jednoduché"},{"t":"Space"},{"t":"Str","c":"přistupovat,"},{"t":"Space"},{"t":"Str","c":"všechny"},{"t":"SoftBreak"},{"t":"Str","c":"implementované"},{"t":"Space"},{"t":"Str","c":"algoritmy"},{"t":"Space"},{"t":"Str","c":"jsou"},{"t":"Space"},{"t":"Str","c":"uloženy"},{"t":"Space"},{"t":"Str","c":"pod"},{"t":"Space"},{"t":"Str","c":"svými"},{"t":"Space"},{"t":"Str","c":"názvy"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"BTreeMap"]},{"t":"Str","c":"ě."},{"t":"Space"},{"t":"Str","c":"Tu"},{"t":"SoftBreak"},{"t":"Str","c":"používáme"},{"t":"Space"},{"t":"Str","c":"při"},{"t":"Space"},{"t":"Str","c":"vybírání"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"pomocí"},{"t":"Space"},{"t":"Str","c":"argumentu"},{"t":"Space"},{"t":"Str","c":"předaného"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"příkazové"},{"t":"Space"},{"t":"Str","c":"řádce,"},{"t":"SoftBreak"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"testovacím"},{"t":"Space"},{"t":"Str","c":"kódu"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"testy"},{"t":"Space"},{"t":"Str","c":"všech"},{"t":"Space"},{"t":"Str","c":"implementací"},{"t":"Space"},{"t":"Str","c":"atp."}]},{"t":"CodeBlock","c":[["algorithm-map",["rust"],[]],"pub fn get_algorithms() -> BTreeMap<&'static str, fn(&Instance) -> Solution> {\n    let cast = |x: fn(&Instance) -> Solution| x;\n    // the BTreeMap works as a trie, maintaining alphabetic order\n    BTreeMap::from([\n        (\"bf\",     cast(Instance::brute_force)),\n        (\"bb\",     cast(Instance::branch_and_bound)),\n        (\"dpc\",    cast(Instance::dynamic_programming_c)),\n        (\"dpw\",    cast(Instance::dynamic_programming_w)),\n        (\"fptas1\", cast(|inst| inst.fptas(10f64.powi(-1)))),\n        (\"fptas2\", cast(|inst| inst.fptas(10f64.powi(-2)))),\n        (\"greedy\", cast(Instance::greedy)),\n        (\"redux\",  cast(Instance::greedy_redux)),\n    ])\n}"]},{"t":"Header","c":[4,["hladový-přístup",[],[]],[{"t":"Str","c":"Hladový"},{"t":"Space"},{"t":"Str","c":"přístup"}]]},{"t":"Para","c":[{"t":"Str","c":"Implementace"},{"t":"Space"},{"t":"Str","c":"hladové"},{"t":"Space"},{"t":"Str","c":"strategie"},{"t":"Space"},{"t":"Str","c":"využívá"},{"t":"Space"},{"t":"Str","c":"knihovny"},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"permutation"]}],["https://crates.io/crates/permutation",""]]},{"t":"Str","c":"."},{"t":"Space"},{"t":"Str","c":"Problém"},{"t":"Space"},{"t":"Str","c":"ve"},{"t":"Space"},{"t":"Str","c":"skutečnosti"},{"t":"SoftBreak"},{"t":"Str","c":"řešíme"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"isomorfní"},{"t":"Space"},{"t":"Str","c":"instanci,"},{"t":"Space"},{"t":"Str","c":"která"},{"t":"Space"},{"t":"Str","c":"má"},{"t":"Space"},{"t":"Str","c":"předměty"},{"t":"Space"},{"t":"Str","c":"uspořádané."},{"t":"Space"},{"t":"Str","c":"Jediné,"},{"t":"Space"},{"t":"Str","c":"co"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"změní,"},{"t":"SoftBreak"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"pořadí,"},{"t":"Space"},{"t":"Str","c":"ve"},{"t":"Space"},{"t":"Str","c":"kterém"},{"t":"Space"},{"t":"Str","c":"předměty"},{"t":"Space"},{"t":"Str","c":"navštěvujeme."},{"t":"Space"},{"t":"Str","c":"Proto"},{"t":"Space"},{"t":"Str","c":"stačí"},{"t":"Space"},{"t":"Str","c":"aplikovat"},{"t":"Space"},{"t":"Str","c":"řadicí"},{"t":"SoftBreak"},{"t":"Str","c":"permutaci"},{"t":"Space"},{"t":"Str","c":"předmětů"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"posloupnost"},{"t":"Space"},{"t":"Str","c":"indexů,"},{"t":"Space"},{"t":"Str","c":"které"},{"t":"Space"},{"t":"Str","c":"procházíme."},{"t":"Space"},{"t":"Str","c":"Přesně"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"dělá"},{"t":"Space"},{"t":"Str","c":"výraz"},{"t":"SoftBreak"},{"t":"Code","c":[["",[],[]],"(0..items.len()).map(ord)"]},{"t":"Str","c":"."}]},{"t":"CodeBlock","c":[["solver-greedy",["rust"],[]],"fn greedy(&self) -> Solution {\n    use ::permutation::*;\n    let Instance {m, items, ..} = self;\n    fn ratio((w, c): (u32, u32)) -> f64 {\n        let r = c as f64 / w as f64;\n        if r.is_nan() { f64::NEG_INFINITY } else { r }\n    }\n    let permutation = sort_by(\n        &(items)[..],\n        |a, b|\n            ratio(*a)\n            .partial_cmp(&ratio(*b))\n            .unwrap()\n            .reverse() // max item first\n    );\n    let ord = { #[inline] |i| permutation.apply_idx(i) };\n\n    let mut sol = Solution::default(self);\n    for i in (0..items.len()).map(ord) {\n        let (w, _c) = items[i];\n        if sol.weight + w <= *m {\n            sol = sol.with(i);\n        } else { break }\n    }\n\n    sol\n}"]},{"t":"Header","c":[4,["hladový-přístup-redux",[],[]],[{"t":"Str","c":"Hladový"},{"t":"Space"},{"t":"Str","c":"přístup"},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"redux"}]]},{"t":"Para","c":[{"t":"Str","c":"Redux"},{"t":"Space"},{"t":"Str","c":"verze"},{"t":"Space"},{"t":"Str","c":"hladové"},{"t":"Space"},{"t":"Str","c":"strategie"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"více"},{"t":"Space"},{"t":"Str","c":"méně"},{"t":"Space"},{"t":"Str","c":"deklarativní."},{"t":"Space"},{"t":"Str","c":"Výsledek"},{"t":"Space"},{"t":"Str","c":"redux"},{"t":"SoftBreak"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"maximum"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"hladového"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"sestávajícího"},{"t":"Space"},{"t":"Str","c":"pouze"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"SoftBreak"},{"t":"Str","c":"nejdražšího"},{"t":"Space"},{"t":"Str","c":"předmětu."},{"t":"Space"},{"t":"Str","c":"K"},{"t":"Space"},{"t":"Str","c":"indexu"},{"t":"Space"},{"t":"Str","c":"nejdražšího"},{"t":"Space"},{"t":"Str","c":"předmětu"},{"t":"Space"},{"t":"Str","c":"dojdeme"},{"t":"Space"},{"t":"Str","c":"tak,"},{"t":"Space"},{"t":"Str","c":"že"},{"t":"Space"},{"t":"Str","c":"sepneme"},{"t":"SoftBreak"},{"t":"Str","c":"posloupnosti"},{"t":"Space"},{"t":"Str","c":"indexů"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"předmětů,"},{"t":"Space"},{"t":"Str","c":"vyřadíme"},{"t":"Space"},{"t":"Str","c":"prvky,"},{"t":"Space"},{"t":"Str","c":"jejichž"},{"t":"Space"},{"t":"Str","c":"váha"},{"t":"Space"},{"t":"Str","c":"přesahuje"},{"t":"Space"},{"t":"Str","c":"kapacitu"},{"t":"SoftBreak"},{"t":"Str","c":"batohu"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"vybereme"},{"t":"Space"},{"t":"Str","c":"maximální"},{"t":"Space"},{"t":"Str","c":"prvek"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"ceny."}]},{"t":"CodeBlock","c":[["solver-greedy-redux",["rust"],[]],"fn greedy_redux(&self) -> Solution {\n    let greedy = self.greedy();\n    (0_usize..)\n        .zip(self.items.iter())\n        .filter(|(_, (w, _))| *w <= self.m)\n        .max_by_key(|(_, (_, c))| c)\n        .map(|(highest_price_index, _)|\n            max(greedy, Solution::default(self).with(highest_price_index))\n        ).unwrap_or(greedy)\n}"]},{"t":"Header","c":[4,["hrubá-síla",[],[]],[{"t":"Str","c":"Hrubá"},{"t":"Space"},{"t":"Str","c":"síla"}]]},{"t":"CodeBlock","c":[["solver-bf",["rust","bootstrap-fold"],[]],"fn brute_force(&self) -> Solution {\n    fn go<'a>(items: &'a [(u32, u32)], current: Solution<'a>, i: usize, m: u32) -> Solution<'a> {\n        if i >= items.len() { return current }\n\n        let (w, _c) = items[i];\n        let next = |current, m| go(items, current, i + 1, m);\n        let include = || {\n            let current = current.with(i);\n            next(current, m - w)\n        };\n        let exclude = || next(current, m);\n\n        if w <= m {\n            max(include(), exclude())\n        }\n        else { exclude() }\n    }\n\n    go(&self.items, Solution::default(self), 0, self.m)\n}"]},{"t":"Header","c":[4,["branch-bound",[],[]],[{"t":"Str","c":"Branch"},{"t":"Space"},{"t":"Str","c":"&"},{"t":"Space"},{"t":"Str","c":"bound"}]]},{"t":"CodeBlock","c":[["solver-bb",["rust"],[]],"fn branch_and_bound(&self) -> Solution {\n    struct State<'a>(&'a Vec<(u32, u32)>, Vec<u32>);\n    let prices: Vec<u32> = {\n        self.items.iter().rev()\n        .scan(0, |sum, (_w, c)| {\n            *sum += c;\n            Some(*sum)\n        })\n        .collect::<Vec<_>>().into_iter().rev().collect()\n    };\n\n    fn go<'a>(state: &'a State, current: Solution<'a>, best: Solution<'a>, i: usize, m: u32) -> Solution<'a> {\n        let State(items, prices) = state;\n        if i >= items.len() || current.cost + prices[i] <= best.cost {\n            return current\n        }\n\n        let (w, _c) = items[i];\n        let next = |current, best, m| go(state, current, best, i + 1, m);\n        let include = || {\n            let current = current.with(i);\n            next(current, max(current, best), m - w)\n        };\n        let exclude = |best: Solution<'a>| next(current, best, m);\n\n        if w <= m {\n            let x = include();\n            max(x, exclude(x))\n        }\n        else { exclude(best) }\n    }\n\n    // FIXME borrowck issues\n    let state = State(&self.items, prices);\n    let empty = Solution::default(self);\n    Solution { inst: self, ..go(&state, empty, empty, 0, self.m) }\n}"]},{"t":"Header","c":[4,["dynamické-programování",[],[]],[{"t":"Str","c":"Dynamické"},{"t":"Space"},{"t":"Str","c":"programování"}]]},{"t":"Para","c":[{"t":"Str","c":"Dynamické"},{"t":"Space"},{"t":"Str","c":"programování"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"rozkladem"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"váhy"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"implementoval"},{"t":"Space"},{"t":"Str","c":"už"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"prvním"},{"t":"SoftBreak"},{"t":"Str","c":"úkolu."}]},{"t":"CodeBlock","c":[["solver-dpw",["rust"],[]],"fn dynamic_programming_w(&self) -> Solution {\n    let Instance {m, items, ..} = self;\n    let mut next = vec![Solution::default(self); *m as usize + 1];\n    let mut last = vec![];\n\n    for (i, &(weight, _cost)) in items.iter().enumerate() {\n        last.clone_from(&next);\n\n        for cap in 0 ..= *m as usize {\n            let s = if (cap as u32) < weight {\n                    last[cap]\n                } else {\n                    let rem_weight = max(0, cap as isize - weight as isize) as usize;\n                    max(last[cap], last[rem_weight].with(i))\n                };\n            next[cap] = s;\n        }\n    }\n\n    *next.last().unwrap()\n}"]},{"t":"Para","c":[{"t":"Str","c":"V"},{"t":"Space"},{"t":"Str","c":"úkolu"},{"t":"Space"},{"t":"Str","c":"2"},{"t":"Space"},{"t":"Str","c":"přibyla"},{"t":"Space"},{"t":"Str","c":"implementace"},{"t":"Space"},{"t":"Str","c":"dynamického"},{"t":"Space"},{"t":"Str","c":"programování"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"rozkladem"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"ceny,"},{"t":"SoftBreak"},{"t":"Str","c":"které"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"adaptací"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"výše."},{"t":"Space"},{"t":"Str","c":"Narozdíl"},{"t":"Space"},{"t":"Str","c":"od"},{"t":"Space"},{"t":"Str","c":"předchozího"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"tady"},{"t":"SoftBreak"},{"t":"Str","c":"výchozí"},{"t":"Space"},{"t":"Str","c":"hodnotou"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"tabulce"},{"t":"Space"},{"t":"Str","c":"efektivně"},{"t":"Space"},{"t":"Str","c":"nekonečná"},{"t":"Space"},{"t":"Str","c":"váha,"},{"t":"Space"},{"t":"Str","c":"kterou"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"snažíme"},{"t":"SoftBreak"},{"t":"Str","c":"minimalizovat."},{"t":"Space"},{"t":"Str","c":"K"},{"t":"Space"},{"t":"Str","c":"reprezentaci"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"nekonečnou"},{"t":"Space"},{"t":"Str","c":"vahou"},{"t":"Space"},{"t":"Str","c":"používám"},{"t":"Space"},{"t":"Str","c":"přidruženou"},{"t":"SoftBreak"},{"t":"Str","c":"funkci"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"Solution::overweight"]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"která"},{"t":"Space"},{"t":"Str","c":"vrátí"},{"t":"Space"},{"t":"Str","c":"neplatné"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"váhou"},{"t":"Space"},{"t":"Math","c":[{"t":"InlineMath"},"2^{32} - 1"]},{"t":"Str","c":"."},{"t":"SoftBreak"},{"t":"Str","c":"Pokud"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"něj"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"průběhu"},{"t":"Space"},{"t":"Str","c":"výpočtu"},{"t":"Space"},{"t":"Str","c":"algoritmus"},{"t":"Space"},{"t":"Str","c":"narazí,"},{"t":"Space"},{"t":"Str","c":"předá"},{"t":"Space"},{"t":"Str","c":"jej"},{"t":"Space"},{"t":"Str","c":"dál"},{"t":"Space"},{"t":"Str","c":"jako"},{"t":"SoftBreak"},{"t":"Code","c":[["",[],[]],"Solution::default"]},{"t":"Space"},{"t":"Str","c":"(vždy"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"nejlevějším"},{"t":"Space"},{"t":"Str","c":"sloupci"},{"t":"Space"},{"t":"Str","c":"DP"},{"t":"Space"},{"t":"Str","c":"tabulky,"},{"t":"Space"},{"t":"Str","c":"tedy"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"last[0]"]},{"t":"Str","c":"),"},{"t":"Space"},{"t":"Str","c":"aby"},{"t":"SoftBreak"},{"t":"Str","c":"při"},{"t":"Space"},{"t":"Str","c":"přičtení"},{"t":"Space"},{"t":"Str","c":"váhy"},{"t":"Space"},{"t":"Str","c":"uvažovaného"},{"t":"Space"},{"t":"Str","c":"předmětu"},{"t":"Space"},{"t":"Str","c":"nedošlo"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"přetečení."}]},{"t":"Para","c":[{"t":"Str","c":"O"},{"t":"Space"},{"t":"Str","c":"výběr"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"minimální"},{"t":"Space"},{"t":"Str","c":"váhy"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"stará"},{"t":"Space"},{"t":"Str","c":"funkce"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"max"]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"neboť"},{"t":"Space"},{"t":"Str","c":"implementace"},{"t":"SoftBreak"},{"t":"Str","c":"uspořádání"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"typ"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"Solution"]},{"t":"Space"},{"t":"Str","c":"řadí"},{"t":"Space"},{"t":"Str","c":"nejprve"},{"t":"Space"},{"t":"Str","c":"vzestupně"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"ceny"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"následně"},{"t":"SoftBreak"},{"t":"Str","c":"sestupně"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"váhy."},{"t":"Space"},{"t":"Str","c":"V"},{"t":"Space"},{"t":"Str","c":"tomto"},{"t":"Space"},{"t":"Str","c":"případě"},{"t":"Space"},{"t":"Str","c":"porovnáváme"},{"t":"Space"},{"t":"Str","c":"vždy"},{"t":"Space"},{"t":"Str","c":"dvě"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"stejných"},{"t":"Space"},{"t":"Str","c":"cen"},{"t":"SoftBreak"},{"t":"Str","c":"(a"},{"t":"Space"},{"t":"Str","c":"nebo"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"last[cap]"]},{"t":"Space"},{"t":"Str","c":"neplatné"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"nadváhou,"},{"t":"Space"},{"t":"Str","c":"které"},{"t":"Space"},{"t":"Str","c":"má"},{"t":"Space"},{"t":"Str","c":"cenu"},{"t":"Space"},{"t":"Math","c":[{"t":"InlineMath"},"0"]},{"t":"Str","c":")."}]},{"t":"CodeBlock","c":[["solver-dpc",["rust"],[]],"fn dynamic_programming_c(&self) -> Solution {\n    let Instance {items, ..} = self;\n    let max_profit = items.iter().map(|(_, c)| *c).max().unwrap() as usize;\n    let mut next = vec![Solution::overweight(self); max_profit * items.len() + 1];\n    let mut last = vec![];\n    next[0] = Solution::default(self);\n\n    for (i, &(_weight, cost)) in items.iter().enumerate() {\n        last.clone_from(&next);\n\n        for cap in 1 ..= max_profit * items.len() {\n            let s = if (cap as u32) < cost {\n                    last[cap]\n                } else {\n                    let rem_cost = (cap as isize - cost as isize) as usize;\n                    let lightest_for_cost = if last[rem_cost].weight == u32::MAX {\n                        last[0] // replace the overweight solution with the empty one\n                    } else { last[rem_cost] };\n\n                    max(last[cap], lightest_for_cost.with(i))\n                };\n            next[cap] = s;\n        }\n    }\n\n    *next.iter().filter(|sln| sln.weight <= self.m).last().unwrap()\n}"]},{"t":"Header","c":[4,["fptas",[],[]],[{"t":"Str","c":"FPTAS"}]]},{"t":"Para","c":[{"t":"Str","c":"FPTAS"},{"t":"Space"},{"t":"Str","c":"algoritmus"},{"t":"Space"},{"t":"Str","c":"přeškáluje"},{"t":"Space"},{"t":"Str","c":"ceny"},{"t":"Space"},{"t":"Str","c":"předmětů"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"následně"},{"t":"Space"},{"t":"Str","c":"spustí"},{"t":"Space"},{"t":"Str","c":"dynamické"},{"t":"SoftBreak"},{"t":"Str","c":"programování"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"rozkladem"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"ceny"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"upravenou"},{"t":"Space"},{"t":"Str","c":"instanci"},{"t":"Space"},{"t":"Str","c":"problému."},{"t":"Space"},{"t":"Str","c":"V"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"SoftBreak"},{"t":"Str","c":"stačí"},{"t":"Space"},{"t":"Str","c":"opravit"},{"t":"Space"},{"t":"Str","c":"referenci"},{"t":"Space"},{"t":"Str","c":"výchozí"},{"t":"Space"},{"t":"Str","c":"instance"},{"t":"Space"},{"t":"Str","c":"("},{"t":"Code","c":[["",[],[]],"inst: self"]},{"t":"Str","c":")"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"přepočíst"},{"t":"Space"},{"t":"Str","c":"cenu"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"SoftBreak"},{"t":"Str","c":"vypočítané"},{"t":"Space"},{"t":"Str","c":"konfigurace,"},{"t":"Space"},{"t":"Str","c":"samotné"},{"t":"Space"},{"t":"Str","c":"indexy"},{"t":"Space"},{"t":"Str","c":"předmětů"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"škálováním"},{"t":"Space"},{"t":"Str","c":"nemění."}]},{"t":"CodeBlock","c":[["solver-fptas",["rust"],[]],"// TODO: are items heavier than the knapsack capacity a problem? if so, we\n// can just zero them out\nfn fptas(&self, eps: f64) -> Solution {\n    let Instance {m: _, items, ..} = self;\n    let max_profit = items.iter().map(|(_, c)| *c).max().unwrap();\n    let scaling_factor = eps * max_profit as f64 / items.len() as f64;\n    let items: Vec<(u32, u32)> = items.iter().map(|(w, c)|\n        (*w, (*c as f64 / scaling_factor).floor() as u32\n    )).collect();\n\n    let iso = Instance { items, ..*self };\n    let sln = iso.dynamic_programming_c();\n    let cost = (0usize..).zip(self.items.iter()).fold(0, |acc, (i, (_w, c))|\n        acc + sln.cfg[i] as u32 * c\n    );\n    Solution { inst: self, cost, ..sln }\n}"]},{"t":"Header","c":[2,["závěr",[],[]],[{"t":"Str","c":"Závěr"}]]},{"t":"Para","c":[{"t":"Str","c":"TODO"}]},{"t":"Header","c":[2,["appendix",[],[]],[{"t":"Str","c":"Appendix"}]]},{"t":"Para","c":[{"t":"Str","c":"Dodatek"},{"t":"Space"},{"t":"Str","c":"obsahuje"},{"t":"Space"},{"t":"Str","c":"nezajímavé"},{"t":"Space"},{"t":"Str","c":"části"},{"t":"Space"},{"t":"Str","c":"implementace,"},{"t":"Space"},{"t":"Str","c":"jako"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"import"},{"t":"Space"},{"t":"Str","c":"symbolů"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"SoftBreak"},{"t":"Str","c":"knihoven."}]},{"t":"CodeBlock","c":[["imports",["rust","bootstrap-fold"],[]],"use std::{cmp, cmp::max,\n    ops::Range,\n    str::FromStr,\n    io::{BufRead, BufReader},\n    collections::{BTreeMap, HashMap},\n    fs::{read_dir, File, DirEntry},\n};\nuse anyhow::{Context, Result, anyhow};\nuse bitvec::prelude::BitArr;\n\n#[cfg(test)]\n#[macro_use(quickcheck)]\nextern crate quickcheck_macros;"]},{"t":"Para","c":[{"t":"Str","c":"Zpracování"},{"t":"Space"},{"t":"Str","c":"vstupu"},{"t":"Space"},{"t":"Str","c":"zajišťuje"},{"t":"Space"},{"t":"Str","c":"jednoduchý"},{"t":"Space"},{"t":"Str","c":"parser"},{"t":"Space"},{"t":"Str","c":"pracující"},{"t":"Space"},{"t":"Str","c":"řádek"},{"t":"Space"},{"t":"Str","c":"po"},{"t":"Space"},{"t":"Str","c":"řádku."},{"t":"Space"},{"t":"Str","c":"Pro"},{"t":"SoftBreak"},{"t":"Str","c":"testy"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"tu"},{"t":"Space"},{"t":"Str","c":"parser"},{"t":"Space"},{"t":"Str","c":"formátu"},{"t":"Space"},{"t":"Str","c":"souborů"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"optimálními"},{"t":"Space"},{"t":"Str","c":"řešeními."}]},{"t":"CodeBlock","c":[["parser",["rust","bootstrap-fold"],[]],"<<boilerplate>>\n\npub fn parse_line<T>(stream: &mut T) -> Result<Option<Instance>> where T: BufRead {\n    let mut input = String::new();\n    if stream.read_line(&mut input)? == 0 {\n        return Ok(None)\n    }\n\n    let mut  numbers = input.split_whitespace();\n    let id = numbers.parse_next()?;\n    let  n = numbers.parse_next()?;\n    let  m = numbers.parse_next()?;\n\n    let mut items: Vec<(u32, u32)> = Vec::with_capacity(n);\n    for _ in 0..n {\n        let w = numbers.parse_next()?;\n        let c = numbers.parse_next()?;\n        items.push((w, c));\n    }\n\n    Ok(Some(Instance {id, m, items}))\n}\n\nfn parse_solution_line<T>(mut stream: T) -> Result<Option<OptimalSolution>> where T: BufRead {\n    let mut input = String::new();\n    if stream.read_line(&mut input)? == 0 {\n        return Ok(None)\n    }\n\n    let mut    numbers = input.split_whitespace();\n    let   id = numbers.parse_next()?;\n    let    n = numbers.parse_next()?;\n    let cost = numbers.parse_next()?;\n\n    let mut items = Config::default();\n    for i in 0..n {\n        let a: u8 = numbers.parse_next()?;\n        items.set(i, a == 1);\n    }\n\n    Ok(Some(OptimalSolution {id, cost, cfg: items}))\n}\n\npub fn load_solutions(set: &str) -> Result<HashMap<(u32, i32), OptimalSolution>> {\n    let mut solutions = HashMap::new();\n\n    let files = read_dir(\"../data/constructive/\")?\n        .filter(|res| res.as_ref().ok().filter(|f| {\n            let name = f.file_name().into_string().unwrap();\n            f.file_type().unwrap().is_file() &&\n            name.starts_with(set) &&\n            name.ends_with(\"_sol.dat\")\n        }).is_some());\n\n    for file in files {\n        let file = file?;\n        let n = file.file_name().into_string().unwrap()[set.len()..].split('_').next().unwrap().parse()?;\n        let mut stream = BufReader::new(File::open(file.path())?);\n        while let Some(opt) = parse_solution_line(&mut stream)? {\n            solutions.insert((n, opt.id), opt);\n        }\n    }\n\n    Ok(solutions)\n}"]},{"t":"Para","c":[{"t":"Str","c":"Trait"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"Boilerplate"]},{"t":"Space"},{"t":"Str","c":"definuje"},{"t":"Space"},{"t":"Str","c":"funkci"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"parse_next"]},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"zkrácení"},{"t":"Space"},{"t":"Str","c":"zápisu"},{"t":"Space"},{"t":"Str","c":"zpracování"},{"t":"SoftBreak"},{"t":"Str","c":"vstupu."}]},{"t":"CodeBlock","c":[["boilerplate",["rust","bootstrap-fold"],[]],"trait Boilerplate {\n    fn parse_next<T: FromStr>(&mut self) -> Result<T>\n      where <T as FromStr>::Err: std::error::Error + Send + Sync + 'static;\n}\n\nimpl Boilerplate for std::str::SplitWhitespace<'_> {\n    fn parse_next<T: FromStr>(&mut self) -> Result<T>\n      where <T as FromStr>::Err: std::error::Error + Send + Sync + 'static {\n        let str = self.next().ok_or_else(|| anyhow!(\"unexpected end of input\"))?;\n        str.parse::<T>()\n           .with_context(|| format!(\"cannot parse {}\", str))\n    }\n}"]},{"t":"Header","c":[3,["měření-výkonu",[],[]],[{"t":"Str","c":"Měření"},{"t":"Space"},{"t":"Str","c":"výkonu"}]]},{"t":"Para","c":[{"t":"Str","c":"Benchmark"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"minulého"},{"t":"Space"},{"t":"Str","c":"úkolu"},{"t":"Space"},{"t":"Str","c":"postavený"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"knihovně"},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"Criterion.rs"]}],["https://crates.io/crates/criterion",""]]},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"nachází"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"souboru"},{"t":"Space"},{"t":"Str","c":"níže."},{"t":"SoftBreak"},{"t":"Str","c":"Pro"},{"t":"Space"},{"t":"Str","c":"měření"},{"t":"Space"},{"t":"Str","c":"těchto"},{"t":"Space"},{"t":"Str","c":"experimentů"},{"t":"Space"},{"t":"Str","c":"ale"},{"t":"Space"},{"t":"Str","c":"nebyl"},{"t":"Space"},{"t":"Str","c":"použit."}]},{"t":"CodeBlock","c":[["",["rust","bootstrap-fold"],[["file","solver/benches/bench.rs"]]],"extern crate solver;\n\nuse solver::*;\nuse anyhow::{Result, anyhow};\nuse std::{collections::HashMap, fs::File, io::{BufReader, Write}, ops::Range, time::Duration};\nuse criterion::{criterion_group, criterion_main, Criterion, BenchmarkId};\n\nfn full(c: &mut Criterion) -> Result<()> {\n    let algs = get_algorithms();\n    let mut solutions = HashMap::new();\n    let ranges = HashMap::from([\n        (\"bb\",     0..=25),\n        (\"dpw\",    0..=32),\n        (\"dpc\",    0..=20),\n        (\"fptas1\", 0..=32),\n        (\"fptas2\", 0..=22),\n        (\"greedy\", 0..=32),\n        (\"redux\",  0..=32),\n    ]);\n\n    let mut input: HashMap<(&str, u32), Vec<Instance>> = HashMap::new();\n    let ns = [4, 10, 15, 20, 22, 25, 27, 30, 32];\n    let sets = [\"NK\", \"ZKC\", \"ZKW\"];\n    for set in sets {\n        solutions.insert(set, load_solutions(set)?);\n        for n in ns {\n            input.insert((set, n), load_input(set, n .. n + 1)?\n                .into_iter()\n                .rev()\n                .take(100)\n                .collect()\n            );\n        }\n    }\n\n    benchmark(algs, c, &ns, &sets, ranges, solutions, input)?;\n    Ok(())\n}\n\nfn benchmark(\n    algs: std::collections::BTreeMap<&str, fn(&Instance) -> Solution>,\n    c: &mut Criterion,\n    ns: &[u32],\n    sets: &[&'static str],\n    ranges: HashMap<&str, std::ops::RangeInclusive<u32>>,\n    solutions: HashMap<&str, HashMap<(u32, i32), OptimalSolution>>,\n    input: HashMap<(&str, u32), Vec<Instance>>\n) -> Result<(), anyhow::Error> {\n    Ok(for set in sets {\n        for (name, alg) in algs.iter() {\n            let mut group = c.benchmark_group(format!(\"{}-{}\", set, name));\n            group.sample_size(10).warm_up_time(Duration::from_millis(200));\n\n            for n in ns {\n                if !ranges.get(*name).filter(|r| r.contains(&n)).is_some()\n                || (*name == \"bb\" && *n > 22 && *set == \"ZKW\") {\n                    continue;\n                }\n\n                let (max, avg, nonzero_n) =\n                    measure(&mut group, *alg, &solutions[set], *n, &input[&(*set, *n)]);\n                eprintln!(\"max: {}, avg: {}, n: {} vs real n: {}\", max, avg, nonzero_n, n);\n                let avg = avg / nonzero_n as f64;\n\n                let mut file = File::create(format!(\"../docs/measurements/{}_{}_{}.txt\", set, name, n))?;\n                file.write_all(format!(\"max,avg\\n{},{}\", max, avg).as_bytes())?;\n            }\n            group.finish();\n        }\n    })\n}\n\nfn measure(\n    group: &mut criterion::BenchmarkGroup<criterion::measurement::WallTime>,\n    alg: for<'a> fn(&'a Instance) -> Solution<'a>,\n    solutions: &HashMap<(u32, i32), OptimalSolution>,\n    n: u32,\n    instances: &Vec<Instance>\n) -> (f64, f64, u32) {\n    let mut stats = (0.0, 0.0, 0);\n    group.bench_with_input(\n        BenchmarkId::from_parameter(n),\n        instances,\n        |b, ins| b.iter(\n            || ins.iter().for_each(|inst| {\n                let sln = alg(inst);\n                let optimal = &solutions[&(n, inst.id)];\n                if optimal.cost != 0 {\n                    let error = 1.0 - sln.cost as f64 / optimal.cost as f64;\n                    let (max, avg, n) = stats;\n                    stats = (if error > max { error } else { max }, avg + error, n + 1);\n                }\n            })\n        )\n    );\n\n    stats\n}\n\nfn load_input(set: &str, r: Range<u32>) -> Result<Vec<Instance>> {\n    let mut instances = Vec::new();\n\n    for file in list_input_files(set, r)? {\n        let file = file?;\n        let mut r = BufReader::new(File::open(file.path())?);\n        while let Some(inst) = parse_line(&mut r)? {\n            instances.push(inst);\n        }\n    }\n\n    Ok(instances)\n}\n\nfn proxy(c: &mut Criterion) {\n    full(c).unwrap()\n}\n\ncriterion_group!(benches, proxy);\ncriterion_main!(benches);"]},{"t":"Header","c":[3,["spouštění-jednotlivých-řešičů",[],[]],[{"t":"Str","c":"Spouštění"},{"t":"Space"},{"t":"Str","c":"jednotlivých"},{"t":"Space"},{"t":"Str","c":"řešičů"}]]},{"t":"Para","c":[{"t":"Str","c":"Projekt"},{"t":"Space"},{"t":"Str","c":"podporuje"},{"t":"Space"},{"t":"Str","c":"sestavení"},{"t":"Space"},{"t":"Str","c":"spustitelného"},{"t":"Space"},{"t":"Str","c":"souboru"},{"t":"Space"},{"t":"Str","c":"schopného"},{"t":"Space"},{"t":"Str","c":"zpracovat"},{"t":"Space"},{"t":"Str","c":"libovolný"},{"t":"SoftBreak"},{"t":"Str","c":"vstup"},{"t":"Space"},{"t":"Str","c":"ze"},{"t":"Space"},{"t":"Str","c":"zadání"},{"t":"Space"},{"t":"Str","c":"za"},{"t":"Space"},{"t":"Str","c":"pomoci"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"zvoleného"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"příkazové"},{"t":"Space"},{"t":"Str","c":"řádce."},{"t":"Space"},{"t":"Str","c":"Zdrojový"},{"t":"Space"},{"t":"Str","c":"kód"},{"t":"SoftBreak"},{"t":"Str","c":"tohoto"},{"t":"Space"},{"t":"Str","c":"rozhraní"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"nachází"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"souboru"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"solver/src/bin/main.rs"]},{"t":"Str","c":"."},{"t":"Space"},{"t":"Str","c":"Na"},{"t":"Space"},{"t":"Str","c":"standardní"},{"t":"SoftBreak"},{"t":"Str","c":"výstup"},{"t":"Space"},{"t":"Str","c":"vypisuje"},{"t":"Space"},{"t":"Str","c":"cenu"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"chybu"},{"t":"Space"},{"t":"Str","c":"řešení,"},{"t":"Space"},{"t":"Str","c":"spoléhá"},{"t":"Space"},{"t":"Str","c":"ovšem"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"to,"},{"t":"Space"},{"t":"Str","c":"že"},{"t":"Space"},{"t":"Str","c":"mezi"},{"t":"Space"},{"t":"Str","c":"optimálními"},{"t":"SoftBreak"},{"t":"Str","c":"řešeními"},{"t":"Space"},{"t":"Str","c":"najde"},{"t":"Space"},{"t":"Str","c":"i"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"kombinaci"},{"t":"Space"},{"t":"Str","c":"velikosti"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"ID"},{"t":"Space"},{"t":"Str","c":"zadané"},{"t":"Space"},{"t":"Str","c":"instance."}]},{"t":"CodeBlock","c":[["",["rust"],[["file","solver/src/bin/main.rs"]]],"extern crate solver;\n\nuse std::io::stdin;\nuse solver::*;\nuse anyhow::{Result, anyhow};\n\nfn main() -> Result<()> {\n    let algorithms = get_algorithms();\n    let solutions = load_solutions(\"NK\")?;\n\n    let alg = *{\n        <<select-algorithm>>\n    }?;\n\n    for (cost, error) in solve_stream(alg, solutions, &mut stdin().lock())? {\n        println!(\"{} {}\", cost, error.map(|e| e.to_string()).unwrap_or_default());\n    }\n    Ok(())\n}"]},{"t":"Para","c":[{"t":"Str","c":"Funkci"},{"t":"Space"},{"t":"Str","c":"příslušnou"},{"t":"Space"},{"t":"Str","c":"vybranému"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"vrátíme"},{"t":"Space"},{"t":"Str","c":"jako"},{"t":"Space"},{"t":"Str","c":"hodnotu"},{"t":"Space"},{"t":"Str","c":"tohoto"},{"t":"Space"},{"t":"Str","c":"bloku:"}]},{"t":"CodeBlock","c":[["select-algorithm",["rust","bootstrap-fold"],[]],"let args: Vec<String> = std::env::args().collect();\nif args.len() == 2 {\n    let alg = &args[1][..];\n    if let Some(f) = algorithms.get(alg) {\n        Ok(f)\n    } else {\n        Err(anyhow!(\"\\\"{}\\\" is not a known algorithm\", alg))\n    }\n} else {\n    println!(\n        \"Usage: {} <algorithm>\\n\\twhere <algorithm> is one of {}\",\n        args[0],\n        algorithms.keys().map(ToString::to_string).collect::<Vec<_>>().join(\", \")\n    );\n    Err(anyhow!(\"Expected 1 argument, got {}\", args.len() - 1))\n}"]},{"t":"Header","c":[3,["automatické-testy",[],[]],[{"t":"Str","c":"Automatické"},{"t":"Space"},{"t":"Str","c":"testy"}]]},{"t":"Para","c":[{"t":"Str","c":"Implementaci"},{"t":"Space"},{"t":"Str","c":"doplňují"},{"t":"Space"},{"t":"Str","c":"automatické"},{"t":"Space"},{"t":"Str","c":"testy"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"ověření"},{"t":"Space"},{"t":"Str","c":"správnosti,"},{"t":"Space"},{"t":"Str","c":"včetně"},{"t":"SoftBreak"},{"t":"Str","c":"property-based"},{"t":"Space"},{"t":"Str","c":"testu"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"knihovnou"},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"quickcheck"}],["https://github.com/BurntSushi/quickcheck",""]]},{"t":"Str","c":"."}]},{"t":"CodeBlock","c":[["tests",["rust","bootstrap-fold"],[]],"#[cfg(test)]\nmod tests {\n    use super::*;\n    use quickcheck::{Arbitrary, Gen};\n    use std::{fs::File, io::BufReader};\n\n    impl Arbitrary for Instance {\n        fn arbitrary(g: &mut Gen) -> Instance {\n            Instance {\n                id:    i32::arbitrary(g),\n                m:     u32::arbitrary(g).min(10_000),\n                items: vec![<(u32, u32)>::arbitrary(g)]\n                           .into_iter()\n                           .chain(Vec::arbitrary(g).into_iter())\n                           .take(10)\n                           .map(|(w, c): (u32, u32)| (w.min(10_000), c % 10_000))\n                           .collect(),\n            }\n        }\n\n        fn shrink(&self) -> Box<dyn Iterator<Item = Self>> {\n            let data = self.clone();\n            let chain: Vec<Instance> = quickcheck::empty_shrinker()\n                .chain(self.id   .shrink().map(|id   | Instance {id,    ..(&data).clone()}))\n                .chain(self.m    .shrink().map(|m    | Instance {m,     ..(&data).clone()}))\n                .chain(self.items.shrink().map(|items| Instance { items, ..(&data).clone() })\n                        .filter(|i| !i.items.is_empty()))\n                .collect();\n            Box::new(chain.into_iter())\n        }\n    }\n\n    impl <'a> Solution<'a> {\n        fn assert_valid(&self) {\n            let Solution { weight, cost, cfg, inst } = self;\n            let Instance { m, items, .. } = inst;\n\n            let (computed_weight, computed_cost) = items\n                .into_iter()\n                .zip(cfg)\n                .map(|((w, c), b)| {\n                    if *b { (*w, *c) } else { (0, 0) }\n                })\n                .reduce(|(a0, b0), (a1, b1)| (a0 + a1, b0 + b1))\n                .unwrap_or_default();\n\n            assert!(computed_weight <= *m);\n            assert_eq!(computed_cost, *cost);\n            assert_eq!(computed_weight, *weight);\n        }\n    }\n\n    #[test]\n    fn stupid() {\n        // let i = Instance { id: 0, m: 1, b: 0, items: vec![(1, 0), (1, 0)] };\n        // i.branch_and_bound2().assert_valid(&i);\n        let i = Instance { id: 0, m: 1, items: vec![(1, 1), (1, 2), (0, 1)] };\n        let bb = i.branch_and_bound();\n        assert_eq!(bb.cost, i.dynamic_programming_w().cost);\n        assert_eq!(bb.cost, i.dynamic_programming_c().cost);\n        assert_eq!(bb.cost, i.greedy_redux().cost);\n        assert_eq!(bb.cost, i.brute_force().cost);\n        assert_eq!(bb.cost, i.greedy().cost);\n    }\n\n    #[ignore]\n    #[test]\n    fn proper() -> Result<()> {\n        type Solver = (&'static str, for<'a> fn(&'a Instance) -> Solution<'a>);\n        let algs = get_algorithms();\n        let algs: Vec<Solver> = algs.iter().map(|(s, f)| (*s, *f)).collect();\n        let opts = load_solutions(\"NK\")?;\n        println!(\"loaded {} optimal solutions\", opts.len());\n\n        let solve: for<'a> fn(&Vec<_>, &'a _) -> Vec<(&'static str, Solution<'a>)> =\n            |algs, inst|\n            algs.iter().map(|(name, alg): &Solver| (*name, alg(inst))).collect();\n\n        let mut files = list_input_files(\"NK\", 0..5)?.into_iter();\n        // make sure `files` is not empty\n        let first = files.next().ok_or(anyhow!(\"no instance files loaded\"))?;\n        for file in vec![first].into_iter().chain(files) {\n            let file = file?;\n            println!(\"Testing {}\", file.file_name().to_str().unwrap());\n            // open the file\n            let mut r = BufReader::new(File::open(file.path())?);\n            // solve each instance with all algorithms\n            while let Some(slns) = parse_line(&mut r)?.as_ref().map(|x| solve(&algs, x)) {\n                // verify correctness\n                slns.iter().for_each(|(alg, s)| {\n                    eprint!(\"\\rid: {} alg: {}\\t\", s.inst.id, alg);\n                    s.assert_valid();\n                    let key = (s.inst.items.len() as u32, s.inst.id);\n                    assert!(s.cost <= opts[&key].cost);\n                });\n            }\n        }\n        Ok(())\n    }\n\n    #[test]\n    fn dpc_simple() {\n        let i = Instance { id: 0, m: 0, items: vec![(0, 1), (0, 1)] };\n        let s = i.dynamic_programming_c();\n        assert_eq!(s.cost, 2);\n        assert_eq!(s.weight, 0);\n        s.assert_valid();\n    }\n\n    #[test]\n    fn fptas_is_within_bounds() -> Result<()> {\n        let opts = load_solutions(\"NK\")?;\n        for eps in [0.1, 0.01] {\n            for file in list_input_files(\"NK\", 0..5)? {\n                let file = file?;\n                let mut r = BufReader::new(File::open(file.path())?);\n                while let Some(sln) = parse_line(&mut r)?.as_ref().map(|x| x.fptas(eps)) {\n                    // make sure the solution from fptas is at least (1 - eps) * optimal cost\n                    let key = (sln.inst.items.len() as u32, sln.inst.id);\n                    println!(\"{} {} {}\", sln.cost, opts[&key].cost, (1.0 - eps) * opts[&key].cost as f64);\n                    assert!(sln.cost as f64 >= opts[&key].cost as f64 * (1.0 - eps));\n                }\n            }\n        }\n        Ok(())\n    }\n\n    #[test]\n    fn small_bb_is_correct() {\n        let a = Instance {\n            id: -10,\n            m: 165,\n            items: vec![ (86,  744)\n                       , (214, 1373)\n                       , (236, 1571)\n                       , (239, 2388)\n                       ],\n        };\n        a.branch_and_bound().assert_valid();\n    }\n\n    #[test]\n    fn bb_is_correct() -> Result<()> {\n        use std::fs::File;\n        use std::io::BufReader;\n        let inst = parse_line(\n            &mut BufReader::new(File::open(\"ds/NK15_inst.dat\")?)\n        )?.unwrap();\n        println!(\"testing {:?}\", inst);\n        inst.branch_and_bound().assert_valid();\n        Ok(())\n    }\n\n    #[quickcheck]\n    fn qc_bb_is_really_correct(inst: Instance) {\n        assert_eq!(inst.branch_and_bound().cost, inst.brute_force().cost);\n    }\n\n    #[quickcheck]\n    fn qc_dp_matches_bb(inst: Instance) {\n        assert!(inst.branch_and_bound().cost <= inst.dynamic_programming_w().cost);\n    }\n\n    #[quickcheck]\n    fn qc_dps_match(inst: Instance) {\n        assert_eq!(inst.dynamic_programming_w().cost, inst.dynamic_programming_c().cost);\n    }\n\n    #[quickcheck]\n    fn qc_greedy_is_valid(inst: Instance) {\n        inst.greedy().assert_valid();\n        inst.greedy_redux().assert_valid();\n    }\n}\n"]}]}