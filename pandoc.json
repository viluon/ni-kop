{"pandoc-api-version":[1,22],"meta":{"author":{"t":"MetaInlines","c":[{"t":"Str","c":"Ondřej"},{"t":"Space"},{"t":"Str","c":"Kvapil"}]},"title":{"t":"MetaInlines","c":[{"t":"Str","c":"NI-KOP"},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"úkol"},{"t":"Space"},{"t":"Str","c":"1"}]}},"blocks":[{"t":"Header","c":[1,["kombinatorická-optimalizace-problém-batohu",[],[]],[{"t":"Str","c":"Kombinatorická"},{"t":"Space"},{"t":"Str","c":"optimalizace:"},{"t":"Space"},{"t":"Str","c":"problém"},{"t":"Space"},{"t":"Str","c":"batohu"}]]},{"t":"Header","c":[2,["zadání",[],[]],[{"t":"Str","c":"Zadání"}]]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"Experimentálně"},{"t":"Space"},{"t":"Str","c":"vyhodnoťte"},{"t":"Space"},{"t":"Str","c":"závislost"},{"t":"Space"},{"t":"Str","c":"výpočetní"},{"t":"Space"},{"t":"Str","c":"složitosti"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"velikosti"},{"t":"Space"},{"t":"Str","c":"instance"},{"t":"SoftBreak"},{"t":"Str","c":"u"},{"t":"Space"},{"t":"Str","c":"následujících"},{"t":"Space"},{"t":"Str","c":"algoritmů"},{"t":"Space"},{"t":"Str","c":"rozhodovací"},{"t":"Space"},{"t":"Str","c":"verze"},{"t":"Space"},{"t":"Str","c":"0/1"},{"t":"Space"},{"t":"Str","c":"problému"},{"t":"Space"},{"t":"Str","c":"batohu:"}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"hrubá"},{"t":"Space"},{"t":"Str","c":"síla"}]}],[{"t":"Plain","c":[{"t":"Str","c":"metoda"},{"t":"Space"},{"t":"Str","c":"větví"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"hranic"},{"t":"Space"},{"t":"Str","c":"(B&B)"}]}]]}],[{"t":"Plain","c":[{"t":"Str","c":"Otázky,"},{"t":"Space"},{"t":"Str","c":"které"},{"t":"Space"},{"t":"Str","c":"má"},{"t":"Space"},{"t":"Str","c":"experiment"},{"t":"Space"},{"t":"Str","c":"zodpovědět:"}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"Vyhovují"},{"t":"Space"},{"t":"Str","c":"nejhorší"},{"t":"Space"},{"t":"Str","c":"případy"},{"t":"Space"},{"t":"Str","c":"očekávané"},{"t":"Space"},{"t":"Str","c":"závislosti?"}]}],[{"t":"Plain","c":[{"t":"Str","c":"Závisí"},{"t":"Space"},{"t":"Str","c":"střední"},{"t":"Space"},{"t":"Str","c":"hodnota"},{"t":"Space"},{"t":"Str","c":"výpočetní"},{"t":"Space"},{"t":"Str","c":"závislosti"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"sadě"},{"t":"Space"},{"t":"Str","c":"instancí?"},{"t":"Space"},{"t":"Str","c":"Jestliže"},{"t":"Space"},{"t":"Str","c":"ano,"},{"t":"SoftBreak"},{"t":"Str","c":"proč?"}]}]]}]]},{"t":"Header","c":[3,["pokyny",[],[]],[{"t":"Str","c":"Pokyny"}]]},{"t":"Para","c":[{"t":"Str","c":"Oba"},{"t":"Space"},{"t":"Str","c":"algoritmy"},{"t":"Space"},{"t":"Str","c":"naprogramujte."},{"t":"Space"},{"t":"Str","c":"Výpočetní"},{"t":"Space"},{"t":"Str","c":"složitost"},{"t":"Space"},{"t":"Str","c":"(čas)"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"nejspolehlivější"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"SoftBreak"},{"t":"Str","c":"nejjednodušší"},{"t":"Space"},{"t":"Str","c":"měřit"},{"t":"Space"},{"t":"Str","c":"počtem"},{"t":"Space"},{"t":"Str","c":"navštívených"},{"t":"Space"},{"t":"Str","c":"konfigurací,"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"jest"},{"t":"Space"},{"t":"Str","c":"vyhodnocených"},{"t":"SoftBreak"},{"t":"Str","c":"sestav"},{"t":"Space"},{"t":"Str","c":"věcí"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"batohu."},{"t":"Space"},{"t":"Str","c":"Na"},{"t":"Space"},{"t":"Str","c":"obou"},{"t":"Space"},{"t":"Str","c":"sadách"},{"t":"Space"},{"t":"Str","c":"pozorujte"},{"t":"Space"},{"t":"Str","c":"závislost"},{"t":"Space"},{"t":"Str","c":"výpočetního"},{"t":"Space"},{"t":"Str","c":"času"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"SoftBreak"},{"t":"Math","c":[{"t":"InlineMath"},"n"]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Math","c":[{"t":"InlineMath"},"n"]},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"rozsahu,"},{"t":"Space"},{"t":"Str","c":"jaký"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"Vaše"},{"t":"Space"},{"t":"Str","c":"výpočetní"},{"t":"Space"},{"t":"Str","c":"platforma"},{"t":"Space"},{"t":"Str","c":"schopna"},{"t":"Space"},{"t":"Str","c":"zvládnout,"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"SoftBreak"},{"t":"Str","c":"jak"},{"t":"Space"},{"t":"Str","c":"maximální,"},{"t":"Space"},{"t":"Str","c":"tak"},{"t":"Space"},{"t":"Str","c":"průměrný"},{"t":"Space"},{"t":"Str","c":"čas."},{"t":"Space"},{"t":"Str","c":"Pro"},{"t":"Space"},{"t":"Str","c":"alespoň"},{"t":"Space"},{"t":"Str","c":"jednu"},{"t":"Space"},{"t":"Str","c":"hodnotu"},{"t":"Space"},{"t":"Math","c":[{"t":"InlineMath"},"n"]},{"t":"Space"},{"t":"Str","c":"(volte"},{"t":"Space"},{"t":"Str","c":"instance"},{"t":"SoftBreak"},{"t":"Str","c":"velikosti"},{"t":"Space"},{"t":"Str","c":"alespoň"},{"t":"Space"},{"t":"Str","c":"10)"},{"t":"Space"},{"t":"Str","c":"zjistěte"},{"t":"Space"},{"t":"Str","c":"četnosti"},{"t":"Space"},{"t":"Str","c":"jednotlivých"},{"t":"Space"},{"t":"Str","c":"hodnot"},{"t":"Space"},{"t":"Str","c":"(histogram)"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"SoftBreak"},{"t":"Str","c":"pokuste"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"jej"},{"t":"Space"},{"t":"Str","c":"vysvětlit."},{"t":"Space"},{"t":"Str","c":"Ohledně"},{"t":"Space"},{"t":"Str","c":"metody"},{"t":"Space"},{"t":"Str","c":"větví"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"hranic"},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"uvědomte"},{"t":"Space"},{"t":"Str","c":"si,"},{"t":"Space"},{"t":"Str","c":"že"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"SoftBreak"},{"t":"Str","c":"jedná"},{"t":"Space"},{"t":"Str","c":"o"},{"t":"Space"},{"t":"Str","c":"rozhodovací"},{"t":"Space"},{"t":"Str","c":"problém"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"toho"},{"t":"Space"},{"t":"Str","c":"ořezávejte."},{"t":"Space"},{"t":"Str","c":"Nápověda:"},{"t":"Space"},{"t":"Str","c":"i"},{"t":"Space"},{"t":"Str","c":"když"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"SoftBreak"},{"t":"Str","c":"rozhodovací"},{"t":"Space"},{"t":"Str","c":"problém,"},{"t":"Space"},{"t":"Str","c":"lze"},{"t":"Space"},{"t":"Str","c":"použít"},{"t":"Space"},{"t":"Str","c":"ořezávání"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"ceny."},{"t":"Space"},{"t":"Str","c":"Jak?"},{"t":"Space"},{"t":"Str","c":"Implementované"},{"t":"SoftBreak"},{"t":"Str","c":"způsoby"},{"t":"Space"},{"t":"Str","c":"ořezávání"},{"t":"Space"},{"t":"Str","c":"popište"},{"t":"Space"},{"t":"Str","c":"ve"},{"t":"Space"},{"t":"Str","c":"zprávě."}]},{"t":"Para","c":[{"t":"Str","c":"Sady"},{"t":"Space"},{"t":"Str","c":"NR"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"ZR"},{"t":"Space"},{"t":"Str","c":"vyhodnocujte"},{"t":"Space"},{"t":"Str","c":"zvlášť"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"proveďte"},{"t":"Space"},{"t":"Str","c":"jejich"},{"t":"Space"},{"t":"Str","c":"srovnání"},{"t":"Space"},{"t":"Str","c":"(stačí"},{"t":"Space"},{"t":"Str","c":"diskuze)."}]},{"t":"Header","c":[3,["bonusový-bod",[],[]],[{"t":"Str","c":"Bonusový"},{"t":"Space"},{"t":"Str","c":"bod"}]]},{"t":"Para","c":[{"t":"Str","c":"Na"},{"t":"Space"},{"t":"Str","c":"bonusový"},{"t":"Space"},{"t":"Str","c":"bod"},{"t":"Space"},{"t":"Str","c":"musí"},{"t":"Space"},{"t":"Str","c":"práce"},{"t":"Space"},{"t":"Str","c":"obsahovat"},{"t":"Space"},{"t":"Str","c":"přínos"},{"t":"Space"},{"t":"Str","c":"navíc."},{"t":"Space"},{"t":"Str","c":"Takové"},{"t":"Space"},{"t":"Str","c":"přínosy"},{"t":"Space"},{"t":"Str","c":"jsou"},{"t":"SoftBreak"},{"t":"Str","c":"například:"}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"Zjištění,"},{"t":"Space"},{"t":"Str","c":"jak"},{"t":"Space"},{"t":"Str","c":"čas"},{"t":"Space"},{"t":"Str","c":"CPU"},{"t":"Space"},{"t":"Str","c":"souvisí"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"počtem"},{"t":"Space"},{"t":"Str","c":"vyhodnocených"},{"t":"Space"},{"t":"Str","c":"konfigurací"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"Vaší"},{"t":"SoftBreak"},{"t":"Str","c":"platformě"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"jak"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"tato"},{"t":"Space"},{"t":"Str","c":"závislost"},{"t":"Space"},{"t":"Str","c":"stabilní"},{"t":"Space"},{"t":"Str","c":"při"},{"t":"Space"},{"t":"Str","c":"opakovaném"},{"t":"Space"},{"t":"Str","c":"měření"},{"t":"Space"},{"t":"Str","c":"téže"},{"t":"SoftBreak"},{"t":"Str","c":"instance."}]}],[{"t":"Plain","c":[{"t":"Str","c":"Nový"},{"t":"Space"},{"t":"Str","c":"(a"},{"t":"Space"},{"t":"Str","c":"experimentálně"},{"t":"Space"},{"t":"Str","c":"porovnaný)"},{"t":"Space"},{"t":"Str","c":"způsob"},{"t":"Space"},{"t":"Str","c":"prořezávání"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"metodě"},{"t":"Space"},{"t":"Str","c":"větví"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"hranic."}]}],[{"t":"Plain","c":[{"t":"Str","c":"atd."}]}]]},{"t":"Header","c":[2,["řešení",[],[]],[{"t":"Str","c":"Řešení"}]]},{"t":"Para","c":[{"t":"Str","c":"První"},{"t":"Space"},{"t":"Str","c":"úkol"},{"t":"Space"},{"t":"Str","c":"předmětu"},{"t":"Space"},{"t":"Str","c":"NI-KOP"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"rozhodl"},{"t":"Space"},{"t":"Str","c":"implementovat"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"jazyce"},{"t":"Space"},{"t":"Str","c":"Rust"},{"t":"Space"},{"t":"Str","c":"za"},{"t":"Space"},{"t":"Str","c":"pomoci"},{"t":"SoftBreak"},{"t":"Str","c":"nástrojů"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"literate"},{"t":"Space"},{"t":"Str","c":"programming"}]},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"přístup"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"psaní"},{"t":"Space"},{"t":"Str","c":"zdrojového"},{"t":"Space"},{"t":"Str","c":"kódu,"},{"t":"Space"},{"t":"Str","c":"který"},{"t":"SoftBreak"},{"t":"Str","c":"upřednostňuje"},{"t":"Space"},{"t":"Str","c":"lidsky"},{"t":"Space"},{"t":"Str","c":"čitelný"},{"t":"Space"},{"t":"Str","c":"popis"},{"t":"Space"},{"t":"Str","c":"před"},{"t":"Space"},{"t":"Str","c":"seznamem"},{"t":"Space"},{"t":"Str","c":"příkazů"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"počítač."},{"t":"Space"},{"t":"Str","c":"Tento"},{"t":"SoftBreak"},{"t":"Str","c":"soubor"},{"t":"Space"},{"t":"Str","c":"obsahuje"},{"t":"Space"},{"t":"Str","c":"veškerý"},{"t":"Space"},{"t":"Str","c":"zdrojový"},{"t":"Space"},{"t":"Str","c":"kód"},{"t":"Space"},{"t":"Str","c":"nutný"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"reprodukci"},{"t":"Space"},{"t":"Str","c":"mojí"},{"t":"Space"},{"t":"Str","c":"práce."}]},{"t":"Header","c":[2,["instrukce-k-sestavení-programu",[],[]],[{"t":"Str","c":"Instrukce"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"sestavení"},{"t":"Space"},{"t":"Str","c":"programu"}]]},{"t":"Para","c":[{"t":"Str","c":"Program"},{"t":"Space"},{"t":"Str","c":"využívá"},{"t":"Space"},{"t":"Str","c":"standardních"},{"t":"Space"},{"t":"Str","c":"nástrojů"},{"t":"Space"},{"t":"Str","c":"jazyka"},{"t":"Space"},{"t":"Str","c":"Rust."},{"t":"Space"},{"t":"Str","c":"O"},{"t":"Space"},{"t":"Str","c":"sestavení"},{"t":"Space"},{"t":"Str","c":"stačí"},{"t":"Space"},{"t":"Str","c":"požádat"},{"t":"SoftBreak"},{"t":"Code","c":[["",[],[]],"cargo"]},{"t":"Str","c":"."}]},{"t":"Div","c":[["",["doctest"],[["status","SUCCESS"]]],[{"t":"Div","c":[["",["doctestInput"],[]],[{"t":"CodeBlock","c":[["build-instructions",["zsh","eval","bootstrap-fold"],[]],"cd solver\ncargo build --release --color always"]}]]},{"t":"Div","c":[["",["doctestResult"],[]],[{"t":"Div","c":[["",["programOutput"],[]],[{"t":"RawBlock","c":["html","<pre class=\"ansi2html-content\"><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\"> Downloading</span> crates ...\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> quickcheck_macros v1.0.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> getrandom v0.2.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> funty v1.2.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> log v0.4.14\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> radium v0.6.2\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> aho-corasick v0.7.18\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> tap v1.0.1\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> rand_core v0.6.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> wyz v0.4.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> quickcheck v1.0.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> anyhow v1.0.44\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> rand v0.8.4\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> bitvec v0.22.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> env_logger v0.8.4\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> libc v0.2.103\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> memchr v2.4.1\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> cfg-if v1.0.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> proc-macro2 v1.0.29\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> log v0.4.14\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> unicode-xid v0.2.2\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> regex-syntax v0.6.25\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> radium v0.6.2\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> syn v1.0.80\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> anyhow v1.0.44\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> tap v1.0.1\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> funty v1.2.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> wyz v0.4.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> aho-corasick v0.7.18\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> getrandom v0.2.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> bitvec v0.22.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> quote v1.0.10\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> rand_core v0.6.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> regex v1.5.4\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> rand v0.8.4\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> env_logger v0.8.4\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> quickcheck_macros v1.0.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> quickcheck v1.0.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> solver v0.1.0 (/__w/ni-kop/ni-kop/1-exact-knapsack/solver)\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: unused variable: `b`</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/main.rs:153:17\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">153</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>        let (m, b, items) = (self.m, self.b, &amp;self.items);\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>                <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">help: if this is intentional, prefix it with an underscore: `_b`</span>\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">= </span><span style=\"font-weight: bold\">note</span>: `#[warn(unused_variables)]` on by default\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: unused variable: `b`</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/main.rs:226:17\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">226</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>        let (m, b, items) = (self.m, self.b, &amp;self.items);\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>                <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">help: if this is intentional, prefix it with an underscore: `_b`</span>\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: function is never used: `smart_max_`</span>\r\n  <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/main.rs:92:4\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">92</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>fn smart_max_&lt;A, F, G&gt;(f: F, g: G) -&gt; A\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^^^^^^^</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">= </span><span style=\"font-weight: bold\">note</span>: `#[warn(dead_code)]` on by default\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: function is never used: `smart_max`</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/main.rs:101:4\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">101</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>fn smart_max&lt;'a, F, G&gt;(f: F, g: G) -&gt; Solution&lt;'a&gt;\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^^^^^^</span>\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: associated function is never used: `dynamic_programming`</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/main.rs:152:8\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">152</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>    fn dynamic_programming(&amp;self) -&gt; u32 {\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>       <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^^^^^^^^^^^^^^^^</span>\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: associated function is never used: `branch_and_bound`</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/main.rs:177:8\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">177</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>    fn branch_and_bound(&amp;self) -&gt; u32 {\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>       <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^^^^^^^^^^^^^</span>\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: associated function is never used: `brute_force`</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/main.rs:221:8\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">221</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>    fn brute_force(&amp;self) -&gt; u32 {\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>       <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^^^^^^^^</span>\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: associated function is never used: `brute_force_old`</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/main.rs:225:8\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">225</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>    fn brute_force_old(&amp;self) -&gt; u32 {\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>       <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^^^^^^^^^^^^</span>\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: function is never used: `go`</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/main.rs:227:12\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">227</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>        fn go(items: &amp;Vec&lt;(u32, u32)&gt;, cap: u32, i: usize) -&gt; u32 {\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>           <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^</span>\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">:</span> `solver` (bin \"solver\") generated 9 warnings\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">    Finished</span> release [optimized + debuginfo] target(s) in 30.07s\r\n</pre>"]}]]}]]}]]},{"t":"Header","c":[2,["benchmarking",[],[]],[{"t":"Str","c":"Benchmarking"}]]},{"t":"Para","c":[{"t":"Str","c":"Pro"},{"t":"Space"},{"t":"Str","c":"provedení"},{"t":"Space"},{"t":"Str","c":"měření"},{"t":"Space"},{"t":"Str","c":"výkonu"},{"t":"Space"},{"t":"Str","c":"programu"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"využil"},{"t":"Space"},{"t":"Str","c":"nástroje"},{"t":"Space"},{"t":"Str","c":"Hyperfine."}]},{"t":"Div","c":[["",["doctest"],[["status","SUCCESS"]]],[{"t":"Div","c":[["",["doctestInput"],[]],[{"t":"CodeBlock","c":[["benchmark",["zsh","eval","bootstrap-fold"],[]],"uname -a\n./cpufetch --logo-short --color ibm\nmkdir -p docs/measurements/\ncd solver\nhyperfine --export-json ../docs/bench.json \\\n          --parameter-list n 4,10,15 \\\n          --parameter-list alg bf,bb \\\n          --runs 2 \\\n          --style color \\\n          'cargo run --release -- {alg} \\\n           < ds/NR{n}_inst.dat \\\n           > ../docs/measurements/{alg}-{n}.txt' 2>&1 \\\n    | fold -w 120 -s"]}]]},{"t":"Div","c":[["",["doctestResult"],[]],[{"t":"Div","c":[["",["programOutput"],[]],[{"t":"RawBlock","c":["html","<pre class=\"ansi2html-content\">Linux f91928e90520 5.8.0-1042-azure #45~20.04.1-Ubuntu SMP Wed Sep 15 14:24:15 UTC 2021 x86_64 GNU/Linux\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">                   .#################.          </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Name:</span>       <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Intel Xeon Platinum </span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">              .####                   ####.     </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Hypervisor:</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Microsoft Hyper-V</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">          .##                             ###   </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">uArch:</span>      <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Cascade Lake</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">       ##                          :##     ###  </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Technology:</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">14nm</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">    #                ##            :##      ##  </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Max Freq:</span>   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Unknown</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">  ##   ##  ######.   ####  ######  :##      ##  </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Cores:</span>      <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">2 cores</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\"> ##    ##  ##:  ##:  ##   ##   ### :##     ###  </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">AVX:</span>        <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">AVX,AVX2,AVX512</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">##     ##  ##:  ##:  ##  :######## :##    ##    </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">FMA:</span>        <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">FMA3</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">##     ##  ##:  ##:  ##   ##.   .  :## ####     </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">L1i Size:</span>   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">32KB (64KB Total)</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">##      #  ##:  ##:  ####  #####:   ##          </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">L1d Size:</span>   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">32KB (64KB Total)</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\"> ##                                             </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">L2 Size:</span>    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">1MB (2MB Total)</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">  ###.                         ..o####.         </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">L3 Size:</span>    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">35.75MB</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">   ######oo...         ..oo#######              </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Peak Perf.:</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Unknown</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">          o###############o                     </span>\r\n\r\n<span style=\"font-weight: bold\">Benchmark #</span><span style=\"font-weight: bold\">1</span>: cargo run --release -- bf \\\r\n           &lt; ds/NR4_inst.dat \\\r\n           &gt; ../docs/measurements/bf-4.txt\r\n  Time (<span style=\"font-weight: bold; color: #00aa00\">mean</span> ± <span style=\"color: #00aa00\">σ</span>):     <span style=\"font-weight: bold; color: #00aa00\">106.6 ms</span> ± <span style=\"color: #00aa00\">  6.4 ms</span>    [User: <span style=\"color: #0000aa\">87.7 ms</span>, \r\nSystem: <span style=\"color: #0000aa\">17.9 ms</span>]\r\n  Range (<span style=\"color: #00aaaa\">min</span> … <span style=\"color: #E850A8\">max</span>):   <span style=\"color: #00aaaa\">102.0 ms</span> … <span style=\"color: #E850A8\">111.1 ms</span>    <span style=\"font-weight: lighter\">2 runs</span>\r\n \r\n<span style=\"font-weight: bold\">Benchmark #</span><span style=\"font-weight: bold\">2</span>: cargo run --release -- bf \\\r\n           &lt; ds/NR10_inst.dat \\\r\n           &gt; ../docs/measurements/bf-10.txt\r\n  Time (<span style=\"font-weight: bold; color: #00aa00\">mean</span> ± <span style=\"color: #00aa00\">σ</span>):     <span style=\"font-weight: bold; color: #00aa00\">113.0 ms</span> ± <span style=\"color: #00aa00\">  4.5 ms</span>    [User: <span style=\"color: #0000aa\">94.2 ms</span>, \r\nSystem: <span style=\"color: #0000aa\">18.5 ms</span>]\r\n  Range (<span style=\"color: #00aaaa\">min</span> … <span style=\"color: #E850A8\">max</span>):   <span style=\"color: #00aaaa\">109.8 ms</span> … <span style=\"color: #E850A8\">116.1 ms</span>    <span style=\"font-weight: lighter\">2 runs</span>\r\n \r\n<span style=\"font-weight: bold\">Benchmark #</span><span style=\"font-weight: bold\">3</span>: cargo run --release -- bf \\\r\n           &lt; ds/NR15_inst.dat \\\r\n           &gt; ../docs/measurements/bf-15.txt\r\n  Time (<span style=\"font-weight: bold; color: #00aa00\">mean</span> ± <span style=\"color: #00aa00\">σ</span>):     <span style=\"font-weight: bold; color: #00aa00\">323.3 ms</span> ± <span style=\"color: #00aa00\">  0.2 ms</span>    [User: <span style=\"color: #0000aa\">305.2 ms</span>, \r\nSystem: <span style=\"color: #0000aa\">17.9 ms</span>]\r\n  Range (<span style=\"color: #00aaaa\">min</span> … <span style=\"color: #E850A8\">max</span>):   <span style=\"color: #00aaaa\">323.1 ms</span> … <span style=\"color: #E850A8\">323.4 ms</span>    <span style=\"font-weight: lighter\">2 runs</span>\r\n \r\n<span style=\"font-weight: bold\">Benchmark #</span><span style=\"font-weight: bold\">4</span>: cargo run --release -- bb \\\r\n           &lt; ds/NR4_inst.dat \\\r\n           &gt; ../docs/measurements/bb-4.txt\r\n  Time (<span style=\"font-weight: bold; color: #00aa00\">mean</span> ± <span style=\"color: #00aa00\">σ</span>):     <span style=\"font-weight: bold; color: #00aa00\">104.2 ms</span> ± <span style=\"color: #00aa00\">  3.0 ms</span>    [User: <span style=\"color: #0000aa\">75.4 ms</span>, \r\nSystem: <span style=\"color: #0000aa\">29.0 ms</span>]\r\n  Range (<span style=\"color: #00aaaa\">min</span> … <span style=\"color: #E850A8\">max</span>):   <span style=\"color: #00aaaa\">102.1 ms</span> … <span style=\"color: #E850A8\">106.4 ms</span>    <span style=\"font-weight: lighter\">2 runs</span>\r\n \r\n<span style=\"font-weight: bold\">Benchmark #</span><span style=\"font-weight: bold\">5</span>: cargo run --release -- bb \\\r\n           &lt; ds/NR10_inst.dat \\\r\n           &gt; ../docs/measurements/bb-10.txt\r\n  Time (<span style=\"font-weight: bold; color: #00aa00\">mean</span> ± <span style=\"color: #00aa00\">σ</span>):     <span style=\"font-weight: bold; color: #00aa00\">104.5 ms</span> ± <span style=\"color: #00aa00\">  0.7 ms</span>    [User: <span style=\"color: #0000aa\">89.9 ms</span>, \r\nSystem: <span style=\"color: #0000aa\">14.5 ms</span>]\r\n  Range (<span style=\"color: #00aaaa\">min</span> … <span style=\"color: #E850A8\">max</span>):   <span style=\"color: #00aaaa\">104.0 ms</span> … <span style=\"color: #E850A8\">104.9 ms</span>    <span style=\"font-weight: lighter\">2 runs</span>\r\n \r\n<span style=\"font-weight: bold\">Benchmark #</span><span style=\"font-weight: bold\">6</span>: cargo run --release -- bb \\\r\n           &lt; ds/NR15_inst.dat \\\r\n           &gt; ../docs/measurements/bb-15.txt\r\n  Time (<span style=\"font-weight: bold; color: #00aa00\">mean</span> ± <span style=\"color: #00aa00\">σ</span>):     <span style=\"font-weight: bold; color: #00aa00\">139.0 ms</span> ± <span style=\"color: #00aa00\">  3.7 ms</span>    [User: <span style=\"color: #0000aa\">130.8 ms</span>, \r\nSystem: <span style=\"color: #0000aa\">7.9 ms</span>]\r\n  Range (<span style=\"color: #00aaaa\">min</span> … <span style=\"color: #E850A8\">max</span>):   <span style=\"color: #00aaaa\">136.4 ms</span> … <span style=\"color: #E850A8\">141.6 ms</span>    <span style=\"font-weight: lighter\">2 runs</span>\r\n \r\n<span style=\"font-weight: bold\">Summary</span>\r\n  '<span style=\"color: #00aaaa\">cargo run --release -- bb \\\r\n           &lt; ds/NR4_inst.dat \\\r\n           &gt; ../docs/measurements/bb-4.txt</span>' ran\r\n<span style=\"font-weight: bold; color: #00aa00\">    1.00</span> ± <span style=\"color: #00aa00\">0.03</span> times faster than '<span style=\"color: #E850A8\">cargo run --release -- bb \\\r\n           &lt; ds/NR10_inst.dat \\\r\n           &gt; ../docs/measurements/bb-10.txt</span>'\r\n<span style=\"font-weight: bold; color: #00aa00\">    1.02</span> ± <span style=\"color: #00aa00\">0.07</span> times faster than '<span style=\"color: #E850A8\">cargo run --release -- bf \\\r\n           &lt; ds/NR4_inst.dat \\\r\n           &gt; ../docs/measurements/bf-4.txt</span>'\r\n<span style=\"font-weight: bold; color: #00aa00\">    1.08</span> ± <span style=\"color: #00aa00\">0.05</span> times faster than '<span style=\"color: #E850A8\">cargo run --release -- bf \\\r\n           &lt; ds/NR10_inst.dat \\\r\n           &gt; ../docs/measurements/bf-10.txt</span>'\r\n<span style=\"font-weight: bold; color: #00aa00\">    1.33</span> ± <span style=\"color: #00aa00\">0.05</span> times faster than '<span style=\"color: #E850A8\">cargo run --release -- bb \\\r\n           &lt; ds/NR15_inst.dat \\\r\n           &gt; ../docs/measurements/bb-15.txt</span>'\r\n<span style=\"font-weight: bold; color: #00aa00\">    3.10</span> ± <span style=\"color: #00aa00\">0.09</span> times faster than '<span style=\"color: #E850A8\">cargo run --release -- bf \\\r\n           &lt; ds/NR15_inst.dat \\\r\n           &gt; ../docs/measurements/bf-15.txt</span>'\r\n</pre>"]}]]}]]}]]},{"t":"Para","c":[{"t":"Str","c":"Měření"},{"t":"Space"},{"t":"Str","c":"ze"},{"t":"Space"},{"t":"Str","c":"spuštění"},{"t":"Space"},{"t":"Str","c":"Hyperfine"},{"t":"Space"},{"t":"Str","c":"jsou"},{"t":"Space"},{"t":"Str","c":"uložena"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"souboru"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"docs/bench.json"]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"který"},{"t":"SoftBreak"},{"t":"Str","c":"následně"},{"t":"Space"},{"t":"Str","c":"zpracujeme"},{"t":"Space"},{"t":"Str","c":"do"},{"t":"Space"},{"t":"Str","c":"tabulky"},{"t":"Space"},{"t":"Str","c":"níže."}]},{"t":"Div","c":[["",["doctest"],[["status","SUCCESS"]]],[{"t":"Div","c":[["",["doctestInput"],[]],[{"t":"CodeBlock","c":[["json-to-csv",["zsh","eval","bootstrap-fold"],[]],"echo \"algoritmus,\\$n\\$,průměr,\\$\\pm \\sigma\\$,minimum,medián,maximum\" > docs/bench.csv\njq -r \\\n   '.[] | .[] | [.parameters.alg, .parameters.n\n                , ([.mean, .stddev, .min, .median, .max]\n                   | map(\"**\" + (100000 * . + 0.5\n                         | floor\n                         | . / 100\n                         | tostring\n                         | if test(\"\\\\.\") then sub(\"\\\\.\"; \"**.\") else . + \"**\" end\n                         ) + \" ms\"\n                        )\n                  )\n                ] | flatten | @csv' \\\n   docs/bench.json \\\n>> docs/bench.csv\necho \"\""]}]]},{"t":"Div","c":[["",["doctestResult"],[]],[{"t":"Div","c":[["",["programOutput"],[]],[{"t":"RawBlock","c":["html","<pre class=\"ansi2html-content\">\r\n</pre>"]}]]}]]}]]},{"t":"Table","c":[["",[],[]],[null,[{"t":"Plain","c":[{"t":"Str","c":"Měření"},{"t":"Space"},{"t":"Str","c":"výkonu"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"různé"},{"t":"Space"},{"t":"Str","c":"kombinace"},{"t":"Space"},{"t":"Str","c":"velikosti"},{"t":"Space"},{"t":"Str","c":"instancí"},{"t":"Space"},{"t":"Str","c":"problému"},{"t":"Space"},{"t":"Str","c":"("},{"t":"Math","c":[{"t":"InlineMath"},"n"]},{"t":"Str","c":")"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"SoftBreak"},{"t":"Str","c":"zvoleného"},{"t":"Space"},{"t":"Str","c":"algoritmu."},{"t":"Space"}]}]],[[{"t":"AlignDefault"},{"t":"ColWidth","c":0.13392857142857142}],[{"t":"AlignDefault"},{"t":"ColWidth","c":7.142857142857142e-2}],[{"t":"AlignDefault"},{"t":"ColWidth","c":0.16071428571428573}],[{"t":"AlignDefault"},{"t":"ColWidth","c":0.15178571428571427}],[{"t":"AlignDefault"},{"t":"ColWidth","c":0.16071428571428573}],[{"t":"AlignDefault"},{"t":"ColWidth","c":0.16071428571428573}],[{"t":"AlignDefault"},{"t":"ColWidth","c":0.16071428571428573}]],[["",[],[]],[[["",[],[]],[[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"algoritmus"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Math","c":[{"t":"InlineMath"},"n"]}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"průměr"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Math","c":[{"t":"InlineMath"},"\\pm \\sigma"]}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"minimum"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"medián"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"maximum"}]}]]]]]],[[["",[],[]],0,[],[[["",[],[]],[[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"bf"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"4"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"106"}]},{"t":"Str","c":".56"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"6"}]},{"t":"Str","c":".39"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"102"}]},{"t":"Str","c":".04"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"106"}]},{"t":"Str","c":".56"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"111"}]},{"t":"Str","c":".08"},{"t":"Space"},{"t":"Str","c":"ms"}]}]]]],[["",[],[]],[[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"bf"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"10"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"112"}]},{"t":"Str","c":".95"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"4"}]},{"t":"Str","c":".51"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"109"}]},{"t":"Str","c":".76"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"112"}]},{"t":"Str","c":".95"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"116"}]},{"t":"Str","c":".14"},{"t":"Space"},{"t":"Str","c":"ms"}]}]]]],[["",[],[]],[[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"bf"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"15"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"323"}]},{"t":"Str","c":".27"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"0"}]},{"t":"Str","c":".22"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"323"}]},{"t":"Str","c":".12"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"323"}]},{"t":"Str","c":".27"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"323"}]},{"t":"Str","c":".43"},{"t":"Space"},{"t":"Str","c":"ms"}]}]]]],[["",[],[]],[[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"bb"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"4"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"104"}]},{"t":"Str","c":".23"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"3"}]},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"102"}]},{"t":"Str","c":".11"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"104"}]},{"t":"Str","c":".23"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"106"}]},{"t":"Str","c":".35"},{"t":"Space"},{"t":"Str","c":"ms"}]}]]]],[["",[],[]],[[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"bb"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"10"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"104"}]},{"t":"Str","c":".45"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"0"}]},{"t":"Str","c":".68"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"103"}]},{"t":"Str","c":".97"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"104"}]},{"t":"Str","c":".45"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"104"}]},{"t":"Str","c":".93"},{"t":"Space"},{"t":"Str","c":"ms"}]}]]]],[["",[],[]],[[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"bb"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Str","c":"15"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"139"}]},{"t":"Str","c":".04"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"3"}]},{"t":"Str","c":".67"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"136"}]},{"t":"Str","c":".44"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"139"}]},{"t":"Str","c":".04"},{"t":"Space"},{"t":"Str","c":"ms"}]}]],[["",[],[]],{"t":"AlignDefault"},1,1,[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"141"}]},{"t":"Str","c":".64"},{"t":"Space"},{"t":"Str","c":"ms"}]}]]]]]]],[["",[],[]],[]]]},{"t":"Header","c":[3,["srovnání-algoritmů",[],[]],[{"t":"Str","c":"Srovnání"},{"t":"Space"},{"t":"Str","c":"algoritmů"}]]},{"t":"Div","c":[["",["doctest"],[["status","SUCCESS"]]],[{"t":"Div","c":[["",["doctestInput"],[]],[{"t":"CodeBlock","c":[["",["python","eval"],[]],"import matplotlib.pyplot as plt\nimport pandas as pd\nfrom pandas.core.tools.numeric import to_numeric\n\ndf = pd.read_csv(\"docs/bench.csv\", dtype = \"string\")\ndf.rename({\n        \"algoritmus\": \"alg\",\n        \"$n$\": \"n\",\n        \"průměr\": \"avg\",\n        \"$\\pm \\sigma$\": \"sigma\",\n        \"medián\": \"median\",\n        \"minimum\": \"min\",\n        \"maximum\": \"max\",\n    },\n    inplace = True,\n    errors  = \"raise\",\n    axis    = 1,\n)\n\nnumeric_columns = [\"n\", \"avg\", \"sigma\", \"min\", \"median\", \"max\"]\ndf[numeric_columns] = df[numeric_columns].apply(lambda c:\n    c.apply(lambda x:\n        to_numeric(x.replace(\"**\", \"\").replace(\" ms\", \"\"))\n    )\n)\n\n# Create a figure and a set of subplots.\nfig, ax = plt.subplots(figsize = (11, 6))\nlabels = { \"bf\": \"Hrubá síla\"\n         , \"bb\": \"Branch & bound\"\n         , \"dp\": \"Dynamické programování\"\n         }\n\n# Group the dataframe by alg and create a line for each group.\nfor name, group in df.groupby(\"alg\"):\n    (x, y, sigma) = (group[\"n\"], group[\"avg\"], group[\"sigma\"])\n    ax.plot(x, y, label = labels[name])\n    ax.fill_between(x, y + sigma, y - sigma, alpha = 0.3)\n\n# Axis metadata: ticks, scaling, margins, and the legend\nplt.xticks(df[\"n\"])\nax.set_yscale(\"log\", base = 10)\nax.set_yticks(list(plt.yticks()[0]) + list(df[\"avg\"]), minor = True)\nax.margins(0.05, 0.1)\nax.legend(loc=\"upper left\")\n\nplt.savefig(\"docs/graph.svg\")"]}]]},{"t":"Div","c":[["",["doctestResult"],[]],[{"t":"Div","c":[["",["programOutput"],[]],[{"t":"RawBlock","c":["html","<pre class=\"ansi2html-content\">&lt;Figure size 792x432 with 1 Axes&gt;</pre>"]}]]}]]}]]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"Závislost"},{"t":"Space"},{"t":"Str","c":"doby"},{"t":"Space"},{"t":"Str","c":"běhu"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"počtu"},{"t":"Space"},{"t":"Str","c":"předmětů."},{"t":"Space"},{"t":"Str","c":"Částečně"},{"t":"Space"},{"t":"Str","c":"průhledná"},{"t":"Space"},{"t":"Str","c":"oblast"},{"t":"Space"},{"t":"Str","c":"značí"},{"t":"SoftBreak"},{"t":"Str","c":"směrodatnou"},{"t":"Space"},{"t":"Str","c":"odchylku"},{"t":"Space"},{"t":"Str","c":"("},{"t":"Math","c":[{"t":"InlineMath"},"\\sigma"]},{"t":"Str","c":")."}],["graph.svg","fig:"]]}]},{"t":"Header","c":[2,["implementace",[],[]],[{"t":"Str","c":"Implementace"}]]},{"t":"Para","c":[{"t":"Str","c":"Program"},{"t":"Space"},{"t":"Str","c":"začíná"},{"t":"Space"},{"t":"Str","c":"definicí"},{"t":"Space"},{"t":"Str","c":"datové"},{"t":"Space"},{"t":"Str","c":"struktury"},{"t":"Space"},{"t":"Str","c":"reprezentující"},{"t":"Space"},{"t":"Str","c":"instanci"},{"t":"Space"},{"t":"Str","c":"problému"},{"t":"SoftBreak"},{"t":"Str","c":"batohu."}]},{"t":"CodeBlock","c":[["problem-instance-definition",["rust"],[]],"#[derive(Debug, PartialEq, Eq, Clone)]\nstruct Instance {\n    id: i32, m: u32, b: u32, items: Vec<(u32, u32)>\n}"]},{"t":"CodeBlock","c":[["",["rust"],[["file","solver/src/main.rs"]]],"use std::{io::stdin, str::FromStr, cmp, cmp::max};\nuse anyhow::{Context, Result, anyhow};\nuse bitvec::prelude::BitArr;\n\n#[cfg(test)]\n#[macro_use(quickcheck)]\nextern crate quickcheck_macros;\n\n<<problem-instance-definition>>\n\nfn main() -> Result<()> {\n    let alg = {\n        <<select-algorithm>>\n    }?;\n\n    loop {\n        match parse_line(stdin().lock())? {\n            Some(inst) => match alg(&inst) {\n                Solution { visited, .. } => println!(\"{}\", visited),\n            },\n            None => return Ok(())\n        }\n    }\n}\n\n<<parser>>\n\n#[inline(always)]\nfn smart_max_<A, F, G>(f: F, g: G) -> A\nwhere F: Fn()  -> A\n    , G: Fn(A) -> A\n    , A: cmp::Ord + Copy {\n    let x = f();\n    max(x, g(x))\n}\n\n#[inline]\nfn smart_max<'a, F, G>(f: F, g: G) -> Solution<'a>\n  where F: Fn()         -> Solution<'a>\n      , G: Fn(Solution) -> Solution {\n    let x = f();\n    let y = g(x);\n    Solution { visited: x.visited + y.visited, ..max(x, y) }\n}\n\ntype Config = BitArr!(for 64);\n#[derive(PartialEq, Eq, Clone, Copy, Debug)]\nstruct Solution<'a> { weight: u32, cost: u32, cfg: Config, visited: u64, inst: &'a Instance }\n\nimpl <'a> PartialOrd for Solution<'a> {\n    fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {\n        use cmp::Ordering;\n        let Solution {weight, cost, ..} = self;\n        Some(match cost.cmp(&other.cost) {\n            Ordering::Equal => weight.cmp(&other.weight).reverse(),\n            other => other,\n        })\n    }\n}\n\nimpl <'a> Ord for Solution<'a> {\n    fn cmp(&self, other: &Self) -> cmp::Ordering {\n        self.partial_cmp(&other).unwrap()\n    }\n}\n\nimpl <'a> Solution<'a> {\n    fn with(mut self, i: usize) -> Solution<'a> {\n        let (w, c) = self.inst.items[i];\n        if !self.cfg[i] {\n            self.cfg.set(i, true);\n            self.weight += w;\n            self.cost += c;\n        }\n        self\n    }\n\n    fn set_visited(self, v: u64) -> Solution<'a> {\n        Solution { visited: v, ..self }\n    }\n\n    fn incr_visited(self) -> Solution<'a> {\n        self.set_visited(self.visited + 1)\n    }\n}\n\nimpl Instance {\n    <<solver-dp>>\n\n    <<solver-bb>>\n\n    <<solver-bf>>\n}\n\n<<tests>>"]},{"t":"Header","c":[2,["algoritmy",[],[]],[{"t":"Str","c":"Algoritmy"}]]},{"t":"Header","c":[3,["hrubá-síla",[],[]],[{"t":"Str","c":"Hrubá"},{"t":"Space"},{"t":"Str","c":"síla"}]]},{"t":"CodeBlock","c":[["solver-bf",["rust"],[]],"fn brute_force(&self) -> u32 {\n    self.brute_force2().cost\n}\n\nfn brute_force_old(&self) -> u32 {\n    let (m, b, items) = (self.m, self.b, &self.items);\n    fn go(items: &Vec<(u32, u32)>, cap: u32, i: usize) -> u32 {\n        if i >= items.len() { return 0; }\n\n        let (w, c) = items[i];\n        let next = |cap| go(items, cap, i + 1);\n        let include = || next(cap - w);\n        let exclude = || next(cap);\n        if w <= cap {\n            max(c + include(), exclude())\n        } else {\n            exclude()\n        }\n    }\n\n    go(items, m, 0)\n}\n\nfn brute_force2(&self) -> Solution {\n    fn go<'a>(items: &'a [(u32, u32)], current: Solution<'a>, i: usize, m: u32) -> Solution<'a> {\n        if i >= items.len() { return current }\n\n        let (w, _c) = items[i];\n        let next = |current, m| go(items, current, i + 1, m);\n        let include = || {\n            let current = current.clone().with(i).incr_visited();\n            next(current, m - w)\n        };\n        let exclude = || next(current.incr_visited(), m);\n\n        if w <= m {\n            let x = include();\n            let y = exclude();\n            max(x, y).set_visited(x.visited + y.visited)\n        }\n        else { exclude() }\n    }\n\n    let empty = Solution { weight: 0, cost: 0, visited: 0, cfg: Default::default(), inst: self };\n    go(&self.items, empty, 0, self.m)\n}"]},{"t":"Header","c":[3,["branch-bound",[],[]],[{"t":"Str","c":"Branch"},{"t":"Space"},{"t":"Str","c":"&"},{"t":"Space"},{"t":"Str","c":"bound"}]]},{"t":"CodeBlock","c":[["solver-bb",["rust"],[]],"fn branch_and_bound(&self) -> u32 {\n    self.branch_and_bound2().cost\n}\n\nfn branch_and_bound2(&self) -> Solution {\n    struct State<'a>(&'a Vec<(u32, u32)>, Vec<u32>);\n    let prices: Vec<u32> = {\n        self.items.iter().rev()\n        .scan(0, |sum, (_w, c)| {\n            *sum = *sum + c;\n            Some(*sum)\n        })\n        .collect::<Vec<_>>().into_iter().rev().collect()\n    };\n\n    fn go<'a>(state: &'a State, current: Solution<'a>, best: Solution<'a>, i: usize, m: u32) -> Solution<'a> {\n        let State(items, prices) = state;\n        if i >= items.len() || current.cost + prices[i] <= best.cost { return current }\n\n        let (w, _c) = items[i];\n        let next = |current, best, m| go(state, current, best, i + 1, m);\n        let include = || {\n            let current = current.clone().with(i);\n            let count = max(current.visited, best.visited);\n            next(current.incr_visited(), max(current, best).set_visited(count + 1), m - w)\n        };\n        let exclude = |best: Solution<'a>| next(current.incr_visited(), best.incr_visited(), m);\n\n        if w <= m {\n            let x = include();\n            let y = exclude(x);\n            Solution { visited: x.visited + y.visited, ..max(x, y) }\n        }\n        else { exclude(best) }\n    }\n\n    // FIXME borrowck issues\n    let state = State(&self.items, prices);\n    let empty = Solution { weight: 0, cost: 0, visited: 0, cfg: Default::default(), inst: self };\n    Solution { inst: self, ..go(&state, empty, empty, 0, self.m) }\n}"]},{"t":"Header","c":[3,["dynamické-programování",[],[]],[{"t":"Str","c":"Dynamické"},{"t":"Space"},{"t":"Str","c":"programování"}]]},{"t":"CodeBlock","c":[["solver-dp",["rust"],[]],"fn dynamic_programming(&self) -> u32 {\n    let (m, b, items) = (self.m, self.b, &self.items);\n    let mut next = Vec::with_capacity(m as usize + 1);\n    next.resize(m as usize + 1, 0);\n    let mut last = Vec::new();\n\n    for i in 1..=items.len() {\n        let (weight, cost) = items[i - 1];\n        last.clone_from(&next);\n\n        for cap in 0..=m as usize {\n            next[cap] = if (cap as u32) < weight {\n                    last[cap]\n                } else {\n                    let rem_weight = max(0, cap as isize - weight as isize) as usize;\n                    max(last[cap], last[rem_weight] + cost)\n                };\n        }\n    }\n\n    *next.last().unwrap() //>= b\n}"]},{"t":"Header","c":[2,["appendix",[],[]],[{"t":"Str","c":"Appendix"}]]},{"t":"Para","c":[{"t":"Str","c":"Zpracování"},{"t":"Space"},{"t":"Str","c":"vstupu"},{"t":"Space"},{"t":"Str","c":"zajišťuje"},{"t":"Space"},{"t":"Str","c":"jednoduchý"},{"t":"Space"},{"t":"Str","c":"parser"},{"t":"Space"},{"t":"Str","c":"pracující"},{"t":"Space"},{"t":"Str","c":"řádek"},{"t":"Space"},{"t":"Str","c":"po"},{"t":"Space"},{"t":"Str","c":"řádku."}]},{"t":"CodeBlock","c":[["parser",["rust","bootstrap-fold"],[]],"<<boilerplate>>\n\nfn parse_line<T>(mut stream: T) -> Result<Option<Instance>> where T: std::io::BufRead {\n    let mut input = String::new();\n    match stream.read_line(&mut input)? {\n        0 => return Ok(None),\n        _ => ()\n    };\n\n    let mut  numbers = input.split_whitespace();\n    let id = numbers.parse_next()?;\n    let  n = numbers.parse_next()?;\n    let  m = numbers.parse_next()?;\n    let  b = numbers.parse_next()?;\n\n    let mut items: Vec<(u32, u32)> = Vec::with_capacity(n);\n    for _ in 0..n {\n        let w = numbers.parse_next()?;\n        let c = numbers.parse_next()?;\n        items.push((w, c));\n    }\n\n    Ok(Some(Instance {id, m, b, items}))\n}"]},{"t":"Para","c":[{"t":"Str","c":"Výběr"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"řízen"},{"t":"Space"},{"t":"Str","c":"argumentem"},{"t":"Space"},{"t":"Str","c":"předaným"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"příkazové"},{"t":"Space"},{"t":"Str","c":"řádce."},{"t":"Space"},{"t":"Str","c":"Příslušnou"},{"t":"SoftBreak"},{"t":"Str","c":"funkci"},{"t":"Space"},{"t":"Str","c":"vrátíme"},{"t":"Space"},{"t":"Str","c":"jako"},{"t":"Space"},{"t":"Str","c":"hodnotu"},{"t":"Space"},{"t":"Str","c":"tohoto"},{"t":"Space"},{"t":"Str","c":"bloku:"}]},{"t":"CodeBlock","c":[["select-algorithm",["rust","bootstrap-fold"],[]],"let args: Vec<String> = std::env::args().collect();\nif args.len() == 2 {\n    let ok = |x: fn(&Instance) -> Solution| Ok(x);\n    match &args[1][..] {\n        \"bf\"    => ok(Instance::brute_force2),\n        \"bb\"    => ok(Instance::branch_and_bound2),\n        // \"dp\"    => ok(Instance::dynamic_programming),\n        invalid => Err(anyhow!(\"\\\"{}\\\" is not a known algorithm\", invalid)),\n    }\n} else {\n    println!(\n        \"Usage: {} <algorithm>, where <algorithm> is one of bf, bb, dp\",\n        args[0]\n    );\n    Err(anyhow!(\"Expected 1 argument, got {}\", args.len() - 1))\n}"]},{"t":"Para","c":[{"t":"Str","c":"Trait"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"Boilerplate"]},{"t":"Space"},{"t":"Str","c":"definuje"},{"t":"Space"},{"t":"Str","c":"funkci"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"parse_next"]},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"zkrácení"},{"t":"Space"},{"t":"Str","c":"zápisu"},{"t":"Space"},{"t":"Str","c":"zpracování"},{"t":"SoftBreak"},{"t":"Str","c":"vstupu."}]},{"t":"CodeBlock","c":[["boilerplate",["rust","bootstrap-fold"],[]],"trait Boilerplate {\n    fn parse_next<T: FromStr>(&mut self) -> Result<T>\n      where <T as FromStr>::Err: std::error::Error + Send + Sync + 'static;\n}\n\nimpl Boilerplate for std::str::SplitWhitespace<'_> {\n    fn parse_next<T: FromStr>(&mut self) -> Result<T>\n      where <T as FromStr>::Err: std::error::Error + Send + Sync + 'static {\n        let str = self.next().ok_or(anyhow!(\"unexpected end of input\"))?;\n        str.parse::<T>()\n           .with_context(|| format!(\"cannot parse {}\", str))\n    }\n}"]},{"t":"Header","c":[3,["automatické-testy",[],[]],[{"t":"Str","c":"Automatické"},{"t":"Space"},{"t":"Str","c":"testy"}]]},{"t":"Para","c":[{"t":"Str","c":"Implementaci"},{"t":"Space"},{"t":"Str","c":"doplňují"},{"t":"Space"},{"t":"Str","c":"automatické"},{"t":"Space"},{"t":"Str","c":"testy"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"ověření"},{"t":"Space"},{"t":"Str","c":"správnosti."}]},{"t":"CodeBlock","c":[["tests",["rust","bootstrap-fold"],[]],"#[cfg(test)]\nmod tests {\n    use super::*;\n    use quickcheck::{Arbitrary, Gen};\n\n    impl Arbitrary for Instance {\n        fn arbitrary(g: &mut Gen) -> Instance {\n            Instance {\n                id:    i32::arbitrary(g),\n                m:     u32::arbitrary(g),\n                b:     u32::arbitrary(g),\n                items: Vec::arbitrary(g)\n                           .into_iter()\n                           .take(10)\n                           .map(|(w, c): (u32, u32)| (w.min(10_000), c.min(10_000)))\n                           .collect(),\n            }\n        }\n\n        fn shrink(&self) -> Box<dyn Iterator<Item = Self>> {\n            let data = self.clone();\n            let chain: Vec<Instance> = quickcheck::empty_shrinker()\n                .chain(self.id   .shrink().map(|id   | Instance {id,    ..(&data).clone()}))\n                .chain(self.m    .shrink().map(|m    | Instance {m,     ..(&data).clone()}))\n                .chain(self.b    .shrink().map(|b    | Instance {b,     ..(&data).clone()}))\n                .chain(self.items.shrink().map(|items| Instance {items, ..data}))\n                .collect();\n            Box::new(chain.into_iter())\n        }\n    }\n\n    impl <'a> Solution<'a> {\n        fn assert_valid(&self, i: &Instance) {\n            let Instance { m, b, items, .. } = i;\n            let Solution { weight: w, cost: c, cfg, .. } = self;\n\n            println!(\"{} >= {}\", c, b);\n            // assert!(c >= b);\n\n            let (weight, cost) = items\n                .into_iter()\n                .zip(cfg)\n                .map(|((w, c), b)| {\n                    if *b { (*w, *c) } else { (0, 0) }\n                })\n                .reduce(|(a0, b0), (a1, b1)| (a0 + a1, b0 + b1))\n                .unwrap_or_default();\n\n            println!(\"{} <= {}\", weight, *m);\n            assert!(weight <= *m);\n\n            println!(\"{} == {}\", cost, *c);\n            assert_eq!(cost, *c);\n\n            println!(\"{} == {}\", weight, *w);\n            assert_eq!(weight, *w);\n        }\n    }\n\n    #[test]\n    fn stupid() {\n        // let i = Instance { id: 0, m: 1, b: 0, items: vec![(1, 0), (1, 0)] };\n        // i.branch_and_bound2().assert_valid(&i);\n        let i = Instance { id: 0, m: 1, b: 0, items: vec![(1, 1), (1, 2), (0, 1)] };\n        assert_eq!(i.branch_and_bound(), i.brute_force())\n    }\n\n    #[test]\n    fn small_bb_is_correct() {\n        let a = Instance {\n            id: -10,\n            m: 165,\n            b: 384,\n            items: vec![ (86,  744)\n                       , (214, 1373)\n                       , (236, 1571)\n                       , (239, 2388)\n                       ],\n        };\n        a.branch_and_bound2().assert_valid(&a);\n    }\n\n    #[test]\n    fn bb_is_correct() -> Result<()> {\n        use std::fs::File;\n        use std::io::BufReader;\n        let inst = parse_line(\n            BufReader::new(File::open(\"ds/NR15_inst.dat\")?)\n        )?.unwrap();\n        println!(\"testing {:?}\", inst);\n        inst.branch_and_bound2().assert_valid(&inst);\n        Ok(())\n    }\n\n    #[quickcheck]\n    fn qc_bb_is_really_correct(inst: Instance) {\n        assert_eq!(inst.branch_and_bound2().cost, inst.brute_force());\n    }\n}\n"]}]}