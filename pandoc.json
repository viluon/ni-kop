{"pandoc-api-version":[1,22,1],"meta":{"author":{"t":"MetaInlines","c":[{"t":"Str","c":"Ondřej"},{"t":"Space"},{"t":"Str","c":"Kvapil"}]},"title":{"t":"MetaInlines","c":[{"t":"Str","c":"NI-KOP"},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"úkol"},{"t":"Space"},{"t":"Str","c":"5"}]}},"blocks":[{"t":"Header","c":[1,["kombinatorická-optimalizace-problém-vážené-splnitelnosti-booleovské-formule",[],[]],[{"t":"Str","c":"Kombinatorická"},{"t":"Space"},{"t":"Str","c":"optimalizace:"},{"t":"Space"},{"t":"Str","c":"problém"},{"t":"Space"},{"t":"Str","c":"vážené"},{"t":"Space"},{"t":"Str","c":"splnitelnosti"},{"t":"Space"},{"t":"Str","c":"booleovské"},{"t":"Space"},{"t":"Str","c":"formule"}]]},{"t":"Header","c":[2,["zadání",[],[]],[{"t":"Str","c":"Zadání"}]]},{"t":"Header","c":[3,["pokyny",[],[]],[{"t":"Str","c":"Pokyny"}]]},{"t":"Para","c":[{"t":"Str","c":"Problém"},{"t":"Space"},{"t":"Str","c":"řešte"},{"t":"Space"},{"t":"Str","c":"některou"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"pokročilých"},{"t":"Space"},{"t":"Str","c":"heuristik:"}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"simulované"},{"t":"Space"},{"t":"Str","c":"ochlazování"}]}],[{"t":"Plain","c":[{"t":"Str","c":"genetický"},{"t":"Space"},{"t":"Str","c":"algoritmus"}]}],[{"t":"Plain","c":[{"t":"Str","c":"tabu"},{"t":"Space"},{"t":"Str","c":"prohledávání"}]}]]},{"t":"Para","c":[{"t":"Str","c":"Po"},{"t":"Space"},{"t":"Str","c":"nasazení"},{"t":"Space"},{"t":"Str","c":"heuristiky"},{"t":"Space"},{"t":"Str","c":"ověřte"},{"t":"Space"},{"t":"Str","c":"její"},{"t":"Space"},{"t":"Str","c":"vlastnosti"},{"t":"Space"},{"t":"Str","c":"experimentálním"},{"t":"Space"},{"t":"Str","c":"vyhodnocením,"},{"t":"SoftBreak"},{"t":"Str","c":"které"},{"t":"Space"},{"t":"Str","c":"přesvědčivě"},{"t":"Space"},{"t":"Str","c":"doloží,"},{"t":"Space"},{"t":"Str","c":"jakou"},{"t":"Space"},{"t":"Str","c":"třídu"},{"t":"Space"},{"t":"Str","c":"(rozsah,"},{"t":"Space"},{"t":"Str","c":"velikosti…)"},{"t":"Space"},{"t":"Str","c":"instancí"},{"t":"Space"},{"t":"Str","c":"heuristika"},{"t":"SoftBreak"},{"t":"Str","c":"zpracovává."},{"t":"Space"},{"t":"Str","c":"Zejména"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"případě"},{"t":"Space"},{"t":"Str","c":"použití"},{"t":"Space"},{"t":"Str","c":"nestandardních,"},{"t":"Space"},{"t":"Str","c":"např."},{"t":"Space"},{"t":"Str","c":"originálních"},{"t":"Space"},{"t":"Str","c":"technik"},{"t":"SoftBreak"},{"t":"Str","c":"doložte"},{"t":"Space"},{"t":"Str","c":"jejich"},{"t":"Space"},{"t":"Str","c":"účinnost"},{"t":"Space"},{"t":"Str","c":"experimentálně"},{"t":"Space"},{"t":"Str","c":"(což"},{"t":"Space"},{"t":"Str","c":"vyloučí"},{"t":"Space"},{"t":"Str","c":"případné"},{"t":"Space"},{"t":"Str","c":"diskuse"},{"t":"Space"},{"t":"Str","c":"o"},{"t":"Space"},{"t":"Str","c":"jejich"},{"t":"SoftBreak"},{"t":"Str","c":"vhodnosti)."}]},{"t":"Para","c":[{"t":"Str","c":"Zpráva"},{"t":"Space"},{"t":"Str","c":"by"},{"t":"Space"},{"t":"Str","c":"měla"},{"t":"Space"},{"t":"Str","c":"dokládat"},{"t":"Space"},{"t":"Str","c":"Váš"},{"t":"Space"},{"t":"Str","c":"racionální"},{"t":"Space"},{"t":"Str","c":"přístup"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"problému,"},{"t":"Space"},{"t":"Str","c":"tedy"},{"t":"Space"},{"t":"Str","c":"celý"},{"t":"SoftBreak"},{"t":"Str","c":"pracovní"},{"t":"Space"},{"t":"Str","c":"postup."},{"t":"Space"},{"t":"Str","c":"Ve"},{"t":"Space"},{"t":"Str","c":"zprávě"},{"t":"Space"},{"t":"Str","c":"prosím"},{"t":"Space"},{"t":"Str","c":"také"},{"t":"Space"},{"t":"Str","c":"popište"},{"t":"Space"},{"t":"Str","c":"obě"},{"t":"Space"},{"t":"Str","c":"fáze"},{"t":"Space"},{"t":"Str","c":"nasazení"},{"t":"Space"},{"t":"Str","c":"heuristiky,"},{"t":"Space"},{"t":"Str","c":"jak"},{"t":"SoftBreak"},{"t":"Str","c":"nastavení,"},{"t":"Space"},{"t":"Str","c":"(white"},{"t":"Space"},{"t":"Str","c":"box"},{"t":"Space"},{"t":"Str","c":"fáze),"},{"t":"Space"},{"t":"Str","c":"tak"},{"t":"Space"},{"t":"Str","c":"závěrečné"},{"t":"Space"},{"t":"Str","c":"vyhodnocení"},{"t":"Space"},{"t":"Str","c":"heuristiky"},{"t":"Space"},{"t":"Str","c":"(black"},{"t":"Space"},{"t":"Str","c":"box"},{"t":"SoftBreak"},{"t":"Str","c":"fáze)."},{"t":"Space"},{"t":"Str","c":"Prosím"},{"t":"Space"},{"t":"Str","c":"používejte"},{"t":"Space"},{"t":"Str","c":"definované"},{"t":"Space"},{"t":"Str","c":"formáty"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"instance"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"řešení,"},{"t":"Space"},{"t":"Str","c":"usnadníte"},{"t":"Space"},{"t":"Str","c":"tak"},{"t":"SoftBreak"},{"t":"Str","c":"lepší"},{"t":"Space"},{"t":"Str","c":"přizpůsobení"},{"t":"Space"},{"t":"Str","c":"zkušebních"},{"t":"Space"},{"t":"Str","c":"instancí."}]},{"t":"Header","c":[3,["hodnocení",[],[]],[{"t":"Str","c":"Hodnocení"}]]},{"t":"Para","c":[{"t":"Str","c":"Tato"},{"t":"Space"},{"t":"Str","c":"úloha"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"součástí"},{"t":"Space"},{"t":"Str","c":"hodnocení"},{"t":"Space"},{"t":"Str","c":"zkoušky"},{"t":"Space"},{"t":"Str","c":"-"},{"t":"Space"},{"t":"Str","c":"až"},{"t":"Space"},{"t":"Str","c":"30"},{"t":"Space"},{"t":"Str","c":"bodů"},{"t":"Space"},{"t":"Str","c":"ze"},{"t":"Space"},{"t":"Str","c":"100"},{"t":"Space"},{"t":"Str","c":"za"},{"t":"Space"},{"t":"Str","c":"předmět"},{"t":"Space"},{"t":"Str","c":"celkem."},{"t":"SoftBreak"},{"t":"Str","c":"Práce"},{"t":"Space"},{"t":"Str","c":"by"},{"t":"Space"},{"t":"Str","c":"měla"},{"t":"Space"},{"t":"Str","c":"doložit"},{"t":"Space"},{"t":"Str","c":"Vaši"},{"t":"Space"},{"t":"Str","c":"schopnost"},{"t":"Space"},{"t":"Str","c":"nasadit"},{"t":"Space"},{"t":"Str","c":"pokročilé"},{"t":"Space"},{"t":"Str","c":"heuristiky"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"netriviální"},{"t":"SoftBreak"},{"t":"Str","c":"optimalizační"},{"t":"Space"},{"t":"Str","c":"problém."},{"t":"Space"},{"t":"Str","c":"Nasazená"},{"t":"Space"},{"t":"Str","c":"heuristika"},{"t":"Space"},{"t":"Str","c":"by"},{"t":"Space"},{"t":"Str","c":"měla"},{"t":"Space"},{"t":"Str","c":"zpracovávat"},{"t":"Space"},{"t":"Str","c":"rozumně"},{"t":"Space"},{"t":"Str","c":"široké"},{"t":"SoftBreak"},{"t":"Str","c":"spektrum"},{"t":"Space"},{"t":"Str","c":"instancí"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"rozumnou"},{"t":"Space"},{"t":"Str","c":"chybou."},{"t":"Space"},{"t":"Str","c":"Co"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Quoted","c":[{"t":"DoubleQuote"},[{"t":"Str","c":"rozumně"}]]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"bychom"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"měli"},{"t":"Space"},{"t":"Str","c":"dočíst"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"SoftBreak"},{"t":"Str","c":"závěru"},{"t":"Space"},{"t":"Str","c":"Vaší"},{"t":"Space"},{"t":"Str","c":"práce."}]},{"t":"Para","c":[{"t":"Str","c":"V"},{"t":"Space"},{"t":"Str","c":"hodnocení"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"kladen"},{"t":"Space"},{"t":"Str","c":"důraz"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"racionální"},{"t":"Space"},{"t":"Str","c":"postup"},{"t":"Space"},{"t":"Str","c":"celé"},{"t":"Space"},{"t":"Str","c":"práce."},{"t":"Space"},{"t":"Str","c":"Pokud"},{"t":"Space"},{"t":"Str","c":"postup"},{"t":"SoftBreak"},{"t":"Str","c":"vyhovuje,"},{"t":"Space"},{"t":"Str","c":"méně"},{"t":"Space"},{"t":"Str","c":"uspokojivé"},{"t":"Space"},{"t":"Str","c":"výsledky"},{"t":"Space"},{"t":"Str","c":"heuristiky"},{"t":"Space"},{"t":"Str","c":"příliš"},{"t":"Space"},{"t":"Str","c":"nevadí,"},{"t":"Space"},{"t":"Str","c":"vzhledem"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"tomu,"},{"t":"Space"},{"t":"Str","c":"že"},{"t":"SoftBreak"},{"t":"Str","c":"řešený"},{"t":"Space"},{"t":"Str","c":"problém"},{"t":"Space"},{"t":"Str","c":"(jak"},{"t":"Space"},{"t":"Str","c":"jistě"},{"t":"Space"},{"t":"Str","c":"víte)"},{"t":"Space"},{"t":"Str","c":"patří"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"nejtěžším"},{"t":"Space"},{"t":"Str","c":"ve"},{"t":"Space"},{"t":"Str","c":"třídě"},{"t":"Space"},{"t":"Str","c":"NPO."},{"t":"Space"},{"t":"Str","c":"Proto"},{"t":"SoftBreak"},{"t":"Str","c":"potřebujeme"},{"t":"Space"},{"t":"Str","c":"znát"},{"t":"Space"},{"t":"Str","c":"jak"},{"t":"Space"},{"t":"Str","c":"pracovní"},{"t":"Space"},{"t":"Str","c":"postup"},{"t":"Space"},{"t":"Str","c":"ve"},{"t":"Space"},{"t":"Str","c":"white"},{"t":"Space"},{"t":"Str","c":"box"},{"t":"Space"},{"t":"Str","c":"fázi,"},{"t":"Space"},{"t":"Str","c":"tak"},{"t":"Space"},{"t":"Str","c":"výsledky"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"závěr"},{"t":"SoftBreak"},{"t":"Str","c":"black"},{"t":"Space"},{"t":"Str","c":"box"},{"t":"Space"},{"t":"Str","c":"fáze."}]},{"t":"Para","c":[{"t":"Str","c":"Hodnocení"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"rozděleno"},{"t":"Space"},{"t":"Str","c":"do"},{"t":"Space"},{"t":"Str","c":"tří"},{"t":"Space"},{"t":"Str","c":"kategorií:"}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"Algoritmus"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"implementace"},{"t":"Space"},{"t":"Str","c":"(5"},{"t":"Space"},{"t":"Str","c":"pt.)"}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"Byly"},{"t":"Space"},{"t":"Str","c":"použity"},{"t":"Space"},{"t":"Str","c":"techniky"},{"t":"Space"},{"t":"Str","c":"(algoritmy,"},{"t":"Space"},{"t":"Str","c":"datové"},{"t":"Space"},{"t":"Str","c":"struktury)"},{"t":"Space"},{"t":"Str","c":"adekvátní"},{"t":"Space"},{"t":"Str","c":"problému?"}]}],[{"t":"Plain","c":[{"t":"Str","c":"Byly"},{"t":"Space"},{"t":"Str","c":"použity"},{"t":"Space"},{"t":"Str","c":"pokročilé"},{"t":"Space"},{"t":"Str","c":"techniky?"},{"t":"Space"},{"t":"Str","c":"(např."},{"t":"Space"},{"t":"Str","c":"adaptační"},{"t":"Space"},{"t":"Str","c":"mechanismy)"}]}],[{"t":"Plain","c":[{"t":"Str","c":"Jsou"},{"t":"Space"},{"t":"Str","c":"některé"},{"t":"Space"},{"t":"Str","c":"postupy"},{"t":"Space"},{"t":"Str","c":"originálním"},{"t":"Space"},{"t":"Str","c":"přínosem"},{"t":"Space"},{"t":"Str","c":"autora?"}]}]]}],[{"t":"Plain","c":[{"t":"Str","c":"Nastavení"},{"t":"Space"},{"t":"Str","c":"heuristiky"},{"t":"Space"},{"t":"Str","c":"(13"},{"t":"Space"},{"t":"Str","c":"pt.)"}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"Jakou"},{"t":"Space"},{"t":"Str","c":"metodou"},{"t":"Space"},{"t":"Str","c":"autor"},{"t":"Space"},{"t":"Str","c":"hledal"},{"t":"Space"},{"t":"Str","c":"nastavení"},{"t":"Space"},{"t":"Str","c":"parametrů?"}]}],[{"t":"Plain","c":[{"t":"Str","c":"Jak"},{"t":"Space"},{"t":"Str","c":"byly"},{"t":"Space"},{"t":"Str","c":"plánovány"},{"t":"Space"},{"t":"Str","c":"experimenty"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"jaké"},{"t":"Space"},{"t":"Str","c":"byly"},{"t":"Space"},{"t":"Str","c":"jejich"},{"t":"Space"},{"t":"Str","c":"otázky?"}]}],[{"t":"Plain","c":[{"t":"Str","c":"Jestliže"},{"t":"Space"},{"t":"Str","c":"byl"},{"t":"Space"},{"t":"Str","c":"proveden"},{"t":"Space"},{"t":"Str","c":"faktorový"},{"t":"Space"},{"t":"Str","c":"návrh"},{"t":"Space"},{"t":"Str","c":"(což"},{"t":"Space"},{"t":"Str","c":"příliš"},{"t":"Space"},{"t":"Str","c":"nedoporučujeme),"},{"t":"Space"},{"t":"Str","c":"jak"},{"t":"SoftBreak"},{"t":"Str","c":"kompletní"},{"t":"Space"},{"t":"Str","c":"byl"},{"t":"Space"},{"t":"Str","c":"(změna"},{"t":"Space"},{"t":"Str","c":"vždy"},{"t":"Space"},{"t":"Str","c":"jen"},{"t":"Space"},{"t":"Str","c":"jednoho"},{"t":"Space"},{"t":"Str","c":"parametru"},{"t":"Space"},{"t":"Str","c":"nestačí)?"}]}],[{"t":"Plain","c":[{"t":"Str","c":"Na"},{"t":"Space"},{"t":"Str","c":"jak"},{"t":"Space"},{"t":"Str","c":"velkých"},{"t":"Space"},{"t":"Str","c":"instancích"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"heuristika"},{"t":"Space"},{"t":"Str","c":"schopna"},{"t":"Space"},{"t":"Str","c":"pracovat?"}]}],[{"t":"Plain","c":[{"t":"Str","c":"Jestliže"},{"t":"Space"},{"t":"Str","c":"práce"},{"t":"Space"},{"t":"Str","c":"heuristiky"},{"t":"Space"},{"t":"Str","c":"není"},{"t":"Space"},{"t":"Str","c":"uspokojivá,"},{"t":"Space"},{"t":"Str","c":"jak"},{"t":"Space"},{"t":"Str","c":"systematické"},{"t":"Space"},{"t":"Str","c":"byly"},{"t":"Space"},{"t":"Str","c":"snahy"},{"t":"SoftBreak"},{"t":"Str","c":"autora"},{"t":"Space"},{"t":"Str","c":"zjednat"},{"t":"Space"},{"t":"Str","c":"nápravu?"}]}]]}],[{"t":"Plain","c":[{"t":"Str","c":"Experimentální"},{"t":"Space"},{"t":"Str","c":"vyhodnocení"},{"t":"Space"},{"t":"Str","c":"heuristiky"},{"t":"Space"},{"t":"Str","c":"(12"},{"t":"Space"},{"t":"Str","c":"pt.)"}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"Jak"},{"t":"Space"},{"t":"Str","c":"dalece"},{"t":"Space"},{"t":"Str","c":"jsou"},{"t":"Space"},{"t":"Str","c":"závěry"},{"t":"Space"},{"t":"Str","c":"vyhodnocení"},{"t":"Space"},{"t":"Str","c":"doloženy"},{"t":"Space"},{"t":"Str","c":"experimentálně?"}]}],[{"t":"Plain","c":[{"t":"Str","c":"Je"},{"t":"Space"},{"t":"Str","c":"interpretace"},{"t":"Space"},{"t":"Str","c":"experimentů"},{"t":"Space"},{"t":"Str","c":"přesvědčivá?"}]}],[{"t":"Plain","c":[{"t":"Str","c":"Pokud"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"algoritmus"},{"t":"Space"},{"t":"Str","c":"randomizovaný,"},{"t":"Space"},{"t":"Str","c":"byla"},{"t":"Space"},{"t":"Str","c":"tato"},{"t":"Space"},{"t":"Str","c":"skutečnost"},{"t":"Space"},{"t":"Str","c":"vzata"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"úvahu"},{"t":"Space"},{"t":"Str","c":"při"},{"t":"SoftBreak"},{"t":"Str","c":"plánování"},{"t":"Space"},{"t":"Str","c":"experimentů?"}]}],[{"t":"Plain","c":[{"t":"Str","c":"Je"},{"t":"Space"},{"t":"Str","c":"možno"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"experimentů"},{"t":"Space"},{"t":"Str","c":"usoudit"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"iterativní"},{"t":"Space"},{"t":"Str","c":"sílu"},{"t":"Space"},{"t":"Str","c":"heuristiky?"}]}],[{"t":"Plain","c":[{"t":"Str","c":"Byly"},{"t":"Space"},{"t":"Str","c":"nestandardní"},{"t":"Space"},{"t":"Str","c":"postupy"},{"t":"Space"},{"t":"Str","c":"experimentálně"},{"t":"Space"},{"t":"Str","c":"porovnány"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"standardními?"}]}],[{"t":"Plain","c":[{"t":"Str","c":"Jsou"},{"t":"Space"},{"t":"Str","c":"výsledky"},{"t":"Space"},{"t":"Str","c":"experimentů"},{"t":"Space"},{"t":"Str","c":"srozumitelně"},{"t":"Space"},{"t":"Str","c":"prezentovány"},{"t":"Space"},{"t":"Str","c":"(grafy,"},{"t":"Space"},{"t":"Str","c":"tabulky,"},{"t":"SoftBreak"},{"t":"Str","c":"statistické"},{"t":"Space"},{"t":"Str","c":"metody)?"}]}]]}]]},{"t":"Para","c":[{"t":"Str","c":"Práce"},{"t":"Space"},{"t":"Str","c":"bez"},{"t":"Space"},{"t":"Str","c":"experimentální"},{"t":"Space"},{"t":"Str","c":"části"},{"t":"Space"},{"t":"Str","c":"nemůže"},{"t":"Space"},{"t":"Str","c":"být"},{"t":"Space"},{"t":"Str","c":"přijata"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"hodnocení."}]},{"t":"Header","c":[3,["instance",[],[]],[{"t":"Str","c":"Instance"}]]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"SAT"},{"t":"Space"},{"t":"Str","c":"instance"},{"t":"Space"},{"t":"Str","c":"lze"},{"t":"Space"},{"t":"Str","c":"generovat"},{"t":"Space"},{"t":"Str","c":"náhodně."},{"t":"Space"},{"t":"Str","c":"Klíčovým"},{"t":"Space"},{"t":"Str","c":"parametrem"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"poměr"},{"t":"Space"},{"t":"Str","c":"počtu"},{"t":"SoftBreak"},{"t":"Str","c":"klauzulí"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"počtu"},{"t":"Space"},{"t":"Str","c":"proměnných"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"3-SAT"},{"t":"Space"},{"t":"Str","c":"(viz"},{"t":"Space"},{"t":"Str","c":"ai-phys1.pdf"},{"t":"Space"},{"t":"Str","c":"-"},{"t":"Space"},{"t":"Str","c":"doporučujeme)."},{"t":"Space"},{"t":"Str","c":"Váhy"},{"t":"SoftBreak"},{"t":"Str","c":"lze"},{"t":"Space"},{"t":"Str","c":"generovat"},{"t":"Space"},{"t":"Str","c":"náhodně."},{"t":"Space"},{"t":"Str","c":"V"},{"t":"Space"},{"t":"Str","c":"takovém"},{"t":"Space"},{"t":"Str","c":"případě"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"vhodné"},{"t":"Space"},{"t":"Str","c":"prokázat,"},{"t":"Space"},{"t":"Str","c":"že"},{"t":"Space"},{"t":"Str","c":"instance,"},{"t":"Space"},{"t":"Str","c":"kde"},{"t":"SoftBreak"},{"t":"Str","c":"všechny"},{"t":"Space"},{"t":"Str","c":"váhy"},{"t":"Space"},{"t":"Str","c":"byly"},{"t":"Space"},{"t":"Str","c":"vynásobeny"},{"t":"Space"},{"t":"Str","c":"velkým"},{"t":"Space"},{"t":"Str","c":"číslem,"},{"t":"Space"},{"t":"Str","c":"jsou"},{"t":"Space"},{"t":"Str","c":"zpracovávány"},{"t":"Space"},{"t":"Str","c":"stejně"},{"t":"Space"},{"t":"Str","c":"úspěšně."}]}],[{"t":"Plain","c":[{"t":"Str","c":"Lze"},{"t":"Space"},{"t":"Str","c":"vyjít"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"DIMACS"}],["http://www.cs.ubc.ca/~hoos/SATLIB/benchm.html",""]]},{"t":"Space"},{"t":"Str","c":"SAT"},{"t":"SoftBreak"},{"t":"Str","c":"instancí."},{"t":"Space"},{"t":"Str","c":"Nemají"},{"t":"Space"},{"t":"Str","c":"váhy,"},{"t":"Space"},{"t":"Str","c":"jejich"},{"t":"Space"},{"t":"Str","c":"generování"},{"t":"Space"},{"t":"Str","c":"viz"},{"t":"Space"},{"t":"Str","c":"výše.Tyto"},{"t":"Space"},{"t":"Str","c":"instance"},{"t":"Space"},{"t":"Str","c":"jsou"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"hraně"},{"t":"SoftBreak"},{"t":"Str","c":"fázového"},{"t":"Space"},{"t":"Str","c":"přechodu,"},{"t":"Space"},{"t":"Str","c":"jsou"},{"t":"Space"},{"t":"Str","c":"tedy"},{"t":"Space"},{"t":"Str","c":"značně"},{"t":"Space"},{"t":"Str","c":"obtížné."},{"t":"Space"},{"t":"Str","c":"Obtížnost"},{"t":"Space"},{"t":"Str","c":"můžete"},{"t":"Space"},{"t":"Str","c":"snížit"},{"t":"Space"},{"t":"Str","c":"zkrácením"},{"t":"SoftBreak"},{"t":"Str","c":"(vynechání"},{"t":"Space"},{"t":"Str","c":"klauzulí)."}]}],[{"t":"Plain","c":[{"t":"Str","c":"Připravili"},{"t":"Space"},{"t":"Str","c":"jsme"},{"t":"Space"},{"t":"Str","c":"sady"},{"t":"Space"},{"t":"Str","c":"zkušebních"},{"t":"Space"},{"t":"Str","c":"instancí."},{"t":"Space"},{"t":"Str","c":"Vycházejí"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"instancí"},{"t":"Space"},{"t":"Str","c":"SATLIB,"},{"t":"Space"},{"t":"Str","c":"jsou"},{"t":"SoftBreak"},{"t":"Str","c":"ale"},{"t":"Space"},{"t":"Str","c":"zkráceny"},{"t":"Space"},{"t":"Str","c":"tak,"},{"t":"Space"},{"t":"Str","c":"aby"},{"t":"Space"},{"t":"Str","c":"měly"},{"t":"Space"},{"t":"Str","c":"co"},{"t":"Space"},{"t":"Str","c":"nejvíce"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"(počty"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"přikládáme)."},{"t":"Space"},{"t":"Str","c":"Váhy"},{"t":"SoftBreak"},{"t":"Str","c":"nejsou"},{"t":"Space"},{"t":"Str","c":"náhodné,"},{"t":"Space"},{"t":"Str","c":"mají"},{"t":"Space"},{"t":"Str","c":"ale"},{"t":"Space"},{"t":"Str","c":"náhodnou"},{"t":"Space"},{"t":"Str","c":"složku."},{"t":"Space"},{"t":"Str","c":"Za"},{"t":"Space"},{"t":"Str","c":"upozornění"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"chyby,"},{"t":"SoftBreak"},{"t":"Str","c":"nekonzistence"},{"t":"Space"},{"t":"Str","c":"atd."},{"t":"Space"},{"t":"Str","c":"budeme"},{"t":"Space"},{"t":"Str","c":"vděčni."}]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Code","c":[["",[],[]],"wuf-M"]},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"wuf-N"]},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"Váhy"},{"t":"Space"},{"t":"Str","c":"by"},{"t":"Space"},{"t":"Str","c":"měly"},{"t":"Space"},{"t":"Str","c":"podporovat"},{"t":"Space"},{"t":"Str","c":"nalezení"},{"t":"Space"},{"t":"Str","c":"řešení."},{"t":"Space"},{"t":"Str","c":"Heuristika,"},{"t":"SoftBreak"},{"t":"Str","c":"která"},{"t":"Space"},{"t":"Str","c":"řeší"},{"t":"Space"},{"t":"Str","c":"určitou"},{"t":"Space"},{"t":"Str","c":"instanci"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"sadě"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"wuf-M"]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"by"},{"t":"Space"},{"t":"Str","c":"měla"},{"t":"Space"},{"t":"Str","c":"řešit"},{"t":"Space"},{"t":"Str","c":"odpovídající"},{"t":"SoftBreak"},{"t":"Str","c":"instanci"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"sadě"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"wuf-N"]},{"t":"Space"},{"t":"Str","c":"stejně"},{"t":"Space"},{"t":"Str","c":"snadno."},{"t":"Space"},{"t":"Str","c":"Vzhledem"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"počtu"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"jednotlivých"},{"t":"SoftBreak"},{"t":"Str","c":"instací"},{"t":"Space"},{"t":"Str","c":"(až"},{"t":"Space"},{"t":"Str","c":"108),"},{"t":"Space"},{"t":"Str","c":"není"},{"t":"Space"},{"t":"Str","c":"možné"},{"t":"Space"},{"t":"Str","c":"efektivně"},{"t":"Space"},{"t":"Str","c":"najít"},{"t":"Space"},{"t":"Str","c":"optimální"},{"t":"Space"},{"t":"Str","c":"řešení"}]}],[{"t":"Plain","c":[{"t":"Code","c":[["",[],[]],"wuf-Q"]},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"wuf-R"]},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"Jako"},{"t":"Space"},{"t":"Str","c":"výše,"},{"t":"Space"},{"t":"Str","c":"váhy"},{"t":"Space"},{"t":"Str","c":"ale"},{"t":"Space"},{"t":"Str","c":"vytvářejí"},{"t":"Space"},{"t":"Str","c":"(mírně)"},{"t":"Space"},{"t":"Str","c":"zavádějící"},{"t":"Space"},{"t":"Str","c":"úlohu."}]}],[{"t":"Plain","c":[{"t":"Code","c":[["",[],[]],"wuf-A"]},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"dílny"},{"t":"Space"},{"t":"Str","c":"prof."},{"t":"Space"},{"t":"Str","c":"Zlomyslného."},{"t":"Space"},{"t":"Str","c":"Instance"},{"t":"Space"},{"t":"Str","c":"vycházejí"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"nezkrácených"},{"t":"Space"},{"t":"Str","c":"(nebo"},{"t":"SoftBreak"},{"t":"Str","c":"jen"},{"t":"Space"},{"t":"Str","c":"mírně"},{"t":"Space"},{"t":"Str","c":"zkrácených)"},{"t":"Space"},{"t":"Str","c":"instancí,"},{"t":"Space"},{"t":"Str","c":"takže"},{"t":"Space"},{"t":"Str","c":"jsou"},{"t":"Space"},{"t":"Str","c":"obtížné."},{"t":"Space"},{"t":"Str","c":"Váhy"},{"t":"Space"},{"t":"Str","c":"vytvářejí"},{"t":"SoftBreak"},{"t":"Str","c":"zavádějící"},{"t":"Space"},{"t":"Str","c":"úlohu."},{"t":"Space"},{"t":"Str","c":"Nicméně,"},{"t":"Space"},{"t":"Str","c":"malý"},{"t":"Space"},{"t":"Str","c":"počet"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"dovoluje"},{"t":"Space"},{"t":"Str","c":"ve"},{"t":"Space"},{"t":"Str","c":"většině"},{"t":"Space"},{"t":"Str","c":"případů"},{"t":"SoftBreak"},{"t":"Str","c":"uvést"},{"t":"Space"},{"t":"Str","c":"optimální"},{"t":"Space"},{"t":"Str","c":"řešení."}]}]]}]]},{"t":"Header","c":[2,["řešení",[],[]],[{"t":"Str","c":"Řešení"}]]},{"t":"Para","c":[{"t":"Str","c":"Úkoly"},{"t":"Space"},{"t":"Str","c":"předmětu"},{"t":"Space"},{"t":"Str","c":"NI-KOP"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"rozhodl"},{"t":"Space"},{"t":"Str","c":"implementovat"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"jazyce"},{"t":"Space"},{"t":"Str","c":"Rust"},{"t":"Space"},{"t":"Str","c":"za"},{"t":"Space"},{"t":"Str","c":"pomoci"},{"t":"SoftBreak"},{"t":"Str","c":"nástrojů"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"literate"},{"t":"Space"},{"t":"Str","c":"programming"}]},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"přístup"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"psaní"},{"t":"Space"},{"t":"Str","c":"zdrojového"},{"t":"Space"},{"t":"Str","c":"kódu,"},{"t":"Space"},{"t":"Str","c":"který"},{"t":"SoftBreak"},{"t":"Str","c":"upřednostňuje"},{"t":"Space"},{"t":"Str","c":"lidsky"},{"t":"Space"},{"t":"Str","c":"čitelný"},{"t":"Space"},{"t":"Str","c":"popis"},{"t":"Space"},{"t":"Str","c":"před"},{"t":"Space"},{"t":"Str","c":"seznamem"},{"t":"Space"},{"t":"Str","c":"příkazů"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"počítač."},{"t":"Space"},{"t":"Str","c":"Tento"},{"t":"SoftBreak"},{"t":"Str","c":"dokument"},{"t":"Space"},{"t":"Str","c":"obsahuje"},{"t":"Space"},{"t":"Str","c":"veškerý"},{"t":"Space"},{"t":"Str","c":"zdrojový"},{"t":"Space"},{"t":"Str","c":"kód"},{"t":"Space"},{"t":"Str","c":"nutný"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"reprodukci"},{"t":"Space"},{"t":"Str","c":"mojí"},{"t":"Space"},{"t":"Str","c":"práce."},{"t":"Space"},{"t":"Str","c":"Výsledek"},{"t":"SoftBreak"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"dostupný"},{"t":"Space"},{"t":"Str","c":"online"},{"t":"Space"},{"t":"Str","c":"jako"},{"t":"Space"},{"t":"Str","c":"statická"},{"t":"Space"},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"webová"},{"t":"Space"},{"t":"Str","c":"stránka"}],["http://viluon.me/ni-kop/",""]]},{"t":"Space"},{"t":"Str","c":"a"},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"ke"},{"t":"Space"},{"t":"Str","c":"stažení"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"PDF"}],["http://viluon.me/ni-kop/report.pdf",""]]},{"t":"Str","c":"."}]},{"t":"Header","c":[2,["instrukce-k-sestavení-programu",[],[]],[{"t":"Str","c":"Instrukce"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"sestavení"},{"t":"Space"},{"t":"Str","c":"programu"}]]},{"t":"Para","c":[{"t":"Str","c":"Program"},{"t":"Space"},{"t":"Str","c":"využívá"},{"t":"Space"},{"t":"Str","c":"standardních"},{"t":"Space"},{"t":"Str","c":"nástrojů"},{"t":"Space"},{"t":"Str","c":"jazyka"},{"t":"Space"},{"t":"Str","c":"Rust."},{"t":"Space"},{"t":"Str","c":"O"},{"t":"Space"},{"t":"Str","c":"sestavení"},{"t":"Space"},{"t":"Str","c":"stačí"},{"t":"Space"},{"t":"Str","c":"požádat"},{"t":"SoftBreak"},{"t":"Code","c":[["",[],[]],"cargo"]},{"t":"Str","c":"."}]},{"t":"Div","c":[["",["doctest"],[["status","SUCCESS"]]],[{"t":"Div","c":[["",["doctestInput"],[]],[{"t":"CodeBlock","c":[["build-instructions",["zsh","eval","bootstrap-fold"],[]],"cd solver\ncargo build --release --color always"]}]]},{"t":"Div","c":[["",["doctestResult"],[]],[{"t":"Div","c":[["",["programOutput"],[]],[{"t":"RawBlock","c":["html","<pre class=\"ansi2html-content\"><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">    Updating</span> crates.io index\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\"> Downloading</span> crates ...\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> aho-corasick v0.7.18\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> log v0.4.14\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> permutation v0.2.5\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> env_logger v0.8.4\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> tap v1.0.1\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> quickcheck v1.0.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> proc-macro2 v1.0.29\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> radium v0.6.2\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> wyz v0.4.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> syn v1.0.80\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> libc v0.2.103\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> arrayvec v0.7.2\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> anyhow v1.0.44\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> quickcheck_macros v1.0.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> funty v1.2.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">  Downloaded</span> bitvec v0.22.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> libc v0.2.103\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> cfg-if v1.0.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> memchr v2.4.1\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> proc-macro2 v1.0.29\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> unicode-xid v0.2.2\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> log v0.4.14\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> radium v0.6.2\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> ppv-lite86 v0.2.15\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> syn v1.0.80\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> regex-syntax v0.6.25\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> anyhow v1.0.44\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> tap v1.0.1\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> funty v1.2.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> permutation v0.2.5\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> arrayvec v0.7.2\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> wyz v0.4.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> aho-corasick v0.7.18\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> getrandom v0.2.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> quote v1.0.10\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> bitvec v0.22.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> rand_core v0.6.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> regex v1.5.4\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> rand_chacha v0.3.1\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> env_logger v0.8.4\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> quickcheck_macros v1.0.0\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> rand v0.8.4\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> quickcheck v1.0.3\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">   Compiling</span> solver v0.1.0 (/__w/ni-kop/ni-kop/5-weighted-sat/solver)\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: unused imports: `BTreeMap`, `cmp::max`, `self`</span>\r\n <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/lib.rs:4:16\r\n  <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">4</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>use std::{cmp, cmp::max,\r\n  <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>               <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^^^^^</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">...</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">7</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>    io::{BufRead, BufReader, self},\r\n  <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>                             <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">8</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>    collections::{BTreeMap, HashMap},\r\n  <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>                  <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^^^^^</span>\r\n  <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n  <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">= </span><span style=\"font-weight: bold\">note</span>: `#[warn(unused_imports)]` on by default\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: unused import: `BitVec`</span>\r\n  <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/lib.rs:13:31\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">13</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>use bitvec::prelude::{BitArr, BitVec};\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>                              <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^^^</span>\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: associated function is never used: `with`</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/lib.rs:114:8\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">114</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>    fn with(mut self, i: usize) -&gt; Solution&lt;'a&gt; {\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>       <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^</span>\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">= </span><span style=\"font-weight: bold\">note</span>: `#[warn(dead_code)]` on by default\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: associated function is never used: `without`</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/lib.rs:118:8\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">118</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>    fn without(mut self, i: usize) -&gt; Solution&lt;'a&gt; {\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>       <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^^^^</span>\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: associated function is never used: `invert`</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/lib.rs:122:8\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">122</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>    fn invert(mut self) -&gt; Solution&lt;'a&gt; {\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>       <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^^^</span>\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: associated function is never used: `set`</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/lib.rs:129:8\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">129</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>    fn set(&amp;mut self, i: usize, set: bool) -&gt; Solution&lt;'a&gt; {\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>       <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^</span>\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: associated function is never used: `default`</span>\r\n   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/lib.rs:139:8\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">139</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>    fn default(inst: &amp;'a Instance) -&gt; Solution&lt;'a&gt; {\r\n    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>       <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^^^^</span>\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">:</span> `solver` (lib) generated 7 warnings\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">: unused import: `anyhow`</span>\r\n <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">--&gt; </span>src/bin/main.rs:8:22\r\n  <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">8</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>use anyhow::{Result, anyhow};\r\n  <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">| </span>                     <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">^^^^^^</span>\r\n  <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">|</span>\r\n  <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #5c5cff\">= </span><span style=\"font-weight: bold\">note</span>: `#[warn(unused_imports)]` on by default\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #aa5500\">warning</span><span style=\"font-weight: bold\">:</span> `solver` (bin \"main\") generated 1 warning\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #00aa00\">    Finished</span> release [optimized + debuginfo] target(s) in 1m 38s\r\n</pre>"]}]]}]]}]]},{"t":"Header","c":[2,["benchmarking",[],[]],[{"t":"Str","c":"Benchmarking"}]]},{"t":"Para","c":[{"t":"Str","c":"Stejně"},{"t":"Space"},{"t":"Str","c":"jako"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"předchozí"},{"t":"Space"},{"t":"Str","c":"úloze"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"ani"},{"t":"Space"},{"t":"Str","c":"tentokrát"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"měřením"},{"t":"Space"},{"t":"Str","c":"výkonu"},{"t":"Space"},{"t":"Str","c":"nespoléhal"},{"t":"SoftBreak"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"existující"},{"t":"Space"},{"t":"Str","c":"Rust"},{"t":"Space"},{"t":"Str","c":"knihovny"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"namísto"},{"t":"Space"},{"t":"Str","c":"toho"},{"t":"Space"},{"t":"Str","c":"provedl"},{"t":"Space"},{"t":"Str","c":"měření"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"Pythonu."}]},{"t":"Div","c":[["",["doctest"],[["status","SUCCESS"]]],[{"t":"Div","c":[["",["doctestInput"],[]],[{"t":"CodeBlock","c":[["machine-info",["zsh","eval","bootstrap-fold"],[]],"uname -a\n./cpufetch --logo-short --color ibm"]}]]},{"t":"Div","c":[["",["doctestResult"],[]],[{"t":"Div","c":[["",["programOutput"],[]],[{"t":"RawBlock","c":["html","<pre class=\"ansi2html-content\">Linux e852750c2f5b 5.11.0-1025-azure #27~20.04.1-Ubuntu SMP Fri Jan 7 15:02:06 UTC 2022 x86_64 GNU/Linux\r\n\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">                   .#################.          </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Name:</span>       <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Intel Xeon E5-2673 v</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">              .####                   ####.     </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Hypervisor:</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Microsoft Hyper-V</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">          .##                             ###   </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">uArch:</span>      <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Broadwell</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">       ##                          :##     ###  </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Technology:</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">14nm</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">    #                ##            :##      ##  </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Max Freq:</span>   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Unknown</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">  ##   ##  ######.   ####  ######  :##      ##  </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Cores:</span>      <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">2 cores</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\"> ##    ##  ##:  ##:  ##   ##   ### :##     ###  </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">AVX:</span>        <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">AVX,AVX2</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">##     ##  ##:  ##:  ##  :######## :##    ##    </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">FMA:</span>        <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">FMA3</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">##     ##  ##:  ##:  ##   ##.   .  :## ####     </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">L1i Size:</span>   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">32KB (64KB Total)</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">##      #  ##:  ##:  ####  #####:   ##          </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">L1d Size:</span>   <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">32KB (64KB Total)</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\"> ##                                             </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">L2 Size:</span>    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">256KB (512KB Total)</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">  ###.                         ..o####.         </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">L3 Size:</span>    <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">50MB</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">   ######oo...         ..oo#######              </span><span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #585858\">Peak Perf.:</span> <span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">Unknown</span>\r\n<span style=\"font-weight: bold\"></span><span style=\"font-weight: bold; color: #8700d7\">          o###############o                     </span>\r\n\r\n</pre>"]}]]}]]}]]},{"t":"Header","c":[3,["white-box-průzkum-chování-algoritmu",[],[]],[{"t":"Str","c":"White"},{"t":"Space"},{"t":"Str","c":"box:"},{"t":"Space"},{"t":"Str","c":"průzkum"},{"t":"Space"},{"t":"Str","c":"chování"},{"t":"Space"},{"t":"Str","c":"algoritmu"}]]},{"t":"Para","c":[{"t":"Str","c":"Průzkumná"},{"t":"Space"},{"t":"Str","c":"fáze"},{"t":"Space"},{"t":"Str","c":"práce"},{"t":"Space"},{"t":"Str","c":"má"},{"t":"Space"},{"t":"Str","c":"za"},{"t":"Space"},{"t":"Str","c":"cíl"},{"t":"Space"},{"t":"Str","c":"odhalit"},{"t":"Space"},{"t":"Str","c":"vztahy"},{"t":"Space"},{"t":"Str","c":"mezi"},{"t":"Space"},{"t":"Str","c":"jednotlivými"},{"t":"Space"},{"t":"Str","c":"parametry"},{"t":"SoftBreak"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"najít"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"ně"},{"t":"Space"},{"t":"Str","c":"vhodné"},{"t":"Space"},{"t":"Str","c":"hodnoty."},{"t":"Space"},{"t":"Str","c":"Výchozí"},{"t":"Space"},{"t":"Str","c":"parametry"},{"t":"Space"},{"t":"Str","c":"jsou"},{"t":"Space"},{"t":"Str","c":"vidět"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"kódu"},{"t":"SoftBreak"},{"t":"Str","c":"níže,"},{"t":"Space"},{"t":"Str","c":"modifikátor"},{"t":"Space"},{"t":"Str","c":"teploty"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Math","c":[{"t":"InlineMath"},"0.7"]},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"maximální"},{"t":"Space"},{"t":"Str","c":"počet"},{"t":"Space"},{"t":"Str","c":"iterací"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Math","c":[{"t":"InlineMath"},"8 000"]},{"t":"Str","c":"."},{"t":"SoftBreak"},{"t":"Str","c":"Modifikátor"},{"t":"Space"},{"t":"Str","c":"teploty"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"koeficient,"},{"t":"Space"},{"t":"Str","c":"kterým"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"násobí"},{"t":"Space"},{"t":"Str","c":"cena"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"heuristické"},{"t":"SoftBreak"},{"t":"Str","c":"metody"},{"t":"Space"},{"t":"Str","c":"greedy"},{"t":"Space"},{"t":"Str","c":"redux."},{"t":"Space"},{"t":"Str","c":"Toto"},{"t":"Space"},{"t":"Str","c":"číslo"},{"t":"Space"},{"t":"Str","c":"určuje"},{"t":"Space"},{"t":"Str","c":"počáteční"},{"t":"Space"},{"t":"Str","c":"teplotu."}]},{"t":"Para","c":[{"t":"Str","c":"Průzkum"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"provedl"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"prvních"},{"t":"Space"},{"t":"Str","c":"dvaceti"},{"t":"Space"},{"t":"Str","c":"instancích"},{"t":"Space"},{"t":"Str","c":"sady"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"NK35"]},{"t":"Str","c":"."}]},{"t":"CodeBlock","c":[["python-imports",["python","bootstrap-fold"],[]],"import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport scipy.stats as st\nimport json\nimport os\nimport time\nfrom pandas.core.tools.numeric import to_numeric\nfrom subprocess import run, PIPE\nfrom itertools import product, chain\nimport textwrap as tr"]},{"t":"Para","c":[{"t":"Str","c":"Skript"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"charts.py"]},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"zodpovědný"},{"t":"Space"},{"t":"Str","c":"nejen"},{"t":"Space"},{"t":"Str","c":"za"},{"t":"Space"},{"t":"Str","c":"vykreslování"},{"t":"Space"},{"t":"Str","c":"grafů,"},{"t":"Space"},{"t":"Str","c":"ale"},{"t":"Space"},{"t":"Str","c":"také"},{"t":"Space"},{"t":"Str","c":"za"},{"t":"SoftBreak"},{"t":"Str","c":"načítání"},{"t":"Space"},{"t":"Str","c":"vstupních"},{"t":"Space"},{"t":"Str","c":"instancí,"},{"t":"Space"},{"t":"Str","c":"spouštění"},{"t":"Space"},{"t":"Str","c":"řešiče"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"měření"},{"t":"Space"},{"t":"Str","c":"času,"},{"t":"Space"},{"t":"Str","c":"který"},{"t":"Space"},{"t":"Str","c":"problém"},{"t":"SoftBreak"},{"t":"Str","c":"řešiči"},{"t":"Space"},{"t":"Str","c":"zabere."}]},{"t":"Div","c":[["",["doctest"],[["status","ERROR"]]],[{"t":"Div","c":[["",["doctestInput"],[]],[{"t":"CodeBlock","c":[["",["python","eval"],[]],"<<python-imports>>\n\n<<performance-chart>>"]}]]},{"t":"Div","c":[["",["doctestError"],[]],[{"t":"Div","c":[["",["programOutput"],[]],[{"t":"RawBlock","c":["html","<pre class=\"ansi2html-content\"><span style=\"color: #aa0000\">---------------------------------------------------------------------------</span>\n<span style=\"color: #aa0000\">FileNotFoundError</span>                         Traceback (most recent call last)\n<span style=\"color: #00aa00\">/tmp/ipykernel_1641/1103332206.py</span> in <span style=\"color: #00aaaa\">&lt;module&gt;</span><span style=\"color: #0000aa\"></span>\n<span style=\"font-weight: bold; color: #00aa00\">    101</span> <span style=\"color: #aa0000\"># load the input</span><span style=\"color: #0000aa\"></span><span style=\"color: #0000aa\"></span><span style=\"color: #0000aa\"></span>\n<span style=\"font-weight: bold; color: #00aa00\">    102</span> input <span style=\"color: #0000aa\">=</span> <span style=\"color: #00aa00\">None</span><span style=\"color: #0000aa\"></span><span style=\"color: #0000aa\"></span>\n<span style=\"color: #00aa00\">--&gt; 103</span><span style=\"color: #aa0000\"> </span><span style=\"color: #00aa00\">with</span> open<span style=\"color: #0000aa\">(</span><span style=\"color: #0000aa\">\"solver/ds/NK35_inst.dat\"</span><span style=\"color: #0000aa\">,</span> <span style=\"color: #0000aa\">\"r\"</span><span style=\"color: #0000aa\">)</span> <span style=\"color: #00aa00\">as</span> f<span style=\"color: #0000aa\">:</span><span style=\"color: #0000aa\"></span><span style=\"color: #0000aa\"></span>\n<span style=\"font-weight: bold; color: #00aa00\">    104</span>     input <span style=\"color: #0000aa\">=</span> f<span style=\"color: #0000aa\">.</span>read<span style=\"color: #0000aa\">(</span><span style=\"color: #0000aa\">)</span><span style=\"color: #0000aa\"></span><span style=\"color: #0000aa\"></span>\n<span style=\"font-weight: bold; color: #00aa00\">    105</span> <span style=\"color: #0000aa\"></span>\n\n<span style=\"color: #aa0000\">FileNotFoundError</span>: [Errno 2] No such file or directory: 'solver/ds/NK35_inst.dat'</pre>"]}]]}]]}]]},{"t":"Para","c":[{"t":"Str","c":"Výkon"},{"t":"Space"},{"t":"Str","c":"každého"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"instancích"},{"t":"Space"},{"t":"Str","c":"měřen"},{"t":"Space"},{"t":"Str","c":"jednotlivě,"},{"t":"Space"},{"t":"Str","c":"tj."},{"t":"Space"},{"t":"Str","c":"vstupní"},{"t":"Space"},{"t":"Str","c":"soubor"},{"t":"SoftBreak"},{"t":"Str","c":"rozdělíme"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"řádky"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"řešiči"},{"t":"Space"},{"t":"Str","c":"předáme"},{"t":"Space"},{"t":"Str","c":"jedinou"},{"t":"Space"},{"t":"Str","c":"instanci."}]},{"t":"CodeBlock","c":[["performance-chart",["python","bootstrap-fold"],[]],"# plot the measurements\n\nfigsize = (14, 8)\n\nshow_progress = os.environ.get(\"JUPYTER\") == None\n\n# adapted from https://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console\ndef progress_bar(iteration, total, length = 60):\n    if not show_progress:\n        return\n    percent = (\"{0:.1f}\").format(100 * (iteration / float(total)))\n    filledLength = int(length * iteration // total)\n    bar = '=' * filledLength + ' ' * (length - filledLength)\n    print(f'\\r[{bar}] {percent}%', end = \"\\r\")\n    if iteration == total:\n        print()\n\ndef invoke_solver(input, cfg):\n    solver = run(\n        [\n            \"target/release/main\",\n            \"sa\",\n            str(cfg[\"max_iterations\"]),\n            str(cfg[\"scaling_factor\"]),\n            str(cfg[\"temperature_modifier\"]),\n            str(cfg[\"equilibrium_width\"]),\n        ],\n        stdout = PIPE,\n        input = input,\n        encoding = \"ascii\",\n        cwd = \"solver/\"\n    )\n    if solver.returncode != 0:\n        print(solver)\n        raise Exception(\"solver failed\")\n\n    lines = solver.stdout.split(\"\\n\")\n    [_, time, _] = lines[-3].split()\n    [cost, err]  = lines[-2].split()\n    cost_temperature_progression = [list(map(float, entry.split())) for entry in lines[:-4]]\n    return (float(time), float(cost), float(err), cost_temperature_progression)\n\ndef dataset(id, **kwargs):\n    params = dict({\n        # defaults\n        \"id\": [id],\n        \"precise_plot\": [True],\n        \"n_instances\": [15],\n        \"max_iterations\": [8000],\n        \"scaling_factor\": [0.996],\n        \"temperature_modifier\": [0.7],\n        \"equilibrium_width\": [10],\n    }, **kwargs)\n\n    key_order = [k for k in params]\n    cartesian = list(product(\n        *[params[key] for key in key_order]\n    ))\n\n    return {\n        key: [row[key_order.index(key)] for row in cartesian] for key in params\n    }\n\ndef merge_datasets(*dss):\n    return {\n        k: list(chain(*(ds[k] for ds in dss)))\n        for k in dss[0]\n    }\n\nconfigs = merge_datasets(dataset(\n    \"scaling_factor_exploration\",\n    scaling_factor = [0.85, 0.9, 0.95, 0.99, 0.992, 0.994, 0.996, 0.997, 0.998, 0.999],\n), dataset(\n    \"temperature modifier exploration\",\n    n_instances = [30],\n    temperature_modifier = [0.0001, 0.01, 1, 100, 10000],\n), dataset(\n    \"equilibrium width exploration\",\n    n_instances = [40],\n    precise_plot = [False],\n    equilibrium_width = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n), dataset(\n    \"black box\",\n    precise_plot = [False],\n    n_instances = [500],\n))\n\n# load the input\ninput = None\nwith open(\"solver/ds/NK35_inst.dat\", \"r\") as f:\n    input = f.read()\n\nerrors = []\ncfgs = [dict(zip(configs, v)) for v in zip(*configs.values())]\niteration = 0\ntotal = sum([cfg[\"n_instances\"] for cfg in cfgs])\n\nfor config in cfgs:\n    if show_progress:\n        print(end = \"\\033[2K\")\n    print(config)\n    progress_bar(iteration, total)\n\n    params = \"-\".join([str(v) for _, v in config.items()])\n    for instance in input.split(\"\\n\")[:config[\"n_instances\"]]:\n        id = instance.split()[0]\n        (t, cost, err, cost_temperature_progression) = invoke_solver(instance, config)\n        errors.append(dict(config, error = err))\n\n        if config[\"precise_plot\"]:\n            # plot the cost / temperature progression:\n            # we have two line graphs in a single plot\n            # the x axis is just the index in the list\n\n            plt.style.use(\"dark_background\")\n            fig, ax = plt.subplots(figsize = figsize)\n            for (i, label) in zip(range(42), [\"cost\", \"best cost\", \"temperature\"]):\n                ax.plot(\n                    range(len(cost_temperature_progression)),\n                    [entry[i] for entry in cost_temperature_progression],\n                    label = label,\n                )\n            ax.set_xlabel(\"iteration\")\n            ax.set_title(f\"instance {id} with error {err}\")\n            ax.legend(loc = \"lower right\")\n\n            plt.savefig(f\"docs/assets/whitebox-{params}-{id}.svg\")\n            plt.close()\n\n        iteration = iteration + 1\n        progress_bar(iteration, total)\n\ndata = pd.DataFrame(errors)\ndef ridgeline(id, title, col, filename, x_label = \"Chyba oproti optimálnímu řešení [%]\"):\n    df = data[data[\"id\"] == id]\n    series = df.groupby(col)[\"error\"].mean()\n    df[\"mean error\"] = df[col].map(series)\n\n    # plot the error distributions for each value of col\n    plt.style.use(\"default\")\n    sns.set_theme(style = \"white\", rc = {\"axes.facecolor\": (0, 0, 0, 0)})\n    pal = sns.color_palette(\"crest\", n_colors = len(df[col].unique()))\n\n    # set up the layout\n    g = sns.FacetGrid(\n        df,\n        row = col,\n        hue = \"mean error\",\n        palette = pal,\n        height = 0.75,\n        aspect = 15,\n    )\n    plt.xlim(-0.1, 1.0)\n    # distributions\n    g.map(sns.kdeplot, \"error\", clip = (-0.1, 1.0), bw_adjust = 1, clip_on = False, fill = True, alpha = 1, linewidth = 0.1)\n    # contours\n    g.map(sns.kdeplot, \"error\", clip = (-0.1, 1.0), bw_adjust = 1, clip_on = False, color = \"w\", lw = 1)\n    # horizontal lines\n    g.map(plt.axhline, y = 0, lw = 2, clip_on = False)\n    # overlap\n    g.fig.subplots_adjust(hspace = -0.3)\n\n    for i, ax in enumerate(g.axes.flat):\n        ax.text(-0.125, 5, df[col].unique()[i],\n                fontsize = 15, color = ax.lines[-1].get_color(), va = \"baseline\")\n\n    # remove titles, y ticks, spines\n    g.set_titles(\"\")\n    g.set(yticks = [])\n    g.despine(left = True, bottom = True)\n    g.fig.suptitle(title, fontsize = 20, ha = \"right\")\n    for ax in g.axes.flat:\n        ax.xaxis.set_major_formatter(lambda x, pos: f\"{x * 100:.0f}\")\n    g.set_xlabels(x_label)\n    g.set_ylabels(\"\")\n\n    g.savefig(f\"docs/assets/{filename}\")\n    plt.close()\n\nridgeline(\n    \"scaling_factor_exploration\",\n    \"Vliv koeficientu chlazení na hustotu chyb\",\n    \"scaling_factor\",\n    \"whitebox-error-distributions.svg\",\n)\n\nridgeline(\n    \"temperature modifier exploration\",\n    \"Vliv koeficientu počáteční teploty na hustotu chyb\",\n    \"temperature_modifier\",\n    \"whitebox-error-distributions-temperature.svg\",\n)\n\nridgeline(\n    \"equilibrium width exploration\",\n    \"Vliv šířky ekvilibria na hustotu chyb\",\n    \"equilibrium_width\",\n    \"whitebox-error-distributions-equilibrium-width.svg\",\n)\n\n# plot the error distribution\nsns.kdeplot(\n    data = data[data[\"id\"] == \"black box\"],\n    x = \"error\",\n)\nplt.savefig(\"docs/assets/blackbox-error-distribution.svg\")\n"]},{"t":"Para","c":[{"t":"Str","c":"Koeficient"},{"t":"Space"},{"t":"Str","c":"chlazení"},{"t":"Space"},{"t":"Str","c":"má"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"průběh"},{"t":"Space"},{"t":"Str","c":"hledání"},{"t":"Space"},{"t":"Str","c":"zásadní"},{"t":"Space"},{"t":"Str","c":"vliv."},{"t":"Space"},{"t":"Str","c":"Přehled"},{"t":"Space"},{"t":"Str","c":"různých"},{"t":"Space"},{"t":"Str","c":"nastavení"},{"t":"SoftBreak"},{"t":"Str","c":"tohoto"},{"t":"Space"},{"t":"Str","c":"parametru"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"vidět"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"grafu"},{"t":"Space"},{"t":"Str","c":"níže."}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"Vliv"},{"t":"Space"},{"t":"Str","c":"koeficientu"},{"t":"Space"},{"t":"Str","c":"chlazení"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"hustotu"},{"t":"SoftBreak"},{"t":"Str","c":"chyb"}],["assets/whitebox-error-distributions.svg","fig:"]]}]},{"t":"Para","c":[{"t":"Str","c":"Rychlé"},{"t":"Space"},{"t":"Str","c":"chlazení"},{"t":"Space"},{"t":"Str","c":"vede"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"nedostatečné"},{"t":"Space"},{"t":"Str","c":"diversifikaci"},{"t":"Space"},{"t":"Str","c":"řešení."},{"t":"Space"},{"t":"Str","c":"Algoritmus"},{"t":"Space"},{"t":"Str","c":"nemá"},{"t":"SoftBreak"},{"t":"Str","c":"možnost"},{"t":"Space"},{"t":"Str","c":"projít"},{"t":"Space"},{"t":"Str","c":"skrz"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"nízké"},{"t":"Space"},{"t":"Str","c":"ceny"},{"t":"Space"},{"t":"Str","c":"aby"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"dostal"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"oblasti"},{"t":"Space"},{"t":"Str","c":"lokálního"},{"t":"Space"},{"t":"Str","c":"minima."},{"t":"SoftBreak"},{"t":"Str","c":"Protože"},{"t":"Space"},{"t":"Str","c":"ukončovací"},{"t":"Space"},{"t":"Str","c":"podmínka"},{"t":"Space"},{"t":"Str","c":"závisí"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"teplotě,"},{"t":"Space"},{"t":"Str","c":"tento"},{"t":"Space"},{"t":"Str","c":"postup"},{"t":"Space"},{"t":"Str","c":"nevyzkouší"},{"t":"Space"},{"t":"Str","c":"mnoho"},{"t":"SoftBreak"},{"t":"Str","c":"možností"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"už"},{"t":"Space"},{"t":"Str","c":"po"},{"t":"Space"},{"t":"Str","c":"pár"},{"t":"Space"},{"t":"Str","c":"desítkách"},{"t":"Space"},{"t":"Str","c":"iterací"},{"t":"Space"},{"t":"Str","c":"skončí"},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"vysokou"},{"t":"Space"},{"t":"Str","c":"chybou."}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"Nedostatečná"},{"t":"Space"},{"t":"Str","c":"diversifikace"},{"t":"Space"},{"t":"Str","c":"rychlého"},{"t":"SoftBreak"},{"t":"Str","c":"chlazení"}],["assets/whitebox-scaling_factor_exploration-True-15-8000-0.85-0.7-10-9.svg","fig:"]]}]},{"t":"Para","c":[{"t":"Str","c":"U"},{"t":"Space"},{"t":"Str","c":"velmi"},{"t":"Space"},{"t":"Str","c":"pomalého"},{"t":"Space"},{"t":"Str","c":"chlazení"},{"t":"Space"},{"t":"Str","c":"dochází"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"předčasnému"},{"t":"Space"},{"t":"Str","c":"vyčerpání"},{"t":"Space"},{"t":"Str","c":"limitu"},{"t":"Space"},{"t":"Str","c":"iterací."},{"t":"SoftBreak"},{"t":"Str","c":"Algoritmus"},{"t":"Space"},{"t":"Str","c":"skončí"},{"t":"Space"},{"t":"Str","c":"dříve,"},{"t":"Space"},{"t":"Str","c":"než"},{"t":"Space"},{"t":"Str","c":"teplota"},{"t":"Space"},{"t":"Str","c":"klesne"},{"t":"Space"},{"t":"Str","c":"natolik,"},{"t":"Space"},{"t":"Str","c":"aby"},{"t":"Space"},{"t":"Str","c":"začala"},{"t":"Space"},{"t":"Str","c":"intensifikace."}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"Nedostatečná"},{"t":"Space"},{"t":"Str","c":"intensifikace"},{"t":"Space"},{"t":"Str","c":"pomalého"},{"t":"SoftBreak"},{"t":"Str","c":"chlazení"}],["assets/whitebox-scaling_factor_exploration-True-15-8000-0.999-0.7-10-9.svg","fig:"]]}]},{"t":"Para","c":[{"t":"Str","c":"Koeficient"},{"t":"Space"},{"t":"Math","c":[{"t":"InlineMath"},"0.996"]},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"ideální"},{"t":"Space"},{"t":"Str","c":"volbou"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"toto"},{"t":"Space"},{"t":"Str","c":"konkrétní"},{"t":"Space"},{"t":"Str","c":"nastavení"},{"t":"Space"},{"t":"Str","c":"ostatních"},{"t":"SoftBreak"},{"t":"Str","c":"parametrů."},{"t":"Space"},{"t":"Str","c":"Řešení"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"blíží"},{"t":"Space"},{"t":"Str","c":"optimu"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"maximální"},{"t":"Space"},{"t":"Str","c":"chybou"},{"t":"Space"},{"t":"Math","c":[{"t":"InlineMath"},"\\approx 2.43\\%"]},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"průměrnou"},{"t":"SoftBreak"},{"t":"Math","c":[{"t":"InlineMath"},"\\approx 0.36\\%"]},{"t":"Str","c":"."}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"Fáze"},{"t":"Space"},{"t":"Str","c":"diversifikace"},{"t":"Space"},{"t":"Str","c":"i"},{"t":"Space"},{"t":"Str","c":"intensifikace"},{"t":"Space"},{"t":"Str","c":"ve"},{"t":"Space"},{"t":"Str","c":"vhodném"},{"t":"SoftBreak"},{"t":"Str","c":"poměru"}],["assets/whitebox-scaling_factor_exploration-True-15-8000-0.996-0.7-10-9.svg","fig:"]]}]},{"t":"Para","c":[{"t":"Str","c":"Vliv"},{"t":"Space"},{"t":"Str","c":"parametrů"},{"t":"Space"},{"t":"Str","c":"počáteční"},{"t":"Space"},{"t":"Str","c":"teploty"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"šířky"},{"t":"Space"},{"t":"Str","c":"ekvilibria"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"hustotu"},{"t":"Space"},{"t":"Str","c":"chyb"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"změřil"},{"t":"SoftBreak"},{"t":"Str","c":"podobným"},{"t":"Space"},{"t":"Str","c":"způsobem,"},{"t":"Space"},{"t":"Str","c":"tyto"},{"t":"Space"},{"t":"Str","c":"parametry"},{"t":"Space"},{"t":"Str","c":"zřejmě"},{"t":"Space"},{"t":"Str","c":"kvalitu"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"zdaleka"},{"t":"Space"},{"t":"Str","c":"neovlivňují"},{"t":"SoftBreak"},{"t":"Str","c":"tolik."}]},{"t":"Para","c":[{"t":"Str","c":"Pro"},{"t":"Space"},{"t":"Str","c":"připomenutí,"},{"t":"Space"},{"t":"Str","c":"koeficient"},{"t":"Space"},{"t":"Str","c":"počáteční"},{"t":"Space"},{"t":"Str","c":"teploty"},{"t":"Space"},{"t":"Str","c":"násobí"},{"t":"Space"},{"t":"Str","c":"cenu"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"greedy"},{"t":"Space"},{"t":"Str","c":"redux,"},{"t":"SoftBreak"},{"t":"Str","c":"toto"},{"t":"Space"},{"t":"Str","c":"číslo"},{"t":"Space"},{"t":"Str","c":"udává"},{"t":"Space"},{"t":"Str","c":"počáteční"},{"t":"Space"},{"t":"Str","c":"teplotu."}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"Vliv"},{"t":"Space"},{"t":"Str","c":"koeficientu"},{"t":"Space"},{"t":"Str","c":"počáteční"},{"t":"Space"},{"t":"Str","c":"teploty"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"hustotu"},{"t":"SoftBreak"},{"t":"Str","c":"chyb"}],["assets/whitebox-error-distributions-temperature.svg","fig:"]]}]},{"t":"Para","c":[{"t":"Str","c":"Šířka"},{"t":"Space"},{"t":"Str","c":"ekvilibria"},{"t":"Space"},{"t":"Str","c":"určuje"},{"t":"Space"},{"t":"Str","c":"počet"},{"t":"Space"},{"t":"Str","c":"iterací"},{"t":"Space"},{"t":"Str","c":"při"},{"t":"Space"},{"t":"Str","c":"kterých"},{"t":"Space"},{"t":"Str","c":"algoritmus"},{"t":"Space"},{"t":"Str","c":"setrvá"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"jedné"},{"t":"SoftBreak"},{"t":"Str","c":"teplotě,"},{"t":"Space"},{"t":"Str","c":"nikoliv"},{"t":"Space"},{"t":"Str","c":"však"},{"t":"Space"},{"t":"Str","c":"jak"},{"t":"Space"},{"t":"Str","c":"rychle"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"teplota"},{"t":"Space"},{"t":"Str","c":"mění."}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"Vliv"},{"t":"Space"},{"t":"Str","c":"šířky"},{"t":"Space"},{"t":"Str","c":"ekvilibria"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"hustotu"},{"t":"SoftBreak"},{"t":"Str","c":"chyb"}],["assets/whitebox-error-distributions-equilibrium-width.svg","fig:"]]}]},{"t":"Header","c":[3,["black-box-vyhodnocení-hustoty-chyb",[],[]],[{"t":"Str","c":"Black"},{"t":"Space"},{"t":"Str","c":"box:"},{"t":"Space"},{"t":"Str","c":"vyhodnocení"},{"t":"Space"},{"t":"Str","c":"hustoty"},{"t":"Space"},{"t":"Str","c":"chyb"}]]},{"t":"Para","c":[{"t":"Str","c":"Pro"},{"t":"Space"},{"t":"Str","c":"black"},{"t":"Space"},{"t":"Str","c":"box"},{"t":"Space"},{"t":"Str","c":"vyhodnocení"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"použil"},{"t":"Space"},{"t":"Str","c":"celou"},{"t":"Space"},{"t":"Str","c":"sadu"},{"t":"Space"},{"t":"Str","c":"NK35"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"změřil"},{"t":"Space"},{"t":"Str","c":"hustotu"},{"t":"Space"},{"t":"Str","c":"chyb."}]},{"t":"Para","c":[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"Hustota"},{"t":"Space"},{"t":"Str","c":"chyb"},{"t":"Space"},{"t":"Str","c":"přes"},{"t":"Space"},{"t":"Str","c":"500"},{"t":"Space"},{"t":"Str","c":"instancí"}],["assets/blackbox-error-distribution.svg","fig:"]]}]},{"t":"Header","c":[2,["implementace",[],[]],[{"t":"Str","c":"Implementace"}]]},{"t":"Para","c":[{"t":"Str","c":"Program"},{"t":"Space"},{"t":"Str","c":"začíná"},{"t":"Space"},{"t":"Str","c":"definicí"},{"t":"Space"},{"t":"Str","c":"datové"},{"t":"Space"},{"t":"Str","c":"struktury"},{"t":"Space"},{"t":"Str","c":"reprezentující"},{"t":"Space"},{"t":"Str","c":"instanci"},{"t":"Space"},{"t":"Str","c":"problému"},{"t":"SoftBreak"},{"t":"Str","c":"batohu."}]},{"t":"CodeBlock","c":[["problem-instance-definition",["rust","bootstrap-fold"],[]],"#[derive(Debug, PartialEq, Eq, Clone)]\npub struct Instance {\n    pub id: i32, m: u32, pub items: Vec<(u32, u32)>\n}"]},{"t":"Para","c":[{"t":"Str","c":"Následující"},{"t":"Space"},{"t":"Str","c":"úryvek"},{"t":"Space"},{"t":"Str","c":"poskytuje"},{"t":"Space"},{"t":"Str","c":"ptačí"},{"t":"Space"},{"t":"Str","c":"pohled"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"strukturu"},{"t":"Space"},{"t":"Str","c":"souboru."},{"t":"Space"},{"t":"Str","c":"Použité"},{"t":"Space"},{"t":"Str","c":"knihovny"},{"t":"SoftBreak"},{"t":"Str","c":"jsou"},{"t":"Space"},{"t":"Str","c":"importovány"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"začátku,"},{"t":"Space"},{"t":"Str","c":"následuje"},{"t":"Space"},{"t":"Str","c":"již"},{"t":"Space"},{"t":"Str","c":"zmíněná"},{"t":"Space"},{"t":"Str","c":"definice"},{"t":"Space"},{"t":"Str","c":"instance"},{"t":"Space"},{"t":"Str","c":"problému,"},{"t":"SoftBreak"},{"t":"Str","c":"dále"},{"t":"Space"},{"t":"Str","c":"funkce"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"main()"]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"parser,"},{"t":"Space"},{"t":"Str","c":"definice"},{"t":"Space"},{"t":"Str","c":"struktury"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"její"},{"t":"Space"},{"t":"Str","c":"podpůrné"},{"t":"Space"},{"t":"Str","c":"funkce,"},{"t":"SoftBreak"},{"t":"Str","c":"samotné"},{"t":"Space"},{"t":"Str","c":"algoritmy"},{"t":"Space"},{"t":"Str","c":"řešiče"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"neposlední"},{"t":"Space"},{"t":"Str","c":"řadě"},{"t":"Space"},{"t":"Str","c":"sada"},{"t":"Space"},{"t":"Str","c":"automatických"},{"t":"Space"},{"t":"Str","c":"testů."}]},{"t":"CodeBlock","c":[["",["rust","bootstrap-fold"],[["file","solver/src/lib.rs"]]],"<<imports>>\n\n<<algorithm-map>>\n\npub fn solve_stream<T>(\n    alg: for <'b> fn(&'b Instance) -> Solution<'b>,\n    solutions: HashMap<(u32, i32), OptimalSolution>,\n    stream: &mut T\n) -> Result<Vec<(u32, Option<f64>)>> where T: BufRead {\n    let mut results = vec![];\n    loop {\n        match parse_line(stream)?.as_ref().map(|inst| (inst, alg(inst))) {\n            Some((inst, sln)) => {\n                let optimal = &solutions.get(&(inst.items.len() as u32, inst.id));\n                let error = optimal.map(|opt| 1.0 - sln.cost as f64 / opt.cost as f64);\n                results.push((sln.cost, error))\n            },\n            None => return Ok(results)\n        }\n    }\n}\n\npub fn load_instances<T>(stream: &mut T) -> Result<Vec<Instance>>\nwhere T: BufRead {\n    let mut instances = vec![];\n    loop {\n        match parse_line(stream)? {\n            Some(inst) => instances.push(inst),\n            None => return Ok(instances)\n        }\n    }\n}\n\nuse std::result::Result as IOResult;\npub fn list_input_files(set: &str, r: Range<u32>) -> Result<Vec<IOResult<DirEntry, std::io::Error>>> {\n    let f = |res: &IOResult<DirEntry, std::io::Error> | res.as_ref().ok().filter(|f| {\n        let file_name = f.file_name();\n        let file_name = file_name.to_str().unwrap();\n        // keep only regular files\n        f.file_type().unwrap().is_file() &&\n        // ... whose names start with the set name,\n        file_name.starts_with(set) &&\n        // ... continue with an integer between 0 and 15,\n        file_name[set.len()..]\n        .split('_').next().unwrap().parse::<u32>().ok()\n        .filter(|n| r.contains(n)).is_some() &&\n        // ... and end with `_inst.dat` (for \"instance\").\n        file_name.ends_with(\"_inst.dat\")\n    }).is_some();\n    Ok(read_dir(\"./ds/\")?.filter(f).collect())\n}\n\n<<problem-instance-definition>>\n\n<<solution-definition>>\n\n<<parser>>\n\ntrait IteratorRandomWeighted: Iterator + Sized + Clone {\n    fn choose_weighted<Rng: ?Sized, W>(&mut self, rng: &mut Rng, f: fn(Self::Item) -> W) -> Option<Self::Item>\n    where\n        Rng: rand::Rng,\n        W: for<'a> core::ops::AddAssign<&'a W>\n         + rand::distributions::uniform::SampleUniform\n         + std::cmp::PartialOrd\n         + Default\n         + Clone {\n        use rand::prelude::*;\n        let dist = rand::distributions::WeightedIndex::new(self.clone().map(f)).ok()?;\n        self.nth(dist.sample(rng))\n    }\n}\n\nimpl<I> IteratorRandomWeighted for I where I: Iterator + Sized + Clone {}\n\nimpl Instance {\n    <<solver-dpw>>\n\n    <<solver-dpc>>\n\n    <<solver-fptas>>\n\n    <<solver-greedy>>\n\n    <<solver-greedy-redux>>\n\n    <<solver-bb>>\n\n    <<solver-bf>>\n\n    <<solver-sa>>\n}\n\n<<tests>>"]},{"t":"Para","c":[{"t":"Str","c":"Řešení"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"podobě"},{"t":"Space"},{"t":"Str","c":"datové"},{"t":"Space"},{"t":"Str","c":"struktury"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"Solution"]},{"t":"Space"},{"t":"Str","c":"má"},{"t":"Space"},{"t":"Str","c":"kromě"},{"t":"Space"},{"t":"Str","c":"reference"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"instanci"},{"t":"SoftBreak"},{"t":"Str","c":"problému"},{"t":"Space"},{"t":"Str","c":"především"},{"t":"Space"},{"t":"Str","c":"bit"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"udávající"},{"t":"Space"},{"t":"Str","c":"množinu"},{"t":"Space"},{"t":"Str","c":"předmětů"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"pomyslném"},{"t":"Space"},{"t":"Str","c":"batohu."},{"t":"SoftBreak"},{"t":"Str","c":"Zároveň"},{"t":"Space"},{"t":"Str","c":"nese"},{"t":"Space"},{"t":"Str","c":"informaci"},{"t":"Space"},{"t":"Str","c":"o"},{"t":"Space"},{"t":"Str","c":"počtu"},{"t":"Space"},{"t":"Str","c":"navštívených"},{"t":"Space"},{"t":"Str","c":"konfigurací"},{"t":"Space"},{"t":"Str","c":"při"},{"t":"Space"},{"t":"Str","c":"jeho"},{"t":"Space"},{"t":"Str","c":"výpočtu."}]},{"t":"CodeBlock","c":[["solution-definition",["rust","bootstrap-fold"],[]],"pub type Config = BitArr!(for 64);\n\n#[derive(PartialEq, Eq, Clone, Copy, Debug)]\npub struct Solution<'a> { weight: u32, pub cost: u32, cfg: Config, pub inst: &'a Instance }\n\n#[derive(Debug, PartialEq, Eq, Clone)]\npub struct OptimalSolution { id: i32, pub cost: u32, cfg: Config }\n\n<<solution-helpers>>"]},{"t":"Para","c":[{"t":"Str","c":"Protože"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"strukturami"},{"t":"Space"},{"t":"Str","c":"typu"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"Solution"]},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"algoritmech"},{"t":"Space"},{"t":"Str","c":"pracuje"},{"t":"Space"},{"t":"Str","c":"hojně,"},{"t":"SoftBreak"},{"t":"Str","c":"implementoval"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"ně"},{"t":"Space"},{"t":"Str","c":"koncept"},{"t":"Space"},{"t":"Str","c":"řazení"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"pomocné"},{"t":"Space"},{"t":"Str","c":"metody"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"počítání"},{"t":"SoftBreak"},{"t":"Str","c":"navštívených"},{"t":"Space"},{"t":"Str","c":"konfigurací"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"přidávání"},{"t":"Space"},{"t":"Str","c":"předmětů"},{"t":"Space"},{"t":"Str","c":"do"},{"t":"Space"},{"t":"Str","c":"batohu."}]},{"t":"CodeBlock","c":[["solution-helpers",["rust","bootstrap-fold"],[]],"impl <'a> PartialOrd for Solution<'a> {\n    fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {\n        use cmp::Ordering;\n        let Solution {weight, cost, ..} = self;\n        Some(match cost.cmp(&other.cost) {\n            Ordering::Equal => weight.cmp(&other.weight).reverse(),\n            other => other,\n        })\n    }\n}\n\nimpl <'a> Ord for Solution<'a> {\n    fn cmp(&self, other: &Self) -> cmp::Ordering {\n        self.partial_cmp(other).unwrap()\n    }\n}\n\nimpl <'a> Solution<'a> {\n    fn with(mut self, i: usize) -> Solution<'a> {\n        self.set(i, true)\n    }\n\n    fn without(mut self, i: usize) -> Solution<'a> {\n        self.set(i, false)\n    }\n\n    fn invert(mut self) -> Solution<'a> {\n        for i in 0..self.inst.items.len() {\n            self.set(i, !self.cfg[i]);\n        }\n        self\n    }\n\n    fn set(&mut self, i: usize, set: bool) -> Solution<'a> {\n        let (w, c) = self.inst.items[i];\n        let k = if set { 1 } else { -1 };\n        if self.cfg[i] != set {\n            self.cfg.set(i, set);\n            self.weight = (self.weight as i32 + k * w as i32) as u32;\n            self.cost   = (self.cost   as i32 + k * c as i32) as u32;\n        }\n        *self\n    }\n\n    fn default(inst: &'a Instance) -> Solution<'a> {\n        Solution { weight: 0, cost: 0, cfg: Config::default(), inst }\n    }\n\n    fn overweight(inst: &'a Instance) -> Solution<'a> {\n        Solution { weight: u32::MAX, cost: 0, cfg: Config::default(), inst }\n    }\n\n    fn trim<Rng: ?Sized>(&mut self, rng: &mut Rng) where Rng: rand::Rng {\n        while self.weight > self.inst.m {\n            self.set(rng.gen_range(0..self.inst.items.len()), false);\n        }\n    }\n}"]},{"t":"Header","c":[3,["algoritmy",[],[]],[{"t":"Str","c":"Algoritmy"}]]},{"t":"Para","c":[{"t":"Str","c":"Aby"},{"t":"Space"},{"t":"Str","c":"bylo"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"jednotlivým"},{"t":"Space"},{"t":"Str","c":"implementacím"},{"t":"Space"},{"t":"Str","c":"jednoduché"},{"t":"Space"},{"t":"Str","c":"přistupovat,"},{"t":"Space"},{"t":"Str","c":"všechny"},{"t":"SoftBreak"},{"t":"Str","c":"implementované"},{"t":"Space"},{"t":"Str","c":"algoritmy"},{"t":"Space"},{"t":"Str","c":"jsou"},{"t":"Space"},{"t":"Str","c":"uloženy"},{"t":"Space"},{"t":"Str","c":"pod"},{"t":"Space"},{"t":"Str","c":"svými"},{"t":"Space"},{"t":"Str","c":"názvy"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"BTreeMap"]},{"t":"Str","c":"ě."},{"t":"Space"},{"t":"Str","c":"Tu"},{"t":"SoftBreak"},{"t":"Str","c":"používáme"},{"t":"Space"},{"t":"Str","c":"při"},{"t":"Space"},{"t":"Str","c":"vybírání"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"pomocí"},{"t":"Space"},{"t":"Str","c":"argumentu"},{"t":"Space"},{"t":"Str","c":"předaného"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"příkazové"},{"t":"Space"},{"t":"Str","c":"řádce,"},{"t":"SoftBreak"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"testovacím"},{"t":"Space"},{"t":"Str","c":"kódu"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"testy"},{"t":"Space"},{"t":"Str","c":"všech"},{"t":"Space"},{"t":"Str","c":"implementací"},{"t":"Space"},{"t":"Str","c":"atp."}]},{"t":"CodeBlock","c":[["algorithm-map",["rust","bootstrap-fold"],[]],"pub fn get_algorithms() -> BTreeMap<&'static str, fn(&Instance) -> Solution> {\n    let cast = |x: fn(&Instance) -> Solution| x;\n    // the BTreeMap works as a trie, maintaining alphabetic order\n    BTreeMap::from([\n        (\"bf\",     cast(Instance::brute_force)),\n        (\"bb\",     cast(Instance::branch_and_bound)),\n        (\"dpc\",    cast(Instance::dynamic_programming_c)),\n        (\"dpw\",    cast(Instance::dynamic_programming_w)),\n        (\"fptas1\", cast(|inst| inst.fptas(10f64.powi(-1)))),\n        (\"fptas2\", cast(|inst| inst.fptas(10f64.powi(-2)))),\n        (\"greedy\", cast(Instance::greedy)),\n        (\"redux\",  cast(Instance::greedy_redux)),\n    ])\n}"]},{"t":"Header","c":[4,["hladový-přístup",[],[]],[{"t":"Str","c":"Hladový"},{"t":"Space"},{"t":"Str","c":"přístup"}]]},{"t":"Para","c":[{"t":"Str","c":"Implementace"},{"t":"Space"},{"t":"Str","c":"hladové"},{"t":"Space"},{"t":"Str","c":"strategie"},{"t":"Space"},{"t":"Str","c":"využívá"},{"t":"Space"},{"t":"Str","c":"knihovny"},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"permutation"]}],["https://crates.io/crates/permutation",""]]},{"t":"Str","c":"."},{"t":"Space"},{"t":"Str","c":"Problém"},{"t":"Space"},{"t":"Str","c":"ve"},{"t":"Space"},{"t":"Str","c":"skutečnosti"},{"t":"SoftBreak"},{"t":"Str","c":"řešíme"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"isomorfní"},{"t":"Space"},{"t":"Str","c":"instanci,"},{"t":"Space"},{"t":"Str","c":"která"},{"t":"Space"},{"t":"Str","c":"má"},{"t":"Space"},{"t":"Str","c":"předměty"},{"t":"Space"},{"t":"Str","c":"uspořádané."},{"t":"Space"},{"t":"Str","c":"Jediné,"},{"t":"Space"},{"t":"Str","c":"co"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"změní,"},{"t":"SoftBreak"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"pořadí,"},{"t":"Space"},{"t":"Str","c":"ve"},{"t":"Space"},{"t":"Str","c":"kterém"},{"t":"Space"},{"t":"Str","c":"předměty"},{"t":"Space"},{"t":"Str","c":"navštěvujeme."},{"t":"Space"},{"t":"Str","c":"Proto"},{"t":"Space"},{"t":"Str","c":"stačí"},{"t":"Space"},{"t":"Str","c":"aplikovat"},{"t":"Space"},{"t":"Str","c":"řadicí"},{"t":"SoftBreak"},{"t":"Str","c":"permutaci"},{"t":"Space"},{"t":"Str","c":"předmětů"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"posloupnost"},{"t":"Space"},{"t":"Str","c":"indexů,"},{"t":"Space"},{"t":"Str","c":"které"},{"t":"Space"},{"t":"Str","c":"procházíme."},{"t":"Space"},{"t":"Str","c":"Přesně"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"dělá"},{"t":"Space"},{"t":"Str","c":"výraz"},{"t":"SoftBreak"},{"t":"Code","c":[["",[],[]],"(0..items.len()).map(ord)"]},{"t":"Str","c":"."}]},{"t":"CodeBlock","c":[["solver-greedy",["rust","bootstrap-fold"],[]],"fn greedy(&self) -> Solution {\n    use ::permutation::*;\n    let Instance {m, items, ..} = self;\n    fn ratio((w, c): (u32, u32)) -> f64 {\n        let r = c as f64 / w as f64;\n        if r.is_nan() { f64::NEG_INFINITY } else { r }\n    }\n    let permutation = sort_by(\n        &(items)[..],\n        |a, b|\n            ratio(*a)\n            .partial_cmp(&ratio(*b))\n            .unwrap()\n            .reverse() // max item first\n    );\n    let ord = { #[inline] |i| permutation.apply_idx(i) };\n\n    let mut sol = Solution::default(self);\n    for i in (0..items.len()).map(ord) {\n        let (w, _c) = items[i];\n        if sol.weight + w <= *m {\n            sol = sol.with(i);\n        } else { break }\n    }\n\n    sol\n}"]},{"t":"Header","c":[4,["hladový-přístup-redux",[],[]],[{"t":"Str","c":"Hladový"},{"t":"Space"},{"t":"Str","c":"přístup"},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"redux"}]]},{"t":"Para","c":[{"t":"Str","c":"Redux"},{"t":"Space"},{"t":"Str","c":"verze"},{"t":"Space"},{"t":"Str","c":"hladové"},{"t":"Space"},{"t":"Str","c":"strategie"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"více"},{"t":"Space"},{"t":"Str","c":"méně"},{"t":"Space"},{"t":"Str","c":"deklarativní."},{"t":"Space"},{"t":"Str","c":"Výsledek"},{"t":"Space"},{"t":"Str","c":"redux"},{"t":"SoftBreak"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"maximum"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"hladového"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"sestávajícího"},{"t":"Space"},{"t":"Str","c":"pouze"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"SoftBreak"},{"t":"Str","c":"nejdražšího"},{"t":"Space"},{"t":"Str","c":"předmětu."},{"t":"Space"},{"t":"Str","c":"K"},{"t":"Space"},{"t":"Str","c":"indexu"},{"t":"Space"},{"t":"Str","c":"nejdražšího"},{"t":"Space"},{"t":"Str","c":"předmětu"},{"t":"Space"},{"t":"Str","c":"dojdeme"},{"t":"Space"},{"t":"Str","c":"tak,"},{"t":"Space"},{"t":"Str","c":"že"},{"t":"Space"},{"t":"Str","c":"sepneme"},{"t":"SoftBreak"},{"t":"Str","c":"posloupnosti"},{"t":"Space"},{"t":"Str","c":"indexů"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"předmětů,"},{"t":"Space"},{"t":"Str","c":"vyřadíme"},{"t":"Space"},{"t":"Str","c":"prvky,"},{"t":"Space"},{"t":"Str","c":"jejichž"},{"t":"Space"},{"t":"Str","c":"váha"},{"t":"Space"},{"t":"Str","c":"přesahuje"},{"t":"Space"},{"t":"Str","c":"kapacitu"},{"t":"SoftBreak"},{"t":"Str","c":"batohu"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"vybereme"},{"t":"Space"},{"t":"Str","c":"maximální"},{"t":"Space"},{"t":"Str","c":"prvek"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"ceny."}]},{"t":"CodeBlock","c":[["solver-greedy-redux",["rust","bootstrap-fold"],[]],"fn greedy_redux(&self) -> Solution {\n    let greedy = self.greedy();\n    (0_usize..)\n        .zip(self.items.iter())\n        .filter(|(_, (w, _))| *w <= self.m)\n        .max_by_key(|(_, (_, c))| c)\n        .map(|(highest_price_index, _)|\n            max(greedy, Solution::default(self).with(highest_price_index))\n        ).unwrap_or(greedy)\n}"]},{"t":"Header","c":[4,["hrubá-síla",[],[]],[{"t":"Str","c":"Hrubá"},{"t":"Space"},{"t":"Str","c":"síla"}]]},{"t":"CodeBlock","c":[["solver-bf",["rust","bootstrap-fold"],[]],"fn brute_force(&self) -> Solution {\n    fn go<'a>(items: &'a [(u32, u32)], current: Solution<'a>, i: usize, m: u32) -> Solution<'a> {\n        if i >= items.len() { return current }\n\n        let (w, _c) = items[i];\n        let next = |current, m| go(items, current, i + 1, m);\n        let include = || {\n            let current = current.with(i);\n            next(current, m - w)\n        };\n        let exclude = || next(current, m);\n\n        if w <= m {\n            max(include(), exclude())\n        }\n        else { exclude() }\n    }\n\n    go(&self.items, Solution::default(self), 0, self.m)\n}"]},{"t":"Header","c":[4,["branch-bound",[],[]],[{"t":"Str","c":"Branch"},{"t":"Space"},{"t":"Str","c":"&"},{"t":"Space"},{"t":"Str","c":"bound"}]]},{"t":"CodeBlock","c":[["solver-bb",["rust","bootstrap-fold"],[]],"fn branch_and_bound(&self) -> Solution {\n    struct State<'a>(&'a Vec<(u32, u32)>, Vec<u32>);\n    let prices: Vec<u32> = {\n        self.items.iter().rev()\n        .scan(0, |sum, (_w, c)| {\n            *sum += c;\n            Some(*sum)\n        })\n        .collect::<Vec<_>>().into_iter().rev().collect()\n    };\n\n    fn go<'a>(state: &'a State, current: Solution<'a>, best: Solution<'a>, i: usize, m: u32) -> Solution<'a> {\n        let State(items, prices) = state;\n        if i >= items.len() || current.cost + prices[i] <= best.cost {\n            return current\n        }\n\n        let (w, _c) = items[i];\n        let next = |current, best, m| go(state, current, best, i + 1, m);\n        let include = || {\n            let current = current.with(i);\n            next(current, max(current, best), m - w)\n        };\n        let exclude = |best: Solution<'a>| next(current, best, m);\n\n        if w <= m {\n            let x = include();\n            max(x, exclude(x))\n        }\n        else { exclude(best) }\n    }\n\n    // FIXME borrowck issues\n    let state = State(&self.items, prices);\n    let empty = Solution::default(self);\n    Solution { inst: self, ..go(&state, empty, empty, 0, self.m) }\n}"]},{"t":"Header","c":[4,["dynamické-programování",[],[]],[{"t":"Str","c":"Dynamické"},{"t":"Space"},{"t":"Str","c":"programování"}]]},{"t":"Para","c":[{"t":"Str","c":"Dynamické"},{"t":"Space"},{"t":"Str","c":"programování"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"rozkladem"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"váhy"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"implementoval"},{"t":"Space"},{"t":"Str","c":"už"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"prvním"},{"t":"SoftBreak"},{"t":"Str","c":"úkolu."}]},{"t":"CodeBlock","c":[["solver-dpw",["rust","bootstrap-fold"],[]],"fn dynamic_programming_w(&self) -> Solution {\n    let Instance {m, items, ..} = self;\n    let mut next = vec![Solution::default(self); *m as usize + 1];\n    let mut last = vec![];\n\n    for (i, &(weight, _cost)) in items.iter().enumerate() {\n        last.clone_from(&next);\n\n        for cap in 0 ..= *m as usize {\n            let s = if (cap as u32) < weight {\n                    last[cap]\n                } else {\n                    let rem_weight = max(0, cap as isize - weight as isize) as usize;\n                    max(last[cap], last[rem_weight].with(i))\n                };\n            next[cap] = s;\n        }\n    }\n\n    *next.last().unwrap()\n}"]},{"t":"Para","c":[{"t":"Str","c":"V"},{"t":"Space"},{"t":"Str","c":"úkolu"},{"t":"Space"},{"t":"Str","c":"2"},{"t":"Space"},{"t":"Str","c":"přibyla"},{"t":"Space"},{"t":"Str","c":"implementace"},{"t":"Space"},{"t":"Str","c":"dynamického"},{"t":"Space"},{"t":"Str","c":"programování"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"rozkladem"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"ceny,"},{"t":"SoftBreak"},{"t":"Str","c":"které"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"adaptací"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"výše."},{"t":"Space"},{"t":"Str","c":"Narozdíl"},{"t":"Space"},{"t":"Str","c":"od"},{"t":"Space"},{"t":"Str","c":"předchozího"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"tady"},{"t":"SoftBreak"},{"t":"Str","c":"výchozí"},{"t":"Space"},{"t":"Str","c":"hodnotou"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"tabulce"},{"t":"Space"},{"t":"Str","c":"efektivně"},{"t":"Space"},{"t":"Str","c":"nekonečná"},{"t":"Space"},{"t":"Str","c":"váha,"},{"t":"Space"},{"t":"Str","c":"kterou"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"snažíme"},{"t":"SoftBreak"},{"t":"Str","c":"minimalizovat."},{"t":"Space"},{"t":"Str","c":"K"},{"t":"Space"},{"t":"Str","c":"reprezentaci"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"nekonečnou"},{"t":"Space"},{"t":"Str","c":"vahou"},{"t":"Space"},{"t":"Str","c":"používám"},{"t":"Space"},{"t":"Str","c":"přidruženou"},{"t":"SoftBreak"},{"t":"Str","c":"funkci"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"Solution::overweight"]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"která"},{"t":"Space"},{"t":"Str","c":"vrátí"},{"t":"Space"},{"t":"Str","c":"neplatné"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"váhou"},{"t":"Space"},{"t":"Math","c":[{"t":"InlineMath"},"2^{32} - 1"]},{"t":"Str","c":"."},{"t":"SoftBreak"},{"t":"Str","c":"Pokud"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"něj"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"průběhu"},{"t":"Space"},{"t":"Str","c":"výpočtu"},{"t":"Space"},{"t":"Str","c":"algoritmus"},{"t":"Space"},{"t":"Str","c":"narazí,"},{"t":"Space"},{"t":"Str","c":"předá"},{"t":"Space"},{"t":"Str","c":"jej"},{"t":"Space"},{"t":"Str","c":"dál"},{"t":"Space"},{"t":"Str","c":"jako"},{"t":"SoftBreak"},{"t":"Code","c":[["",[],[]],"Solution::default"]},{"t":"Space"},{"t":"Str","c":"(vždy"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"nejlevějším"},{"t":"Space"},{"t":"Str","c":"sloupci"},{"t":"Space"},{"t":"Str","c":"DP"},{"t":"Space"},{"t":"Str","c":"tabulky,"},{"t":"Space"},{"t":"Str","c":"tedy"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"last[0]"]},{"t":"Str","c":"),"},{"t":"Space"},{"t":"Str","c":"aby"},{"t":"SoftBreak"},{"t":"Str","c":"při"},{"t":"Space"},{"t":"Str","c":"přičtení"},{"t":"Space"},{"t":"Str","c":"váhy"},{"t":"Space"},{"t":"Str","c":"uvažovaného"},{"t":"Space"},{"t":"Str","c":"předmětu"},{"t":"Space"},{"t":"Str","c":"nedošlo"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"přetečení."}]},{"t":"Para","c":[{"t":"Str","c":"O"},{"t":"Space"},{"t":"Str","c":"výběr"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"minimální"},{"t":"Space"},{"t":"Str","c":"váhy"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"stará"},{"t":"Space"},{"t":"Str","c":"funkce"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"max"]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"neboť"},{"t":"Space"},{"t":"Str","c":"implementace"},{"t":"SoftBreak"},{"t":"Str","c":"uspořádání"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"typ"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"Solution"]},{"t":"Space"},{"t":"Str","c":"řadí"},{"t":"Space"},{"t":"Str","c":"nejprve"},{"t":"Space"},{"t":"Str","c":"vzestupně"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"ceny"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"následně"},{"t":"SoftBreak"},{"t":"Str","c":"sestupně"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"váhy."},{"t":"Space"},{"t":"Str","c":"V"},{"t":"Space"},{"t":"Str","c":"tomto"},{"t":"Space"},{"t":"Str","c":"případě"},{"t":"Space"},{"t":"Str","c":"porovnáváme"},{"t":"Space"},{"t":"Str","c":"vždy"},{"t":"Space"},{"t":"Str","c":"dvě"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"stejných"},{"t":"Space"},{"t":"Str","c":"cen"},{"t":"SoftBreak"},{"t":"Str","c":"(a"},{"t":"Space"},{"t":"Str","c":"nebo"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"last[cap]"]},{"t":"Space"},{"t":"Str","c":"neplatné"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"nadváhou,"},{"t":"Space"},{"t":"Str","c":"které"},{"t":"Space"},{"t":"Str","c":"má"},{"t":"Space"},{"t":"Str","c":"cenu"},{"t":"Space"},{"t":"Math","c":[{"t":"InlineMath"},"0"]},{"t":"Str","c":")."}]},{"t":"CodeBlock","c":[["solver-dpc",["rust","bootstrap-fold"],[]],"fn dynamic_programming_c(&self) -> Solution {\n    let Instance {items, ..} = self;\n    let max_profit = items.iter().map(|(_, c)| *c).max().unwrap() as usize;\n    let mut next = vec![Solution::overweight(self); max_profit * items.len() + 1];\n    let mut last = vec![];\n    next[0] = Solution::default(self);\n\n    for (i, &(_weight, cost)) in items.iter().enumerate() {\n        last.clone_from(&next);\n\n        for cap in 1 ..= max_profit * items.len() {\n            let s = if (cap as u32) < cost {\n                    last[cap]\n                } else {\n                    let rem_cost = (cap as isize - cost as isize) as usize;\n                    let lightest_for_cost = if last[rem_cost].weight == u32::MAX {\n                        last[0] // replace the overweight solution with the empty one\n                    } else { last[rem_cost] };\n\n                    max(last[cap], lightest_for_cost.with(i))\n                };\n            next[cap] = s;\n        }\n    }\n\n    *next.iter().filter(|sln| sln.weight <= self.m).last().unwrap()\n}"]},{"t":"Header","c":[4,["fptas",[],[]],[{"t":"Str","c":"FPTAS"}]]},{"t":"Para","c":[{"t":"Str","c":"FPTAS"},{"t":"Space"},{"t":"Str","c":"algoritmus"},{"t":"Space"},{"t":"Str","c":"přeškáluje"},{"t":"Space"},{"t":"Str","c":"ceny"},{"t":"Space"},{"t":"Str","c":"předmětů"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"následně"},{"t":"Space"},{"t":"Str","c":"spustí"},{"t":"Space"},{"t":"Str","c":"dynamické"},{"t":"SoftBreak"},{"t":"Str","c":"programování"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"rozkladem"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"Space"},{"t":"Str","c":"ceny"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"upravenou"},{"t":"Space"},{"t":"Str","c":"instanci"},{"t":"Space"},{"t":"Str","c":"problému."},{"t":"Space"},{"t":"Str","c":"V"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"SoftBreak"},{"t":"Str","c":"stačí"},{"t":"Space"},{"t":"Str","c":"opravit"},{"t":"Space"},{"t":"Str","c":"referenci"},{"t":"Space"},{"t":"Str","c":"výchozí"},{"t":"Space"},{"t":"Str","c":"instance"},{"t":"Space"},{"t":"Str","c":"("},{"t":"Code","c":[["",[],[]],"inst: self"]},{"t":"Str","c":")"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"přepočíst"},{"t":"Space"},{"t":"Str","c":"cenu"},{"t":"Space"},{"t":"Str","c":"podle"},{"t":"SoftBreak"},{"t":"Str","c":"vypočítané"},{"t":"Space"},{"t":"Str","c":"konfigurace,"},{"t":"Space"},{"t":"Str","c":"samotné"},{"t":"Space"},{"t":"Str","c":"indexy"},{"t":"Space"},{"t":"Str","c":"předmětů"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"škálováním"},{"t":"Space"},{"t":"Str","c":"nemění."}]},{"t":"CodeBlock","c":[["solver-fptas",["rust","bootstrap-fold"],[]],"// TODO: are items heavier than the knapsack capacity a problem? if so, we\n// can just zero them out\nfn fptas(&self, eps: f64) -> Solution {\n    let Instance {m: _, items, ..} = self;\n    let max_profit = items.iter().map(|(_, c)| *c).max().unwrap();\n    let scaling_factor = eps * max_profit as f64 / items.len() as f64;\n    let items: Vec<(u32, u32)> = items.iter().map(|(w, c)|\n        (*w, (*c as f64 / scaling_factor).floor() as u32\n    )).collect();\n\n    let iso = Instance { items, ..*self };\n    let sln = iso.dynamic_programming_c();\n    let cost = (0usize..).zip(self.items.iter()).fold(0, |acc, (i, (_w, c))|\n        acc + sln.cfg[i] as u32 * c\n    );\n    Solution { inst: self, cost, ..sln }\n}"]},{"t":"Header","c":[4,["simulované-žíhání",[],[]],[{"t":"Str","c":"Simulované"},{"t":"Space"},{"t":"Str","c":"žíhání"}]]},{"t":"Para","c":[{"t":"Str","c":"Iterativní"},{"t":"Space"},{"t":"Str","c":"metoda"},{"t":"Space"},{"t":"Str","c":"simulovaného"},{"t":"Space"},{"t":"Str","c":"žíhání"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"od"},{"t":"Space"},{"t":"Str","c":"ostatních"},{"t":"Space"},{"t":"Str","c":"algoritmů"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"několika"},{"t":"SoftBreak"},{"t":"Str","c":"ohledech"},{"t":"Space"},{"t":"Str","c":"liší."}]},{"t":"Para","c":[{"t":"Str","c":"Prvně"},{"t":"Space"},{"t":"Str","c":"vyžaduje"},{"t":"Space"},{"t":"Str","c":"generátor"},{"t":"Space"},{"t":"Str","c":"náhodných"},{"t":"Space"},{"t":"Str","c":"čísel"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"konfiguraci"},{"t":"Space"},{"t":"Str","c":"jako"},{"t":"SoftBreak"},{"t":"Str","c":"vstupní"},{"t":"Space"},{"t":"Str","c":"parametry"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"její"},{"t":"Space"},{"t":"Str","c":"typ"},{"t":"Space"},{"t":"Str","c":"proto"},{"t":"Space"},{"t":"Str","c":"neodpovídá"},{"t":"Space"},{"t":"Str","c":"ostatním"},{"t":"Space"},{"t":"Str","c":"metodám"},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"souboru"},{"t":"SoftBreak"},{"t":"Code","c":[["",[],[]],"main.rs"]},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"toto"},{"t":"Space"},{"t":"Str","c":"třeba"},{"t":"Space"},{"t":"Str","c":"ošetřit,"},{"t":"Space"},{"t":"Str","c":"připravit"},{"t":"Space"},{"t":"Str","c":"generátor"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"konfiguraci"},{"t":"Space"},{"t":"Str","c":"načíst"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"SoftBreak"},{"t":"Str","c":"příkazové"},{"t":"Space"},{"t":"Str","c":"řádky."}]},{"t":"Para","c":[{"t":"Str","c":"Navíc"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"její"},{"t":"Space"},{"t":"Str","c":"přístup"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"prohledávání"},{"t":"Space"},{"t":"Str","c":"stavového"},{"t":"Space"},{"t":"Str","c":"prostoru"},{"t":"Space"},{"t":"Str","c":"založen"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"přidávání"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"SoftBreak"},{"t":"Str","c":"odebírání"},{"t":"Space"},{"t":"Str","c":"předmětů"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"batohu"},{"t":"Space"},{"t":"Str","c":"narozdíl"},{"t":"Space"},{"t":"Str","c":"od"},{"t":"Space"},{"t":"Str","c":"klasických"},{"t":"Space"},{"t":"Str","c":"algoritmů,"},{"t":"Space"},{"t":"Str","c":"kde"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"batoh"},{"t":"Space"},{"t":"Str","c":"jen"},{"t":"SoftBreak"},{"t":"Str","c":"plní."},{"t":"Space"},{"t":"Str","c":"Z"},{"t":"Space"},{"t":"Str","c":"tohoto"},{"t":"Space"},{"t":"Str","c":"důvodu"},{"t":"Space"},{"t":"Str","c":"bylo"},{"t":"Space"},{"t":"Str","c":"třeba"},{"t":"Space"},{"t":"Str","c":"zobecnit"},{"t":"Space"},{"t":"Str","c":"metodu"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"Solution::with"]},{"t":"Space"},{"t":"Str","c":"na"},{"t":"SoftBreak"},{"t":"Code","c":[["",[],[]],"Solution::set"]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"která"},{"t":"Space"},{"t":"Str","c":"libovolné"},{"t":"Space"},{"t":"Str","c":"změny"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"inkluzi"},{"t":"Space"},{"t":"Str","c":"předmětů"},{"t":"Space"},{"t":"Str","c":"ergonomicky"},{"t":"Space"},{"t":"Str","c":"umožňuje."},{"t":"SoftBreak"},{"t":"Str","c":"Má"},{"t":"Space"},{"t":"Str","c":"implementace"},{"t":"Space"},{"t":"Str","c":"využívá"},{"t":"Space"},{"t":"Str","c":"relaxaci"},{"t":"Space"},{"t":"Str","c":"–"},{"t":"Space"},{"t":"Str","c":"vybraný"},{"t":"Space"},{"t":"Str","c":"kandidát"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"nový"},{"t":"Space"},{"t":"Str","c":"stav"},{"t":"Space"},{"t":"Str","c":"může"},{"t":"Space"},{"t":"Str","c":"dočasně"},{"t":"SoftBreak"},{"t":"Str","c":"překročit"},{"t":"Space"},{"t":"Str","c":"maximální"},{"t":"Space"},{"t":"Str","c":"kapacitu"},{"t":"Space"},{"t":"Str","c":"batohu."},{"t":"Space"},{"t":"Str","c":"Před"},{"t":"Space"},{"t":"Str","c":"jeho"},{"t":"Space"},{"t":"Str","c":"zvážením"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"randomizovaným"},{"t":"SoftBreak"},{"t":"Str","c":"přijetím"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"ovšem"},{"t":"Space"},{"t":"Str","c":"kandidát"},{"t":"Space"},{"t":"Str","c":"opraven"},{"t":"Space"},{"t":"Str","c":"pomocí"},{"t":"Space"},{"t":"Str","c":"metody"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"Solution::trim"]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"která"},{"t":"Space"},{"t":"Str","c":"odebírá"},{"t":"SoftBreak"},{"t":"Str","c":"náhodné"},{"t":"Space"},{"t":"Str","c":"předměty"},{"t":"Space"},{"t":"Str","c":"dokud"},{"t":"Space"},{"t":"Str","c":"váha"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"neklesne"},{"t":"Space"},{"t":"Str","c":"pod"},{"t":"Space"},{"t":"Str","c":"danou"},{"t":"Space"},{"t":"Str","c":"mez."}]},{"t":"CodeBlock","c":[["solver-sa",["rust","bootstrap-fold"],[]],"pub fn simulated_annealing<Rng>(\n    &self,\n    rng: &mut Rng,\n    (max_iterations, scaling_factor, temp_modifier, equilibrium_width): (u32, f64, f64, u8)\n) -> Solution\nwhere Rng: rand::Rng + ?Sized {\n    let total_cost = self.items.iter().map(|(_, c)| c).sum::<u32>() as f64;\n    let mut current = self.greedy_redux();\n    let mut best = current;\n    let mut temperature = temp_modifier * self.greedy_redux().cost as f64;\n\n    let mut iteration = 0;\n    let frozen = |t| t < 0.00001;\n    let equilibrium = |i| i % equilibrium_width as u32 == 0;\n\n    while !frozen(temperature) {\n        let temp = temperature;\n        loop {\n            use rand::prelude::IteratorRandom;\n            println!(\"    {} {} {}\", current.cost, best.cost, temp);\n\n            let next_sln = (0..self.items.len())\n                // construct the set of neighbouring solutions: generate n\n                // solutions, each with one item different to the current\n                // solution (included or excluded)\n                .map(|i| current.clone().set(i, !current.cfg[i]))\n                // also add a complete flip as an option\n                .chain(std::iter::once(current.invert()))\n                // select a neighbour at random\n                .choose(rng);\n            match next_sln {\n                Some(mut new) => {\n                    new.trim(rng);\n                    let delta = (new.cost as f64 - current.cost as f64) / total_cost;\n                    let rnd = rng.gen_range(0.0 .. 1.0);\n                    let threshold = (delta / temp).exp();\n                    if delta <= 0.0 {\n                        // eprintln!(\n                        //     \"considering {} (current {}),\\tdelta {}, rnd {}, temp {},\\t(will {} against {})\",\n                        //     new.cost,\n                        //     current.cost,\n                        //     delta,\n                        //     rnd,\n                        //     temp,\n                        //     if rnd < threshold { \"succeed\" } else { \"fail\" },\n                        //     threshold,\n                        // );\n                    }\n\n                    if  delta > 0.0 // the new state is better, accept it right away\n                    || // otherwise accept with probability proportional to the cost delta and the temp\n                        rnd < threshold {\n                        current = new;\n                        if current.cost > best.cost {\n                            best = current;\n                        }\n                    }\n                },\n                None => {\n                    println!(\"  early return @ {}, temp {}\", iteration, temp);\n                    return best\n                },\n            };\n            iteration += 1;\n            temperature *= scaling_factor;\n            if iteration >= max_iterations {\n                println!(\"  iteration limit exhausted\");\n                return best\n            } else if equilibrium(iteration) { break }\n        }\n    }\n\n    println!(\"  frozen @ {}, temp {}\", iteration, temperature / scaling_factor);\n    best\n}"]},{"t":"Header","c":[2,["závěr",[],[]],[{"t":"Str","c":"Závěr"}]]},{"t":"Para","c":[{"t":"Str","c":"Implementoval"},{"t":"Space"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"metodu"},{"t":"Space"},{"t":"Str","c":"simulovaného"},{"t":"Space"},{"t":"Str","c":"žíhání"},{"t":"Space"},{"t":"Str","c":"(alias"},{"t":"Space"},{"t":"Str","c":"ochlazování)"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"prozkoumal"},{"t":"SoftBreak"},{"t":"Str","c":"jsem"},{"t":"Space"},{"t":"Str","c":"její"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"proti."},{"t":"Space"},{"t":"Str","c":"S"},{"t":"Space"},{"t":"Str","c":"vhodným"},{"t":"Space"},{"t":"Str","c":"nastavením"},{"t":"Space"},{"t":"Str","c":"parametrů"},{"t":"Space"},{"t":"Str","c":"nachází"},{"t":"Space"},{"t":"Str","c":"výrazně"},{"t":"Space"},{"t":"Str","c":"lepší"},{"t":"SoftBreak"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"než"},{"t":"Space"},{"t":"Str","c":"hladové"},{"t":"Space"},{"t":"Str","c":"heuristiky"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"lze"},{"t":"Space"},{"t":"Str","c":"využít"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"iterativní"},{"t":"Space"},{"t":"Str","c":"zlepšování"},{"t":"SoftBreak"},{"t":"Str","c":"existujících"},{"t":"Space"},{"t":"Str","c":"řešení"},{"t":"Space"},{"t":"Str","c":"(např."},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"greedy"},{"t":"Space"},{"t":"Str","c":"redux)."},{"t":"Space"},{"t":"Str","c":"Počáteční"},{"t":"Space"},{"t":"Str","c":"teplota"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"hranice"},{"t":"SoftBreak"},{"t":"Str","c":"maximálního"},{"t":"Space"},{"t":"Str","c":"počtu"},{"t":"Space"},{"t":"Str","c":"iterací"},{"t":"Space"},{"t":"Str","c":"navíc"},{"t":"Space"},{"t":"Str","c":"dovolují"},{"t":"Space"},{"t":"Str","c":"vhodně"},{"t":"Space"},{"t":"Str","c":"omezit"},{"t":"Space"},{"t":"Str","c":"výpočetní"},{"t":"Space"},{"t":"Str","c":"náročnost"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"SoftBreak"},{"t":"Str","c":"úkor"},{"t":"Space"},{"t":"Str","c":"kvality"},{"t":"Space"},{"t":"Str","c":"nalezených"},{"t":"Space"},{"t":"Str","c":"řešení."},{"t":"Space"},{"t":"Str","c":"Je"},{"t":"Space"},{"t":"Str","c":"ovšem"},{"t":"Space"},{"t":"Str","c":"třeba"},{"t":"Space"},{"t":"Str","c":"dát"},{"t":"Space"},{"t":"Str","c":"si"},{"t":"Space"},{"t":"Str","c":"pozor"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"interakci"},{"t":"SoftBreak"},{"t":"Str","c":"jednotlivých"},{"t":"Space"},{"t":"Str","c":"parametrů,"},{"t":"Space"},{"t":"Str","c":"např."},{"t":"Space"},{"t":"Str","c":"aby"},{"t":"Space"},{"t":"Str","c":"nízký"},{"t":"Space"},{"t":"Str","c":"koeficient"},{"t":"Space"},{"t":"Str","c":"chlazení"},{"t":"Space"},{"t":"Str","c":"nevedl"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"předčasnému"},{"t":"SoftBreak"},{"t":"Str","c":"ukončení"},{"t":"Space"},{"t":"Str","c":"algoritmu."}]},{"t":"Header","c":[2,["appendix",[],[]],[{"t":"Str","c":"Appendix"}]]},{"t":"Para","c":[{"t":"Str","c":"Dodatek"},{"t":"Space"},{"t":"Str","c":"obsahuje"},{"t":"Space"},{"t":"Str","c":"nezajímavé"},{"t":"Space"},{"t":"Str","c":"části"},{"t":"Space"},{"t":"Str","c":"implementace,"},{"t":"Space"},{"t":"Str","c":"jako"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"import"},{"t":"Space"},{"t":"Str","c":"symbolů"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"SoftBreak"},{"t":"Str","c":"knihoven."}]},{"t":"CodeBlock","c":[["imports",["rust","bootstrap-fold"],[]],"use std::{cmp, cmp::max,\n    ops::Range,\n    str::FromStr,\n    io::{BufRead, BufReader},\n    collections::{BTreeMap, HashMap},\n    fs::{read_dir, File, DirEntry},\n};\nuse anyhow::{Context, Result, anyhow};\nuse bitvec::prelude::BitArr;\n\n#[cfg(test)]\n#[macro_use(quickcheck)]\nextern crate quickcheck_macros;"]},{"t":"Para","c":[{"t":"Str","c":"Zpracování"},{"t":"Space"},{"t":"Str","c":"vstupu"},{"t":"Space"},{"t":"Str","c":"zajišťuje"},{"t":"Space"},{"t":"Str","c":"jednoduchý"},{"t":"Space"},{"t":"Str","c":"parser"},{"t":"Space"},{"t":"Str","c":"pracující"},{"t":"Space"},{"t":"Str","c":"řádek"},{"t":"Space"},{"t":"Str","c":"po"},{"t":"Space"},{"t":"Str","c":"řádku."},{"t":"Space"},{"t":"Str","c":"Pro"},{"t":"SoftBreak"},{"t":"Str","c":"testy"},{"t":"Space"},{"t":"Str","c":"je"},{"t":"Space"},{"t":"Str","c":"tu"},{"t":"Space"},{"t":"Str","c":"parser"},{"t":"Space"},{"t":"Str","c":"formátu"},{"t":"Space"},{"t":"Str","c":"souborů"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"optimálními"},{"t":"Space"},{"t":"Str","c":"řešeními."}]},{"t":"CodeBlock","c":[["parser",["rust","bootstrap-fold"],[]],"<<boilerplate>>\n\npub fn parse_line<T>(stream: &mut T) -> Result<Option<Instance>> where T: BufRead {\n    let mut input = String::new();\n    if stream.read_line(&mut input)? == 0 {\n        return Ok(None)\n    }\n\n    let mut  numbers = input.split_whitespace();\n    let id = numbers.parse_next()?;\n    let  n = numbers.parse_next()?;\n    let  m = numbers.parse_next()?;\n\n    let mut items: Vec<(u32, u32)> = Vec::with_capacity(n);\n    for _ in 0..n {\n        let w = numbers.parse_next()?;\n        let c = numbers.parse_next()?;\n        items.push((w, c));\n    }\n\n    Ok(Some(Instance {id, m, items}))\n}\n\nfn parse_solution_line<T>(mut stream: T) -> Result<Option<OptimalSolution>> where T: BufRead {\n    let mut input = String::new();\n    if stream.read_line(&mut input)? == 0 {\n        return Ok(None)\n    }\n\n    let mut    numbers = input.split_whitespace();\n    let   id = numbers.parse_next()?;\n    let    n = numbers.parse_next()?;\n    let cost = numbers.parse_next()?;\n\n    let mut items = Config::default();\n    for i in 0..n {\n        let a: u8 = numbers.parse_next()?;\n        items.set(i, a == 1);\n    }\n\n    Ok(Some(OptimalSolution {id, cost, cfg: items}))\n}\n\npub fn load_solutions(set: &str) -> Result<HashMap<(u32, i32), OptimalSolution>> {\n    let mut solutions = HashMap::new();\n\n    let files = read_dir(\"../data/constructive/\")?\n        .filter(|res| res.as_ref().ok().filter(|f| {\n            let name = f.file_name().into_string().unwrap();\n            f.file_type().unwrap().is_file() &&\n            name.starts_with(set) &&\n            name.ends_with(\"_sol.dat\")\n        }).is_some());\n\n    for file in files {\n        let file = file?;\n        let n = file.file_name().into_string().unwrap()[set.len()..].split('_').next().unwrap().parse()?;\n        let mut stream = BufReader::new(File::open(file.path())?);\n        while let Some(opt) = parse_solution_line(&mut stream)? {\n            solutions.insert((n, opt.id), opt);\n        }\n    }\n\n    Ok(solutions)\n}"]},{"t":"Para","c":[{"t":"Str","c":"Trait"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"Boilerplate"]},{"t":"Space"},{"t":"Str","c":"definuje"},{"t":"Space"},{"t":"Str","c":"funkci"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"parse_next"]},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"zkrácení"},{"t":"Space"},{"t":"Str","c":"zápisu"},{"t":"Space"},{"t":"Str","c":"zpracování"},{"t":"SoftBreak"},{"t":"Str","c":"vstupu."}]},{"t":"CodeBlock","c":[["boilerplate",["rust","bootstrap-fold"],[]],"trait Boilerplate {\n    fn parse_next<T: FromStr>(&mut self) -> Result<T>\n      where <T as FromStr>::Err: std::error::Error + Send + Sync + 'static;\n}\n\nimpl Boilerplate for std::str::SplitWhitespace<'_> {\n    fn parse_next<T: FromStr>(&mut self) -> Result<T>\n      where <T as FromStr>::Err: std::error::Error + Send + Sync + 'static {\n        let str = self.next().ok_or_else(|| anyhow!(\"unexpected end of input\"))?;\n        str.parse::<T>()\n           .with_context(|| format!(\"cannot parse {}\", str))\n    }\n}"]},{"t":"Header","c":[3,["měření-výkonu",[],[]],[{"t":"Str","c":"Měření"},{"t":"Space"},{"t":"Str","c":"výkonu"}]]},{"t":"Para","c":[{"t":"Str","c":"Benchmark"},{"t":"Space"},{"t":"Str","c":"z"},{"t":"Space"},{"t":"Str","c":"minulého"},{"t":"Space"},{"t":"Str","c":"úkolu"},{"t":"Space"},{"t":"Str","c":"postavený"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"knihovně"},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"Criterion.rs"]}],["https://crates.io/crates/criterion",""]]},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"nachází"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"souboru"},{"t":"Space"},{"t":"Str","c":"níže."},{"t":"SoftBreak"},{"t":"Str","c":"Pro"},{"t":"Space"},{"t":"Str","c":"měření"},{"t":"Space"},{"t":"Str","c":"těchto"},{"t":"Space"},{"t":"Str","c":"experimentů"},{"t":"Space"},{"t":"Str","c":"ale"},{"t":"Space"},{"t":"Str","c":"nebyl"},{"t":"Space"},{"t":"Str","c":"použit."}]},{"t":"CodeBlock","c":[["",["rust","bootstrap-fold"],[["file","solver/benches/bench.rs"]]],"extern crate solver;\n\nuse solver::*;\nuse anyhow::{Result, anyhow};\nuse std::{collections::HashMap, fs::File, io::{BufReader, Write}, ops::Range, time::Duration};\nuse criterion::{criterion_group, criterion_main, Criterion, BenchmarkId};\n\nfn full(c: &mut Criterion) -> Result<()> {\n    let algs = get_algorithms();\n    let mut solutions = HashMap::new();\n    let ranges = HashMap::from([\n        (\"bb\",     0..=25),\n        (\"dpw\",    0..=32),\n        (\"dpc\",    0..=20),\n        (\"fptas1\", 0..=32),\n        (\"fptas2\", 0..=22),\n        (\"greedy\", 0..=32),\n        (\"redux\",  0..=32),\n    ]);\n\n    let mut input: HashMap<(&str, u32), Vec<Instance>> = HashMap::new();\n    let ns = [4, 10, 15, 20, 22, 25, 27, 30, 32];\n    let sets = [\"NK\", \"ZKC\", \"ZKW\"];\n    for set in sets {\n        solutions.insert(set, load_solutions(set)?);\n        for n in ns {\n            input.insert((set, n), load_input(set, n .. n + 1)?\n                .into_iter()\n                .rev()\n                .take(100)\n                .collect()\n            );\n        }\n    }\n\n    benchmark(algs, c, &ns, &sets, ranges, solutions, input)?;\n    Ok(())\n}\n\nfn benchmark(\n    algs: std::collections::BTreeMap<&str, fn(&Instance) -> Solution>,\n    c: &mut Criterion,\n    ns: &[u32],\n    sets: &[&'static str],\n    ranges: HashMap<&str, std::ops::RangeInclusive<u32>>,\n    solutions: HashMap<&str, HashMap<(u32, i32), OptimalSolution>>,\n    input: HashMap<(&str, u32), Vec<Instance>>\n) -> Result<(), anyhow::Error> {\n    Ok(for set in sets {\n        for (name, alg) in algs.iter() {\n            let mut group = c.benchmark_group(format!(\"{}-{}\", set, name));\n            group.sample_size(10).warm_up_time(Duration::from_millis(200));\n\n            for n in ns {\n                if !ranges.get(*name).filter(|r| r.contains(&n)).is_some()\n                || (*name == \"bb\" && *n > 22 && *set == \"ZKW\") {\n                    continue;\n                }\n\n                let (max, avg, nonzero_n) =\n                    measure(&mut group, *alg, &solutions[set], *n, &input[&(*set, *n)]);\n                eprintln!(\"max: {}, avg: {}, n: {} vs real n: {}\", max, avg, nonzero_n, n);\n                let avg = avg / nonzero_n as f64;\n\n                let mut file = File::create(format!(\"../docs/measurements/{}_{}_{}.txt\", set, name, n))?;\n                file.write_all(format!(\"max,avg\\n{},{}\", max, avg).as_bytes())?;\n            }\n            group.finish();\n        }\n    })\n}\n\nfn measure(\n    group: &mut criterion::BenchmarkGroup<criterion::measurement::WallTime>,\n    alg: for<'a> fn(&'a Instance) -> Solution<'a>,\n    solutions: &HashMap<(u32, i32), OptimalSolution>,\n    n: u32,\n    instances: &Vec<Instance>\n) -> (f64, f64, u32) {\n    let mut stats = (0.0, 0.0, 0);\n    group.bench_with_input(\n        BenchmarkId::from_parameter(n),\n        instances,\n        |b, ins| b.iter(\n            || ins.iter().for_each(|inst| {\n                let sln = alg(inst);\n                let optimal = &solutions[&(n, inst.id)];\n                if optimal.cost != 0 {\n                    let error = 1.0 - sln.cost as f64 / optimal.cost as f64;\n                    let (max, avg, n) = stats;\n                    stats = (if error > max { error } else { max }, avg + error, n + 1);\n                }\n            })\n        )\n    );\n\n    stats\n}\n\nfn load_input(set: &str, r: Range<u32>) -> Result<Vec<Instance>> {\n    let mut instances = Vec::new();\n\n    for file in list_input_files(set, r)? {\n        let file = file?;\n        let mut r = BufReader::new(File::open(file.path())?);\n        while let Some(inst) = parse_line(&mut r)? {\n            instances.push(inst);\n        }\n    }\n\n    Ok(instances)\n}\n\nfn proxy(c: &mut Criterion) {\n    full(c).unwrap()\n}\n\ncriterion_group!(benches, proxy);\ncriterion_main!(benches);"]},{"t":"Header","c":[3,["spouštění-jednotlivých-řešičů",[],[]],[{"t":"Str","c":"Spouštění"},{"t":"Space"},{"t":"Str","c":"jednotlivých"},{"t":"Space"},{"t":"Str","c":"řešičů"}]]},{"t":"Para","c":[{"t":"Str","c":"Projekt"},{"t":"Space"},{"t":"Str","c":"podporuje"},{"t":"Space"},{"t":"Str","c":"sestavení"},{"t":"Space"},{"t":"Str","c":"spustitelného"},{"t":"Space"},{"t":"Str","c":"souboru"},{"t":"Space"},{"t":"Str","c":"schopného"},{"t":"Space"},{"t":"Str","c":"zpracovat"},{"t":"Space"},{"t":"Str","c":"libovolný"},{"t":"SoftBreak"},{"t":"Str","c":"vstup"},{"t":"Space"},{"t":"Str","c":"ze"},{"t":"Space"},{"t":"Str","c":"zadání"},{"t":"Space"},{"t":"Str","c":"za"},{"t":"Space"},{"t":"Str","c":"pomoci"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"zvoleného"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"příkazové"},{"t":"Space"},{"t":"Str","c":"řádce."},{"t":"Space"},{"t":"Str","c":"Zdrojový"},{"t":"Space"},{"t":"Str","c":"kód"},{"t":"SoftBreak"},{"t":"Str","c":"tohoto"},{"t":"Space"},{"t":"Str","c":"rozhraní"},{"t":"Space"},{"t":"Str","c":"se"},{"t":"Space"},{"t":"Str","c":"nachází"},{"t":"Space"},{"t":"Str","c":"v"},{"t":"Space"},{"t":"Str","c":"souboru"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"solver/src/bin/main.rs"]},{"t":"Str","c":"."},{"t":"Space"},{"t":"Str","c":"Na"},{"t":"Space"},{"t":"Str","c":"standardní"},{"t":"SoftBreak"},{"t":"Str","c":"výstup"},{"t":"Space"},{"t":"Str","c":"vypisuje"},{"t":"Space"},{"t":"Str","c":"cenu"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"chybu"},{"t":"Space"},{"t":"Str","c":"řešení,"},{"t":"Space"},{"t":"Str","c":"spoléhá"},{"t":"Space"},{"t":"Str","c":"ovšem"},{"t":"Space"},{"t":"Str","c":"na"},{"t":"Space"},{"t":"Str","c":"to,"},{"t":"Space"},{"t":"Str","c":"že"},{"t":"Space"},{"t":"Str","c":"mezi"},{"t":"Space"},{"t":"Str","c":"optimálními"},{"t":"SoftBreak"},{"t":"Str","c":"řešeními"},{"t":"Space"},{"t":"Str","c":"najde"},{"t":"Space"},{"t":"Str","c":"i"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"pro"},{"t":"Space"},{"t":"Str","c":"kombinaci"},{"t":"Space"},{"t":"Str","c":"velikosti"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"ID"},{"t":"Space"},{"t":"Str","c":"zadané"},{"t":"Space"},{"t":"Str","c":"instance."}]},{"t":"CodeBlock","c":[["",["rust"],[["file","solver/src/bin/main.rs"]]],"extern crate solver;\n\nuse std::io::stdin;\nuse solver::*;\nuse anyhow::{Result, anyhow};\n\nfn main() -> Result<()> {\n    let algorithms = get_algorithms();\n    let solutions = load_solutions(\"NK\")?;\n\n    enum Either<A, B> { Left(A), Right(B) }\n    use  Either::*;\n\n    let alg = {\n        <<select-algorithm>>\n    }?;\n\n    for inst in load_instances(&mut stdin().lock())? {\n        use std::time::Instant;\n        let (now, sln) = match alg {\n            Right(f) => (Instant::now(), f(&inst)),\n            Left(cfg) => {\n                let mut rng: rand_chacha::ChaCha8Rng = rand::SeedableRng::seed_from_u64(42);\n                (Instant::now(), inst.simulated_annealing(&mut rng, cfg))\n            },\n        };\n        println!(\"took {} ms\", now.elapsed().as_millis());\n        let optimal = &solutions.get(&(inst.items.len() as u32, inst.id));\n        let error = optimal.map(|opt| 1.0 - sln.cost as f64 / opt.cost as f64);\n        println!(\"{} {}\", sln.cost, error.map(|e| e.to_string()).unwrap_or_default());\n    }\n    Ok(())\n}"]},{"t":"Para","c":[{"t":"Str","c":"Funkci"},{"t":"Space"},{"t":"Str","c":"příslušnou"},{"t":"Space"},{"t":"Str","c":"vybranému"},{"t":"Space"},{"t":"Str","c":"algoritmu"},{"t":"Space"},{"t":"Str","c":"vrátíme"},{"t":"Space"},{"t":"Str","c":"jako"},{"t":"Space"},{"t":"Str","c":"hodnotu"},{"t":"Space"},{"t":"Str","c":"tohoto"},{"t":"Space"},{"t":"Str","c":"bloku:"}]},{"t":"CodeBlock","c":[["select-algorithm",["rust","bootstrap-fold"],[]],"let args: Vec<String> = std::env::args().collect();\nif args.len() >= 2 {\n    let alg = &args[1][..];\n    if let Some(&f) = algorithms.get(alg) {\n        Ok(Right(f))\n    } else if alg == \"sa\" { #[allow(clippy::or_fun_call)] { // simulated annealing\n        let mut iter = args[2..].iter().map(|str| &str[..]);\n        let max_iterations = iter.next().ok_or(anyhow!(\"not enough params\"))?.parse()?;\n        let scaling_factor = iter.next().ok_or(anyhow!(\"not enough params\"))?.parse()?;\n        let temp_modifier = iter.next().ok_or(anyhow!(\"not enough params\"))?.parse()?;\n        let equilibrium_width = iter.next().ok_or(anyhow!(\"not enough params\"))?.parse()?;\n        Ok(Left((max_iterations, scaling_factor, temp_modifier, equilibrium_width)))\n    } } else {\n        Err(anyhow!(\"\\\"{}\\\" is not a known algorithm\", alg))\n    }\n} else {\n    println!(\n        \"Usage: {} <algorithm>\\n\\twhere <algorithm> is one of {}\\n\\tor 'sa' for simulated annealing.\",\n        args[0],\n        algorithms.keys().map(ToString::to_string).collect::<Vec<_>>().join(\", \")\n    );\n    Err(anyhow!(\"Expected 1 argument, got {}\", args.len() - 1))\n}"]},{"t":"Header","c":[3,["automatické-testy",[],[]],[{"t":"Str","c":"Automatické"},{"t":"Space"},{"t":"Str","c":"testy"}]]},{"t":"Para","c":[{"t":"Str","c":"Implementaci"},{"t":"Space"},{"t":"Str","c":"doplňují"},{"t":"Space"},{"t":"Str","c":"automatické"},{"t":"Space"},{"t":"Str","c":"testy"},{"t":"Space"},{"t":"Str","c":"k"},{"t":"Space"},{"t":"Str","c":"ověření"},{"t":"Space"},{"t":"Str","c":"správnosti,"},{"t":"Space"},{"t":"Str","c":"včetně"},{"t":"SoftBreak"},{"t":"Str","c":"property-based"},{"t":"Space"},{"t":"Str","c":"testu"},{"t":"Space"},{"t":"Str","c":"s"},{"t":"Space"},{"t":"Str","c":"knihovnou"},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"quickcheck"}],["https://github.com/BurntSushi/quickcheck",""]]},{"t":"Str","c":"."}]},{"t":"CodeBlock","c":[["tests",["rust","bootstrap-fold"],[]],"#[cfg(test)]\nmod tests {\n    use super::*;\n    use quickcheck::{Arbitrary, Gen};\n    use std::{fs::File, io::BufReader};\n\n    impl Arbitrary for Instance {\n        fn arbitrary(g: &mut Gen) -> Instance {\n            Instance {\n                id:    i32::arbitrary(g),\n                m:     u32::arbitrary(g).min(10_000),\n                items: vec![<(u32, u32)>::arbitrary(g)]\n                           .into_iter()\n                           .chain(Vec::arbitrary(g).into_iter())\n                           .take(10)\n                           .map(|(w, c): (u32, u32)| (w.min(10_000), c % 10_000))\n                           .collect(),\n            }\n        }\n\n        fn shrink(&self) -> Box<dyn Iterator<Item = Self>> {\n            let data = self.clone();\n            #[allow(clippy::needless_collect)]\n            let chain: Vec<Instance> = quickcheck::empty_shrinker()\n                .chain(self.id   .shrink().map(|id   | Instance {id,    ..(&data).clone()}))\n                .chain(self.m    .shrink().map(|m    | Instance {m,     ..(&data).clone()}))\n                .chain(self.items.shrink().map(|items| Instance { items, ..(&data).clone() })\n                        .filter(|i| !i.items.is_empty()))\n                .collect();\n            Box::new(chain.into_iter())\n        }\n    }\n\n    impl <'a> Solution<'a> {\n        fn assert_valid(&self) {\n            let Solution { weight, cost, cfg, inst } = self;\n            let Instance { m, items, .. } = inst;\n\n            let (computed_weight, computed_cost) = items\n                .iter()\n                .zip(cfg)\n                .map(|((w, c), b)| {\n                    if *b { (*w, *c) } else { (0, 0) }\n                })\n                .reduce(|(a0, b0), (a1, b1)| (a0 + a1, b0 + b1))\n                .unwrap_or_default();\n\n            assert!(computed_weight <= *m);\n            assert_eq!(computed_cost, *cost);\n            assert_eq!(computed_weight, *weight);\n        }\n    }\n\n    #[test]\n    fn stupid() {\n        // let i = Instance { id: 0, m: 1, b: 0, items: vec![(1, 0), (1, 0)] };\n        // i.branch_and_bound2().assert_valid(&i);\n        let i = Instance { id: 0, m: 1, items: vec![(1, 1), (1, 2), (0, 1)] };\n        let bb = i.branch_and_bound();\n        assert_eq!(bb.cost, i.dynamic_programming_w().cost);\n        assert_eq!(bb.cost, i.dynamic_programming_c().cost);\n        assert_eq!(bb.cost, i.greedy_redux().cost);\n        assert_eq!(bb.cost, i.brute_force().cost);\n        assert_eq!(bb.cost, i.greedy().cost);\n    }\n\n    #[ignore]\n    #[test]\n    fn proper() -> Result<()> {\n        type Solver = (&'static str, for<'a> fn(&'a Instance) -> Solution<'a>);\n        let algs = get_algorithms();\n        let algs: Vec<Solver> = algs.iter().map(|(s, f)| (*s, *f)).collect();\n        let opts = load_solutions(\"NK\")?;\n        println!(\"loaded {} optimal solutions\", opts.len());\n\n        let solve: for<'a> fn(&Vec<_>, &'a _) -> Vec<(&'static str, Solution<'a>)> =\n            |algs, inst|\n            algs.iter().map(|(name, alg): &Solver| (*name, alg(inst))).collect();\n\n        let mut files = list_input_files(\"NK\", 0..5)?.into_iter();\n        // make sure `files` is not empty\n        let first = files.next().ok_or_else(|| anyhow!(\"no instance files loaded\"))?;\n        for file in vec![first].into_iter().chain(files) {\n            let file = file?;\n            println!(\"Testing {}\", file.file_name().to_str().unwrap());\n            // open the file\n            let mut r = BufReader::new(File::open(file.path())?);\n            // solve each instance with all algorithms\n            while let Some(slns) = parse_line(&mut r)?.as_ref().map(|x| solve(&algs, x)) {\n                // verify correctness\n                slns.iter().for_each(|(alg, s)| {\n                    eprint!(\"\\rid: {} alg: {}\\t\", s.inst.id, alg);\n                    s.assert_valid();\n                    let key = (s.inst.items.len() as u32, s.inst.id);\n                    assert!(s.cost <= opts[&key].cost);\n                });\n            }\n        }\n        Ok(())\n    }\n\n    #[test]\n    fn dpc_simple() {\n        let i = Instance { id: 0, m: 0, items: vec![(0, 1), (0, 1)] };\n        let s = i.dynamic_programming_c();\n        assert_eq!(s.cost, 2);\n        assert_eq!(s.weight, 0);\n        s.assert_valid();\n    }\n\n    #[test]\n    fn fptas_is_within_bounds() -> Result<()> {\n        let opts = load_solutions(\"NK\")?;\n        for eps in [0.1, 0.01] {\n            for file in list_input_files(\"NK\", 0..5)? {\n                let file = file?;\n                let mut r = BufReader::new(File::open(file.path())?);\n                while let Some(sln) = parse_line(&mut r)?.as_ref().map(|x| x.fptas(eps)) {\n                    // make sure the solution from fptas is at least (1 - eps) * optimal cost\n                    let key = (sln.inst.items.len() as u32, sln.inst.id);\n                    println!(\"{} {} {}\", sln.cost, opts[&key].cost, (1.0 - eps) * opts[&key].cost as f64);\n                    assert!(sln.cost as f64 >= opts[&key].cost as f64 * (1.0 - eps));\n                }\n            }\n        }\n        Ok(())\n    }\n\n    #[test]\n    fn small_bb_is_correct() {\n        let a = Instance {\n            id: -10,\n            m: 165,\n            items: vec![ (86,  744)\n                       , (214, 1373)\n                       , (236, 1571)\n                       , (239, 2388)\n                       ],\n        };\n        a.branch_and_bound().assert_valid();\n    }\n\n    #[ignore]\n    #[test]\n    fn bb_is_correct() -> Result<()> {\n        use std::fs::File;\n        use std::io::BufReader;\n        let inst = parse_line(\n            &mut BufReader::new(File::open(\"ds/NK15_inst.dat\")?)\n        )?.unwrap();\n        println!(\"testing {:?}\", inst);\n        inst.branch_and_bound().assert_valid();\n        Ok(())\n    }\n\n    #[quickcheck]\n    fn qc_bb_is_really_correct(inst: Instance) {\n        assert_eq!(inst.branch_and_bound().cost, inst.brute_force().cost);\n    }\n\n    #[quickcheck]\n    fn qc_dp_matches_bb(inst: Instance) {\n        assert!(inst.branch_and_bound().cost <= inst.dynamic_programming_w().cost);\n    }\n\n    #[quickcheck]\n    fn qc_dps_match(inst: Instance) {\n        assert_eq!(inst.dynamic_programming_w().cost, inst.dynamic_programming_c().cost);\n    }\n\n    #[quickcheck]\n    fn qc_greedy_is_valid(inst: Instance) {\n        inst.greedy().assert_valid();\n        inst.greedy_redux().assert_valid();\n    }\n}\n"]}]}